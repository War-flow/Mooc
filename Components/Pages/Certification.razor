@page "/certification"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Mooc.Services
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManagerService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ICertificateGenerationService CertificateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Certification> _logger
@attribute [Authorize]
@attribute [StreamRendering]

<PageTitle>Mes Certifications</PageTitle>

<!-- En-tête de page avec design moderne -->
<div class="page-header header-waves ocean header-animated">
    <div class="container">
        <div class="row align-items-center">
            <div class="col">
                <i class="bi bi-award-fill header-icon morphing"></i>
                <h1 class="page-title typewriter">Mes Certifications</h1>
                <p class="page-subtitle">Consultez et téléchargez vos certificats de formation</p>
                <div class="header-stats">
                    <span class="stat-badge bouncing">
                        <i class="bi bi-trophy-fill me-2"></i>
                        @availableCertificates.Count certificat@(availableCertificates.Count > 1 ? "s" : "")
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <!-- Filtres -->
    <div class="row mb-4">
        <div class="col-md-6 mt-2 mt-md-0">
            <div class="d-flex gap-2 align-items-center">
                <select class="form-select" style="max-width: 200px;" @bind="selectedFilter">
                    <option value="">Tous les certificats</option>
                    <option value="Generated">Disponibles</option>
                    <option value="Delivered">Délivrés</option>
                </select>
                <button class="btn btn-outline-secondary" @onclick="ClearFilters" title="Réinitialiser les filtres">
                    <i class="bi bi-funnel"></i>
                </button>
                @if (!string.IsNullOrEmpty(selectedFilter))
                {
                    <span class="badge bg-info">@GetFilterLabel(selectedFilter)</span>
                }
            </div>
        </div>
        <div class="col-md-6 mt-2 mt-md-0">
            <div class="d-flex justify-content-md-end">
                <div class="input-group" style="max-width: 300px;">
                    <input type="text" class="form-control" placeholder="Rechercher..." 
                           @bind="searchTerm" @oninput="OnSearchInput">
                    <button class="btn btn-outline-secondary" type="button">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Tableau des certifications -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm table-view">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th scope="col" class="border-0 px-4 py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-hash text-muted me-2"></i>
                                            ID
                                        </div>
                                    </th>
                                    <th scope="col" class="border-0 px-4 py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-award text-muted me-2"></i>
                                            Certificat
                                        </div>
                                    </th>
                                    <th scope="col" class="border-0 px-4 py-3 d-none d-lg-table-cell">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-calendar-event text-muted me-2"></i>
                                            Session
                                        </div>
                                    </th>
                                    <th scope="col" class="border-0 px-4 py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-gear text-muted me-2"></i>
                                            Actions
                                        </div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (isLoading)
                                {
                                    <tr>
                                        <td colspan="4" class="text-center py-4">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Chargement...</span>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                else if (filteredCertificates?.Any() == true)
                                {
                                    @foreach (var cert in filteredCertificates)
                                    {
                                        <tr class="certification-row">
                                            <td class="px-4 py-3">
                                                <span class="badge bg-primary rounded-pill">@cert.Id</span>
                                            </td>
                                            <!-- Modifier l'affichage pour utiliser DisplaySessionTitle -->
                                            <td class="px-4 py-3">
                                                <div class="d-flex align-items-center">
                                                    <div class="certification-icon me-3">
                                                        <i class="bi bi-file-earmark-pdf-fill text-danger fs-4"></i>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="px-4 py-3 d-none d-lg-table-cell">
                                                <div>
                                                    <span class="d-block fw-medium">@cert.DisplaySessionTitle</span>
                                                    @if (cert.ArchivedSessionStartDate.HasValue && cert.ArchivedSessionEndDate.HasValue)
                                                    {
                                                        <small class="text-muted">
                                                            @cert.ArchivedSessionStartDate.Value.ToString("dd MMM yyyy") - 
                                                            @cert.ArchivedSessionEndDate.Value.ToString("dd MMM yyyy")
                                                        </small>
                                                    }
                                                    else if (cert.Session != null)
                                                    {
                                                        <small class="text-muted">
                                                            @cert.Session.StartDate.ToString("dd MMM yyyy") - 
                                                            @cert.Session.EndDate.ToString("dd MMM yyyy")
                                                        </small>
                                                    }
                                                </div>
                                            </td>
                                            <td class="px-4 py-3">
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-success btn-sm d-flex align-items-center" 
                                                            @onclick="() => DownloadCertificate(cert.Id, CertificateType.Pdf)"
                                                            disabled="@isDownloading">
                                                        @if (isDownloading)
                                                        {
                                                            <div class="spinner-border spinner-border-sm me-1" role="status">
                                                                <span class="visually-hidden">Téléchargement...</span>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-download me-1"></i>
                                                        }
                                                        <span class="d-none d-sm-inline">PDF</span>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Message si aucune certification -->
    @if (AucuneCertification)
    {
        <div class="row mt-5">
            <div class="col-12">
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-award fs-1"></i>
                    </div>
                    <h3 class="empty-state-title">Aucune certification trouvée</h3>
                    <p class="empty-state-text">Vous n'avez pas encore de certificats disponibles. Terminez vos formations pour obtenir vos certificats.</p>
                    <a href="/" class="btn btn-primary btn-lg">
                        <i class="bi bi-book me-2"></i>
                        Voir les formations
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Certificate> availableCertificates = new();
    private List<Certificate> filteredCertificates = new();
    private bool isLoading = true;
    private bool isDownloading = false;
    private string selectedFilter = string.Empty;
    private string searchTerm = string.Empty;
    private Timer? searchTimer;
    private IJSObjectReference? jsModule;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificatesAsync();
        filteredCertificates = availableCertificates;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/downloadHelper.js");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Erreur lors du chargement du module JavaScript");
                // Fallback : définir la fonction inline
                await JSRuntime.InvokeVoidAsync("eval", @"
                    window.downloadFile = function(byteArray, fileName, contentType) {
                        try {
                            const blob = new Blob([new Uint8Array(byteArray)], { type: contentType });
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = fileName;
                            document.body.appendChild(a);
                            a.click();
                            window.URL.revokeObjectURL(url);
                            document.body.removeChild(a);
                        } catch (error) {
                            console.error('Erreur lors du téléchargement:', error);
                            throw error;
                        }
                    };
                ");
            }
        }
    }

    private async Task LoadCertificatesAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManagerService.GetUserAsync(authState.User);
            if (user != null)
            {
                using var context = await DbContextFactory.CreateDbContextAsync();
                availableCertificates = await context.Certificates
                    .Include(c => c.Session)
                    .Where(c => c.UserId == user.Id && c.Status == "Generated")
                    .OrderByDescending(c => c.DateGenerated)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Erreur lors du chargement des certificats");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilter()
    {
        await FilterCertificates();
    }

    private async Task ClearFilters()
    {
        selectedFilter = string.Empty;
        searchTerm = string.Empty;
        await FilterCertificates();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await FilterCertificates();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private async Task FilterCertificates()
    {
        await Task.Run(() =>
        {
            var filtered = availableCertificates.AsEnumerable();

            if (!string.IsNullOrEmpty(selectedFilter))
            {
                filtered = filtered.Where(c => c.Status == selectedFilter);
            }

            if (!string.IsNullOrEmpty(searchTerm))
            {
                filtered = filtered.Where(c => 
                    c.Session.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.CertificateNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            filteredCertificates = filtered.ToList();
        });
        
        StateHasChanged();
    }

    private string GetFilterLabel(string filter) => filter switch
    {
        "Generated" => "Disponibles",
        "Delivered" => "Délivrés", 
        "Revoked" => "Révoqués",
        _ => filter
    };

    // ✅ CORRECTION : Passer le certificateId au lieu du sessionId
    private async Task DownloadCertificate(int certificateId, CertificateType type)
    {
        if (isDownloading) return;

        try
        {
            isDownloading = true;
            StateHasChanged();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManagerService.GetUserAsync(authState.User);
            if (user == null) 
            {
                _logger?.LogWarning("Utilisateur non trouvé pour le téléchargement du certificat");
                return;
            }

            // ✅ NOUVEAU : Récupérer le certificat pour obtenir les bonnes informations
            using var context = await DbContextFactory.CreateDbContextAsync();
            var certificate = await context.Certificates
                .Include(c => c.Session)
                .FirstOrDefaultAsync(c => c.Id == certificateId && c.UserId == user.Id);

            if (certificate == null)
            {
                _logger?.LogWarning("Certificat {CertificateId} introuvable pour l'utilisateur {UserId}", certificateId, user.Id);
                await JSRuntime.InvokeVoidAsync("alert", "Certificat introuvable.");
                return;
            }

            // ✅ Vérifier si on a une session ou des données archivées
            int? sessionId = certificate.SessionId;
            
            if (!sessionId.HasValue)
            {
                // ✅ Session archivée : utiliser une nouvelle méthode de génération
                _logger?.LogInformation("Génération de certificat archivé {CertificateId}", certificateId);
                var certificateData = await CertificateService.GenerateArchivedCertificateAsync(certificateId, type);
                
                await DownloadCertificateData(certificateData, certificate.ArchivedSessionTitle ?? "Formation", type);
            }
            else
            {
                // ✅ Session active : méthode normale
                var certificateData = await CertificateService.GenerateCertificateAsync(sessionId.Value, user.Id, type);
                
                await DownloadCertificateData(certificateData, certificate.Session?.Title ?? "Formation", type);
            }
        }
        catch (JSException jsEx)
        {
            _logger?.LogError(jsEx, "Erreur JavaScript lors du téléchargement: {Message}", jsEx.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors du téléchargement: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Erreur lors du téléchargement du certificat {CertificateId}", certificateId);
            await JSRuntime.InvokeVoidAsync("alert", "Erreur lors du téléchargement du certificat. Veuillez réessayer.");
        }
        finally
        {
            isDownloading = false;
            StateHasChanged();
        }
    }

    // ✅ NOUVELLE MÉTHODE : Helper pour télécharger les données du certificat
    private async Task DownloadCertificateData(byte[] certificateData, string sessionTitle, CertificateType type)
    {
        var fileName = $"Certificat_{sessionTitle.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd}";
        var contentType = type == CertificateType.Pdf ? "application/pdf" : "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        var fileExtension = type == CertificateType.Pdf ? ".pdf" : ".docx";
        
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("downloadFile", certificateData, $"{fileName}{fileExtension}", contentType);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("downloadFile", certificateData, $"{fileName}{fileExtension}", contentType);
        }
    }

    private bool AucuneCertification => !filteredCertificates?.Any() == true && !isLoading;

    public async ValueTask DisposeAsync()
    {
        searchTimer?.Dispose();
        if (jsModule != null)
        {
            await jsModule.DisposeAsync();
        }
    }
    }