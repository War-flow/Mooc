@page "/certification"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Mooc.Services
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManagerService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ICertificateGenerationService CertificateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Certification> _logger
@attribute [Authorize]
@attribute [StreamRendering]

<PageTitle>Mes Certifications</PageTitle>

<div class="container-fluid py-4">
    <!-- En-tête de la page -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h1 class="h2 text-dark fw-bold mb-2">
                        <i class="bi bi-award-fill text-warning me-3"></i>
                        Mes Certifications
                    </h1>
                    <p class="text-muted mb-0">Consultez et téléchargez vos certificats de formation</p>
                </div>
                <div class="d-none d-md-block">
                    <div class="bg-light p-3 rounded-3 text-center">
                        <i class="bi bi-trophy-fill text-warning fs-2"></i>
                        <div class="mt-2">
                            <small class="text-muted d-block">Total</small>
                            <strong class="text-primary">@availableCertificates.Count</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtres -->
    <div class="row mb-4">
        <div class="col-md-6 mt-2 mt-md-0">
            <div class="d-flex gap-2 align-items-center">
                <select class="form-select" style="max-width: 200px;" @bind="selectedFilter">
                    <option value="">Tous les certificats</option>
                    <option value="Generated">Disponibles</option>
                    <option value="Delivered">Délivrés</option>
                    <option value="Revoked">Révoqués</option>
                </select>
                <button class="btn btn-outline-secondary" @onclick="ClearFilters" title="Réinitialiser les filtres">
                    <i class="bi bi-funnel"></i>
                </button>
                @if (!string.IsNullOrEmpty(selectedFilter))
                {
                    <span class="badge bg-info">@GetFilterLabel(selectedFilter)</span>
                }
            </div>
        </div>
        <div class="col-md-6 mt-2 mt-md-0">
            <div class="d-flex justify-content-md-end">
                <div class="input-group" style="max-width: 300px;">
                    <input type="text" class="form-control" placeholder="Rechercher..." 
                           @bind="searchTerm" @oninput="OnSearchInput">
                    <button class="btn btn-outline-secondary" type="button">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Tableau des certifications -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm table-view">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th scope="col" class="border-0 px-4 py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-hash text-muted me-2"></i>
                                            ID
                                        </div>
                                    </th>
                                    <th scope="col" class="border-0 px-4 py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-award text-muted me-2"></i>
                                            Certificat
                                        </div>
                                    </th>
                                    <th scope="col" class="border-0 px-4 py-3 d-none d-lg-table-cell">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-calendar-event text-muted me-2"></i>
                                            Session
                                        </div>
                                    </th>
                                    <th scope="col" class="border-0 px-4 py-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-gear text-muted me-2"></i>
                                            Actions
                                        </div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (isLoading)
                                {
                                    <tr>
                                        <td colspan="4" class="text-center py-4">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Chargement...</span>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                else if (filteredCertificates?.Any() == true)
                                {
                                    @foreach (var cert in filteredCertificates)
                                    {
                                        <tr class="certification-row">
                                            <td class="px-4 py-3">
                                                <span class="badge bg-primary rounded-pill">@cert.Id</span>
                                            </td>
                                            <td class="px-4 py-3">
                                                <div class="d-flex align-items-center">
                                                    <div class="certification-icon me-3">
                                                        <i class="bi bi-file-earmark-pdf-fill text-danger fs-4"></i>
                                                    </div>
                                                    <div>
                                                        <h6 class="mb-1 fw-semibold">@cert.Session.Title</h6>
                                                        <small class="text-muted">Certificat n° @cert.CertificateNumber</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="px-4 py-3 d-none d-lg-table-cell">
                                                <div>
                                                    <span class="d-block fw-medium">@cert.Session.Title</span>
                                                    <small class="text-muted">@cert.Session.StartDate.ToString("dd MMM yyyy") - @cert.Session.EndDate.ToString("dd MMM yyyy")</small>
                                                </div>
                                            </td>
                                            <td class="px-4 py-3">
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-success btn-sm d-flex align-items-center" 
                                                            @onclick="() => DownloadCertificate(cert.SessionId, CertificateType.Pdf)">
                                                        <i class="bi bi-download me-1"></i>
                                                        <span class="d-none d-sm-inline">PDF</span>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Message si aucune certification -->
    @if (AucuneCertification)
    {
        <div class="row mt-5">
            <div class="col-12">
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-award text-muted" style="font-size: 4rem;"></i>
                    </div>
                    <h4 class="text-muted mb-3">Aucune certification trouvée</h4>
                    <p class="text-muted mb-4">Vous n'avez pas encore de certificats disponibles. Terminez vos formations pour obtenir vos certificats.</p>
                    <a href="/" class="btn btn-primary">
                        <i class="bi bi-book me-2"></i>
                        Voir les formations
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Certificate> availableCertificates = new();
    private List<Certificate> filteredCertificates = new();
    private bool isLoading = true;
    private string selectedFilter = string.Empty;
    private string searchTerm = string.Empty;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificatesAsync();
        filteredCertificates = availableCertificates;
    }

    private async Task LoadCertificatesAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManagerService.GetUserAsync(authState.User);
            if (user != null)
            {
                using var context = await DbContextFactory.CreateDbContextAsync();
                availableCertificates = await context.Certificates
                    .Include(c => c.Session)
                    .Where(c => c.UserId == user.Id && c.Status == "Generated")
                    .OrderByDescending(c => c.DateGenerated)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Erreur lors du chargement des certificats");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilter()
    {
        await FilterCertificates();
    }

    private async Task ClearFilters()
    {
        selectedFilter = string.Empty;
        searchTerm = string.Empty;
        await FilterCertificates();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await FilterCertificates();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private async Task FilterCertificates()
    {
        await Task.Run(() =>
        {
            var filtered = availableCertificates.AsEnumerable();

            if (!string.IsNullOrEmpty(selectedFilter))
            {
                filtered = filtered.Where(c => c.Status == selectedFilter);
            }

            if (!string.IsNullOrEmpty(searchTerm))
            {
                filtered = filtered.Where(c => 
                    c.Session.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.CertificateNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            filteredCertificates = filtered.ToList();
        });
        
        StateHasChanged();
    }

    private string GetFilterLabel(string filter) => filter switch
    {
        "Generated" => "Disponibles",
        "Delivered" => "Délivrés", 
        "Revoked" => "Révoqués",
        _ => filter
    };

    private async Task DownloadCertificate(int sessionId, CertificateType type)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManagerService.GetUserAsync(authState.User);
            if (user == null) return;

            var certificateData = await CertificateService.GenerateCertificateAsync(sessionId, user.Id, type);
            
            var fileName = $"Certificat_{sessionId}_{DateTime.Now:yyyyMMdd}";
            var contentType = type == CertificateType.Pdf ? "application/pdf" : "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            var fileExtension = type == CertificateType.Pdf ? ".pdf" : ".docx";
            
            await JSRuntime.InvokeVoidAsync("downloadFile", certificateData, $"{fileName}{fileExtension}", contentType);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du téléchargement: {ex.Message}");
        }
    }

    private bool AucuneCertification => !filteredCertificates?.Any() == true && !isLoading;

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}

<script>
    window.downloadFile = (byteArray, fileName, contentType) => {
        const blob = new Blob([new Uint8Array(byteArray)], { type: contentType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    };
</script>