@page "/"

@using Microsoft.AspNetCore.Identity
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<PageTitle>MOOC POINT COM</PageTitle>

<!-- Hero Section avec animation de vagues -->
<div class="hero-section page-header header-waves ocean">
    <div class="container">
        <div class="hero-content animate-fade-in">
            <AuthorizeView>
                <Authorized>
                    @if (currentUser != null)
                    {
                        <div class="welcome-card animate-slide-in-bottom">
                            <div class="welcome-avatar">
                                <i class="bi bi-person-circle"></i>
                            </div>
                            <div class="welcome-text">
                                <h1 class="welcome-title hello">Bonjour, @currentUser.FirstName !</h1>
                                <p class="welcome-subtitle page-subtitle">Prêt à continuer votre apprentissage ?</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="welcome-card animate-slide-in-bottom">
                            <div class="welcome-avatar">
                                <i class="bi bi-person-circle"></i>
                            </div>
                            <div class="welcome-text">
                                <h1 class="welcome-title page-title">Bonjour, @context.User.Identity?.Name !</h1>
                                <p class="welcome-subtitle page-subtitle">Explorez nos formations disponibles</p>
                            </div>
                        </div>
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="hero-guest animate-zoom-in">
                        <h1 class="hero-title page-title">Bienvenue sur MOOC POINT COM</h1>
                        <div class="hero-actions">
                            <a href="/Account/Register" class="btn btn-primary btn-lg">
                                <i class="bi bi-person-plus"></i> S'inscrire
                            </a>
                            <a href="/compte/connexion" class="btn btn-outline-primary btn-lg">
                                <i class="bi bi-person-vcard"></i> Se connecter
                            </a>
                        </div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>
<!-- Section principale des sessions -->
<div class="sessions-section">
    <div class="container">
        <div class="section-header animate-fade-in">
            <h2 class="section-title">
                <i class="fas fa-star me-2"></i>
                Formations Disponibles
            </h2>
            <p class="section-subtitle">
                Découvrez nos sessions de formation et commencez votre parcours d'apprentissage
            </p>
        </div>

        @if (availableSessions == null)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p class="loading-text">Chargement des formations...</p>
            </div>
        }
        else if (!availableSessions.Any())
        {
            <div class="empty-state animate-zoom-in">
                <div class="empty-icon">
                    <i class="bi bi-database-slash"></i>
                </div>
                <h3 class="empty-title">Aucune session disponible</h3>
                <p class="empty-description">
                    Il n'y a actuellement aucune formation disponible.
                    Revenez bientôt pour découvrir de nouvelles opportunités d'apprentissage !
                </p>
            </div>
        }
        else
        {
            <div class="sessions-content animate-slide-in-bottom">
                <CardHome Sessions="@availableSessions" />
            </div>
        }
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private List<Session>? availableSessions;

    protected override async Task OnInitializedAsync()
    {
        // Utilisation de IDbContextFactory pour obtenir une nouvelle instance de DbContext
        using var dbContext = await DbContextFactory.CreateDbContextAsync();

        // ⭐ CORRECTION : Utilisation de DateTime.UtcNow au lieu de DateTime.Now
        var currentTime = DateTime.UtcNow;

        // Récupération des sessions disponibles (pas encore terminées et actives)
        availableSessions = await dbContext.Sessions
            .Include(s => s.Courses)
            .Where(s => s.IsActive && currentTime <= s.EndDate)
            .OrderBy(s => s.StartDate)
            .ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Récupération directe depuis le contexte
            var userName = user.Identity.Name;
            currentUser = await dbContext.Users.FirstOrDefaultAsync(u => u.UserName == userName);
        }
    }

    private bool IsSessionAvailableForEnrollment(Session session)
    {
        // Votre logique pour déterminer si la session est disponible à l'inscription
        return true; // Par défaut, retourner vrai pour indiquer que la session est disponible
    }
}