@page "/"

@using Microsoft.AspNetCore.Identity
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<PageTitle>MOOC POINT COM</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (currentUser != null)
        {
            <h1 class="hello">Bonjour, @currentUser.FirstName</h1>
        }
        else
        {
            <h1 class="hello">Bonjour, @context.User.Identity?.Name</h1>
        }
    </Authorized>
</AuthorizeView>

<CardHome Sessions="@availableSessions" />

@code {
    private ApplicationUser? currentUser;
    private List<Session>? availableSessions;

    protected override async Task OnInitializedAsync()
    {
        // Utilisation de IDbContextFactory pour obtenir une nouvelle instance de DbContext
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        // Récupération des sessions disponibles (pas encore terminées et actives)
        availableSessions = await dbContext.Sessions
            .Include(s => s.Courses)
            .Where(s => s.IsActive && DateTime.Now <= s.EndDate)
            .OrderBy(s => s.StartDate)
            .ToListAsync();
            
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Récupération directe depuis le contexte
            var userName = user.Identity.Name;
            currentUser = await dbContext.Users.FirstOrDefaultAsync(u => u.UserName == userName);
        }
    }

    private bool IsSessionAvailableForEnrollment(Session session)
    {
        // Votre logique pour déterminer si la session est disponible à l'inscription
        return true; // Par défaut, retourner vrai pour indiquer que la session est disponible
    }
}