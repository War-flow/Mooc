@page "/badge"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Mooc.Services
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManagerService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ICertificateGenerationService CertificateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionCompletionService SessionCompletionService
@inject ILogger<Certification> _logger
@inject ICourseBadgeService CourseBadgeService
@attribute [Authorize]
@attribute [StreamRendering]

<PageTitle>Mes Succès</PageTitle>

<!-- En-tête de page avec design moderne -->
<div class="page-header header-waves ocean header-animated">
    <div class="container">
        <div class="row align-items-center">
            <div class="col">
                <i class="bi bi-award-fill header-icon morphing"></i>
                <h1 class="page-title typewriter">Mes succès</h1>
                <p class="page-subtitle">Collection de vos succès et badges de récompense</p>
                <div class="header-stats">
                    @if (totalBadgesCount > 0)
                    {
                        <span class="stat-badge bouncing">
                            <i class="bi bi-trophy-fill me-2"></i>
                            @totalBadgesCount badge@(totalBadgesCount > 1 ? "s" : "")
                        </span>
                    }
                    @if (certificatesCount > 0)
                    {
                        <span class="stat-badge bouncing" style="animation-delay: 0.2s;">
                            <i class="bi bi-award me-2"></i>
                            @certificatesCount certificat@(certificatesCount > 1 ? "s" : "")
                        </span>
                    }
                    @if (completedSessionsCount > 0)
                    {
                        <span class="stat-badge bouncing" style="animation-delay: 0.4s;">
                            <i class="bi bi-check-circle me-2"></i>
                            @completedSessionsCount formation@(completedSessionsCount > 1 ? "s" : "") terminée@(completedSessionsCount > 1 ? "s" : "")
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">


    <!-- Composant CardBadge réutilisable -->
    <CardBadge OnBadgeAction="HandleBadgeAction" />

    <!-- Section Statistiques détaillées -->
    @if (totalBadgesCount > 0)
    {
        <div class="row mt-5">
            <div class="col-12">
                <div class="card bg-light">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-bar-chart me-2"></i>
                            Vos statistiques de réussite
                        </h5>
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="stat-item">
                                    <div class="stat-value text-success">@completedSessionsCount</div>
                                    <div class="stat-label">Formations terminées</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="stat-item">
                                    <div class="stat-value text-primary">@certificatesCount</div>
                                    <div class="stat-label">Certificats obtenus</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="stat-item">
                                    <div class="stat-value text-warning">@totalBadgesCount</div>
                                    <div class="stat-label">Total badges</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="stat-item">
                                    <div class="stat-value text-info">@overallProgressPercentage.ToString("F0")%</div>
                                    <div class="stat-label">Taux de réussite</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@code {
    private string selectedFilter = "all";
    private int totalBadgesCount = 0;
    private int certificatesCount = 0;
    private int completedSessionsCount = 0;
    private double overallProgressPercentage = 0;
    private string? currentUserId;
    private bool isCheckingBadges = false;
    
    private bool showTestBadges = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserId();
        
        if (!string.IsNullOrEmpty(currentUserId))
        {
            await CheckAndCreateMissingBadgesAsync();
        }
        
        await LoadBadgeStatistics();
    }

    private async Task CheckAndCreateMissingBadgesAsync()
    {
        if (string.IsNullOrEmpty(currentUserId))
            return;

        try
        {
            isCheckingBadges = true;
            StateHasChanged();

            _logger?.LogInformation("🔍 Vérification des badges manquants pour l'utilisateur {UserId}", currentUserId);

            var createdBadges = await CourseBadgeService.CheckAndCreateMissingBadgesAsync(currentUserId);

            if (createdBadges.Any())
            {
                _logger?.LogInformation("🎉 {Count} badges créés automatiquement", createdBadges.Count);
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "❌ Erreur lors de la vérification des badges manquants");
        }
        finally
        {
            isCheckingBadges = false;
            StateHasChanged();
        }
    }

    private void ToggleTestBadges()
    {
        showTestBadges = !showTestBadges;
        StateHasChanged();
    }

    private async Task GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            currentUserId = authState.User.FindFirst("sub")?.Value
                           ?? authState.User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
        }
    }

    // ✅ CORRECTION : Méthode modifiée pour inclure les sessions archivées
    private async Task LoadBadgeStatistics()
    {
        if (string.IsNullOrEmpty(currentUserId))
            return;

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            // ✅ Compter TOUS les certificats (sessions actives ET archivées)
            certificatesCount = await context.Certificates
                .Where(c => c.UserId == currentUserId)
                .CountAsync();

            // ✅ Compter TOUS les badges
            totalBadgesCount = await context.CourseBadges
                .Where(cb => cb.UserId == currentUserId)
                .CountAsync();

            // ✅ MODIFICATION : Récupérer les sessions inscrites ET les certificats archivés
            var user = await context.Users
                .Include(u => u.EnrolledSessions)
                .FirstOrDefaultAsync(u => u.Id == currentUserId);

            if (user != null)
            {
                // Sessions actuellement inscrites
                var enrolledSessionIds = user.EnrolledSessions?.Select(s => s.Id).ToList() ?? new List<int>();
                
                // ✅ NOUVEAU : Ajouter les sessions des certificats archivés (SessionId peut être null)
                var archivedSessionsWithCertificates = await context.Certificates
                    .Where(c => c.UserId == currentUserId && c.SessionId == null)
                    .Select(c => new { 
                        Title = c.ArchivedSessionTitle ?? "Session archivée",
                        IsCompleted = true // Les certificats archivés sont forcément complétés
                    })
                    .ToListAsync();

                // Calculer les sessions complétées pour les sessions actives
                var activeCompletedCount = 0;
                if (enrolledSessionIds.Any())
                {
                    var sessionCompletionService = SessionCompletionService;
                    var completionInfos = await sessionCompletionService.GetUserSessionsCompletionInfoAsync(currentUserId);
                    activeCompletedCount = completionInfos.Count(c => c.Value.IsCompleted);
                }

                // ✅ TOTAL = sessions actives complétées + certificats archivés
                completedSessionsCount = activeCompletedCount + archivedSessionsWithCertificates.Count;

                // ✅ Calculer le pourcentage de progression global
                var totalSessions = enrolledSessionIds.Count + archivedSessionsWithCertificates.Count;
                if (totalSessions > 0)
                {
                    overallProgressPercentage = (double)completedSessionsCount / totalSessions * 100;
                }
                
                _logger?.LogInformation(
                    "📊 Statistiques - Sessions actives: {Active}, Archivées: {Archived}, Total complétées: {Completed}, Badges: {Badges}, Certificats: {Certs}",
                    enrolledSessionIds.Count,
                    archivedSessionsWithCertificates.Count,
                    completedSessionsCount,
                    totalBadgesCount,
                    certificatesCount
                );
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Erreur lors du chargement des statistiques");
        }
    }

    private async Task HandleBadgeAction(string action)
    {
        if (action.StartsWith("download-certificate-"))
        {
            var sessionIdStr = action.Replace("download-certificate-", "");
            if (int.TryParse(sessionIdStr, out var sessionId))
            {
                await DownloadCertificate(sessionId);
            }
        }
    }

    private async Task DownloadCertificate(int sessionId)
    {
        try
        {
            if (string.IsNullOrEmpty(currentUserId))
                return;

            var certificateData = await CertificateService.GenerateCertificateAsync(sessionId, currentUserId, CertificateType.Pdf);

            var fileName = $"Certificat_{sessionId}_{DateTime.Now:yyyyMMdd}.pdf";

            await JSRuntime.InvokeVoidAsync("downloadFile", certificateData, fileName, "application/pdf");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Erreur lors du téléchargement du certificat {SessionId}", sessionId);
            await JSRuntime.InvokeVoidAsync("alert", "Erreur lors du téléchargement du certificat. Veuillez réessayer.");
        }
    }

    private bool AucuneCertification => totalBadgesCount <= 0 && !isCheckingBadges;

    public async ValueTask DisposeAsync()
    {
        // Cleanup si nécessaire
    }
}

