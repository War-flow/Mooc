@page "/trombinoscope"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Mooc.Components.Layout
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManagerService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Trombinoscope> Logger
@attribute [StreamRendering]

<PageTitle>Trombinoscope</PageTitle>

<!-- En-tête de page avec design moderne -->
<div class="page-header header-waves ocean header-animated">
    <div class="container">
        <div class="row align-items-center">
            <div class="col">
                <i class="bi bi-people-fill header-icon morphing"></i>
                <h1 class="page-title">Trombinoscope</h1>
                <p class="page-subtitle">Découvrez notre communauté d'apprentissage</p>
                <div class="header-stats">
                    <span class="stat-badge bouncing">
                        <i class="bi bi-people-fill me-2"></i>
                        @(teamMembers?.Count ?? 0) membre@(teamMembers?.Count > 1 ? "s" : "")
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    @* DEBUG INFO *@
    @if (showDebugInfo)
    {
        <div class="alert alert-warning">
            <h5>🔍 DEBUG INFO</h5>
            <ul>
                <li><strong>Total utilisateurs:</strong> @totalUsersCount</li>
                <li><strong>Utilisateurs avec ShowInTrombinoscope=true:</strong> @usersWithShowTrombinoscopeCount</li>
                <li><strong>Utilisateurs avec sessions complétées:</strong> @usersWithCompletedSessionsCount</li>
                <li><strong>Utilisateurs finaux (Admin/Formateur):</strong> @(teamMembers?.Count ?? 0)</li>
                <li><strong>Date/Heure actuelle (UTC):</strong> @DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")</li>
            </ul>
            @if (currentUser != null)
            {
                <hr />
                <h6>👤 Utilisateur connecté: @currentUser.Email</h6>
                <ul>
                    <li><strong>ShowInTrombinoscope:</strong> @currentUser.ShowInTrombinoscope</li>
                    <li><strong>Sessions complétées:</strong> @completedSessionsCount</li>
                    <li><strong>Est étudiant:</strong> @isStudent</li>
                    <li><strong>Rôles:</strong> @string.Join(", ", currentUserRoles)</li>
                </ul>
            }
        </div>
    }

    @* Notification pour l'utilisateur connecté *@
    @if (currentUser != null && shouldShowNotification)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i>
            <strong>Comment apparaître sur le trombinoscope ?</strong>
            <ul class="mb-0 mt-2">
                @if (!currentUser.ShowInTrombinoscope)
                {
                    <li>Activez l'affichage de votre profil dans <a href="/Account/Manage" class="alert-link">vos paramètres</a></li>
                }
                @if (completedSessionsCount == 0)
                {
                    <li>Complétez au moins une session de formation</li>
                }
                @if (isStudent)
                {
                    <li>Seuls les formateurs et administrateurs apparaissent sur le trombinoscope</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (teamMembers != null)
    {
        @if (teamMembers.Any())
        {
            <!-- Grille du trombinoscope -->
            <div class="trombinoscope-grid">
                @foreach (var member in filteredMembers)
                {
                    <div class="team-member-card" data-role="@GetUserRole(member)">
                        <div class="member-photo">
                            <div class="photo-placeholder">
                                <i class="bi bi-person-circle"></i>
                            </div>
                            <div class="member-role-indicator">
                                <span class="role-badge @GetRoleBadgeClass(member)">
                                    <i class="@GetRoleIcon(member) me-1"></i>
                                    @GetUserRole(member)
                                </span>
                            </div>
                        </div>

                        <div class="member-info">
                            <h4 class="member-name">@member.Pseudo</h4>
                            <p class="member-title">@GetMemberTitle(member)</p>

                            <div class="member-contact">
                                <a href="mailto:@member.Email" class="contact-link">
                                    <i class="bi bi-envelope"></i>
                                    <span>@member.Email</span>
                                </a>
                            </div>

                            <div class="member-specialties">
                                @foreach (var specialty in GetMemberSpecialties(member))
                                {
                                    <span class="specialty-tag">@specialty</span>
                                }
                            </div>
                        </div>

                        <div class="member-actions">
                            <a href="mailto:@member.Email" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-envelope me-1"></i>
                                Contacter
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- État vide -->
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="bi bi-people"></i>
                </div>
                <h3 class="empty-state-title">En construction</h3>
                <p class="empty-state-text">Aucun membre ne correspond aux critères d'affichage</p>
            </div>
        }
    }
    else
    {
        <!-- État de chargement -->
        <div class="loading-state">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Merci de patienter, nos membres se rassemblent</span>
            </div>
            <p class="mt-3">Chargement</p>
        </div>
    }
</div>
<Footer />

@code {
    private List<ApplicationUser>? teamMembers;
    private List<ApplicationUser> filteredMembers = new();
    private Dictionary<string, string> userRoles = new();
    private string selectedFilter = "All";
    private int adminCount = 0;
    private int formateurCount = 0;
    
    // Nouvelles propriétés pour la notification
    private ApplicationUser? currentUser;
    private bool shouldShowNotification = false;
    private int completedSessionsCount = 0;
    private bool isStudent = false;
    private List<string> currentUserRoles = new();
    
    // Propriétés de débogage
    private bool showDebugInfo = false;
    private int totalUsersCount = 0;
    private int usersWithShowTrombinoscopeCount = 0;
    private int usersWithCompletedSessionsCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadTeamMembers();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            currentUser = await UserManagerService.GetUserAsync(user);
            
            if (currentUser != null)
            {
                Logger.LogInformation($"[TROMBINOSCOPE] Utilisateur connecté: {currentUser.Email}");
                
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                var now = DateTime.UtcNow;
                
                // Vérifier le nombre de sessions complétées ou actives
                completedSessionsCount = await dbContext.Sessions
                    .Where(s => s.EnrolledUsers.Any(u => u.Id == currentUser.Id) 
                             && (s.EndDate < now || s.IsActive))
                    .CountAsync();
                
                Logger.LogInformation($"[TROMBINOSCOPE] Sessions actives ou complétées: {completedSessionsCount}");
                
                // Vérifier les rôles de l'utilisateur
                currentUserRoles = (await UserManagerService.GetRolesAsync(currentUser)).ToList();
                isStudent = currentUserRoles.Count == 0; // Utilisateur sans rôle
                
                Logger.LogInformation($"[TROMBINOSCOPE] Rôles: {string.Join(", ", currentUserRoles)} | Sans rôle: {isStudent}");
                
                // Déterminer si la notification doit être affichée
                // La notification s'affiche si l'utilisateur n'apparaît pas encore sur le trombinoscope
                shouldShowNotification = !currentUser.ShowInTrombinoscope || completedSessionsCount == 0;
                
                Logger.LogInformation($"[TROMBINOSCOPE] ShowInTrombinoscope: {currentUser.ShowInTrombinoscope} | Afficher notification: {shouldShowNotification}");
            }
        }
    }

    private async Task LoadTeamMembers()
    {       
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        totalUsersCount = await dbContext.Users.CountAsync();
        Logger.LogInformation($"[TROMBINOSCOPE] === TOTAL USERS: {totalUsersCount} ===");
        
        usersWithShowTrombinoscopeCount = await dbContext.Users
            .Where(u => u.ShowInTrombinoscope)
            .CountAsync();
        Logger.LogInformation($"[TROMBINOSCOPE] Utilisateurs avec ShowInTrombinoscope=true: {usersWithShowTrombinoscopeCount}");
        
        var now = DateTime.UtcNow;
        Logger.LogInformation($"[TROMBINOSCOPE] === Current DateTime (UTC): {now:yyyy-MM-dd HH:mm:ss} ===");
        
        // Compter les utilisateurs avec au moins une session (terminée OU active)
        usersWithCompletedSessionsCount = await dbContext.Users
            .Where(u => u.ShowInTrombinoscope)
            .Where(u => dbContext.Sessions
                .Any(s => s.EnrolledUsers.Any(eu => eu.Id == u.Id) 
                       && (s.EndDate < now || s.IsActive))) // Sessions terminées OU actives
            .CountAsync();
        Logger.LogInformation($"[TROMBINOSCOPE] Utilisateurs avec sessions actives ou terminées: {usersWithCompletedSessionsCount}");
        
        // Récupérer les utilisateurs avec leurs rôles ET qui ont au moins une session terminée ou active
        // MODIFICATION: Ajouter "Utilisateur" aux rôles acceptés
        var usersWithRoles = await (from user in dbContext.Users
                                    where user.ShowInTrombinoscope == true
                                    join userRole in dbContext.UserRoles on user.Id equals userRole.UserId
                                    join role in dbContext.Roles on userRole.RoleId equals role.Id
                                    where role.Name == "Admin" || role.Name == "Formateur" || role.Name == "Utilisateur"
                                    // Sessions terminées OU actives
                                    where dbContext.Sessions    
                                        .Any(s => s.EnrolledUsers.Any(eu => eu.Id == user.Id) 
                                               && (s.EndDate < now || s.IsActive))
                                    select new { User = user, RoleName = role.Name })
                               .ToListAsync();

        Logger.LogInformation($"[TROMBINOSCOPE] === FILTERED USERS WITH ROLES AND SESSIONS: {usersWithRoles.Count} ===");
        
        // Debug: Afficher les sessions de chaque utilisateur
        foreach (var item in usersWithRoles)
        {
            var userSessions = await dbContext.Sessions
                .Where(s => s.EnrolledUsers.Any(u => u.Id == item.User.Id))
                .Select(s => new { s.Title, s.StartDate, s.EndDate, IsCompleted = s.EndDate < now, IsActive = s.IsActive })
                .ToListAsync();
            
            Logger.LogInformation($"[TROMBINOSCOPE] User: {item.User.Email} | Role: {item.RoleName} | Sessions: {userSessions.Count}");
            foreach (var session in userSessions)
            {
                Logger.LogInformation($"[TROMBINOSCOPE]   - Session: {session.Title} | StartDate: {session.StartDate:yyyy-MM-dd HH:mm:ss} | EndDate: {session.EndDate:yyyy-MM-dd HH:mm:ss} | Completed: {session.IsCompleted} | Active: {session.IsActive}");
            }
        }

        teamMembers = new List<ApplicationUser>();
        userRoles.Clear();
        adminCount = 0;
        formateurCount = 0;
        int utilisateurCount = 0; // Nouveau compteur

        var userGroups = usersWithRoles.GroupBy(x => x.User.Id);

        foreach (var userGroup in userGroups)
        {
            var user = userGroup.First().User;
            var roles = userGroup.Select(x => x.RoleName).ToList();

            teamMembers.Add(user);
            Logger.LogInformation($"[TROMBINOSCOPE] Adding to trombinoscope: {user.Email} | Roles: {string.Join(", ", roles)}");

            // Prioriser Admin > Formateur > Utilisateur
            if (roles.Contains("Admin"))
            {
                userRoles[user.Id] = "Admin";
                adminCount++;
            }
            else if (roles.Contains("Formateur"))
            {
                userRoles[user.Id] = "Formateur";
                formateurCount++;
            }
            else if (roles.Contains("Utilisateur"))
            {
                userRoles[user.Id] = "Utilisateur";
                utilisateurCount++;
            }
        }

        filteredMembers = teamMembers.ToList();
        Logger.LogInformation($"[TROMBINOSCOPE] === FINAL COUNT: {filteredMembers.Count} (Admin: {adminCount}, Formateur: {formateurCount}, Utilisateur: {utilisateurCount}) ===");
    }

    private string GetUserRole(ApplicationUser user)
    {
        if (user?.Id == null) return "Membre";

        if (userRoles.TryGetValue(user.Id, out string? role))
            return role;
        return "Membre";
    }

    private string GetRoleBadgeClass(ApplicationUser user)
    {
        var role = GetUserRole(user);
        return role switch
        {
            "Admin" => "bg-danger text-white",
            "Formateur" => "bg-success text-white",
            "Utilisateur" => "bg-primary text-white", // Nouveau badge pour utilisateur
            _ => "bg-secondary text-white"
        };
    }

    private string GetRoleIcon(ApplicationUser user)
    {
        var role = GetUserRole(user);
        return role switch
        {
            "Admin" => "bi-shield-fill",
            "Formateur" => "bi-mortarboard",
            "Utilisateur" => "bi-person-badge", // Nouvelle icône pour utilisateur
            _ => "bi-person"
        };
    }

    private string GetMemberTitle(ApplicationUser user)
    {
        var role = GetUserRole(user);
        return role switch
        {
            "Admin" => "Administrateur de la plateforme",
            "Formateur" => "Formateur expert",
            "Utilisateur" => "Apprenant actif", // Nouveau titre pour utilisateur
            _ => "Membre de l'équipe"
        };
    }

    private List<string> GetMemberSpecialties(ApplicationUser user)
    {
        var role = GetUserRole(user);
        return role switch
        {
            "Admin" => new List<string> { "Gestion", "Administration", "Support" },
            "Formateur" => new List<string> { "Formation", "Pédagogie", "Accompagnement" },
            "Utilisateur" => new List<string> { "Apprentissage", "Formation continue" }, // Nouvelles spécialités
            _ => new List<string> { "Équipe" }
        };
    }
}