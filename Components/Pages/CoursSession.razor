@page "/session/{SessionId:int}"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Mooc.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "VoirCours")]
@attribute [StreamRendering]

<PageTitle>@(session?.Title ?? "Cours")</PageTitle>

@if (isLoading)
{
    <div class="container mt-4">
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="container mt-4">
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @errorMessage
        </div>
        <button class="btn btn-primary" @onclick="ReloadData">
            <i class="bi bi-arrow-clockwise me-1"></i>
            Réessayer
        </button>
    </div>
}
else if (session == null)
{
    <div class="container mt-4">
        <div class="alert alert-warning">
            <i class="bi bi-info-circle me-2"></i>
            Session introuvable.
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>@session.Title</h2>
            <div class="text-muted">
                <small>@coursList.Count cours disponible@(coursList.Count > 1 ? "s" : "")</small>
            </div>
        </div>

        <div class="card">
            <div class="card-header bg-light">
                <h3 class="mb-0">Cours disponible</h3>
                @if (session.StartDate > DateTime.Now)
                {
                    <small class="text-muted">Commence le @session.StartDate.ToString("dd/MM/yyyy")</small>
                }
                else if (session.EndDate < DateTime.Now)
                {
                    <small class="text-warning">Session terminée le @session.EndDate.ToString("dd/MM/yyyy")</small>
                }
            </div>
            <div class="card-body">
                @if (coursList.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Titre</th>
                                    <th>Description</th>
                                    <th>Durée</th>
                                    <th>Statut</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cours in orderedCoursList)
                                {
                                    <tr class="@(cours.IsRequired ? "table-warning" : "")">
                                        <td>
                                            <strong>@cours.Title</strong>
                                            @if (cours.IsRequired)
                                            {
                                                <i class="bi bi-star-fill text-warning ms-1" title="Cours obligatoire"></i>
                                            }
                                        </td>
                                        <td>
                                            <span title="@cours.Description">
                                                @GetTruncatedDescription(cours.Description)
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@cours.Duration min</span>
                                        </td>
                                        <td>
                                            <span class="badge @(cours.IsPublished ? "bg-success" : "bg-secondary")">
                                                @(cours.IsPublished ? "Disponible" : "À venir")
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-primary btn-sm" 
                                                        @onclick="() => VoirCours(cours.Id)"
                                                        disabled="@(!cours.IsPublished)">
                                                    <i class="bi bi-play-circle-fill me-1"></i>
                                                    @(cours.IsPublished ? "Démarrer" : "Bientôt")
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="mt-3">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Progression</h6>
                                        <div class="progress mb-2">
                                            <div class="progress-bar" role="progressbar" 
                                                 style="width: @(progressPercentage)%" 
                                                 aria-valuenow="@progressPercentage" 
                                                 aria-valuemin="0" 
                                                 aria-valuemax="100">
                                                @progressPercentage%
                                            </div>
                                        </div>
                                        <small class="text-muted">
                                            @publishedCoursCount sur @coursList.Count cours disponibles
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Durée totale</h6>
                                        <span class="h5">@totalDuration minutes</span>
                                        <br>
                                        <small class="text-muted">≈ @(totalDuration / 60)h @(totalDuration % 60)min</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Aucun cours n'est disponible pour cette session.
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int SessionId { get; set; }

    private Session? session;
    private List<Cours> coursList = new();
    private bool isLoading = true;
    private string? errorMessage;

    // Propriétés calculées pour améliorer les performances
    private IEnumerable<Cours> orderedCoursList => coursList.OrderBy(c => c.Order);
    private int publishedCoursCount => coursList.Count(c => c.IsPublished);
    private int totalDuration => coursList.Sum(c => c.Duration);
    private int progressPercentage => coursList.Any() ? (publishedCoursCount * 100) / coursList.Count : 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSessionData();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Recharger les données si SessionId change
        await LoadSessionData();
    }

    private async Task LoadSessionData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            using var context = await DbContextFactory.CreateDbContextAsync();
            session = await context.Sessions
                .Include(s => s.Courses)
                .FirstOrDefaultAsync(s => s.Id == SessionId);

            if (session?.Courses != null)
            {
                coursList = session.Courses.ToList();
            }
            else
            {
                coursList = new List<Cours>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erreur lors du chargement de la session. Veuillez réessayer.";
            // Log l'erreur si vous avez un système de logging
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ReloadData()
    {
        await LoadSessionData();
    }

    private void VoirCours(int coursId)
    {
        if (session != null)
        {
            NavigationManager.NavigateTo($"/Cours/View/{coursId}");
        }
    }

    private string GetTruncatedDescription(string? description)
    {
        if (string.IsNullOrEmpty(description))
            return "Pas de description";
        
        return description.Length > 50 ? 
            description.Substring(0, 50) + "..." : 
            description;
    }
}