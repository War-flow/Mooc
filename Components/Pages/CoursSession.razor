@page "/session/{SessionId:int}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Mooc.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "VoirCours")]
@attribute [StreamRendering]

<PageTitle>@(session?.Title ?? "Cours")</PageTitle>

@if (isLoading)
{
    <div class="container mt-4">
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="container mt-4">
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @errorMessage
        </div>
        <button class="btn btn-primary" @onclick="ReloadData">
            <i class="bi bi-arrow-clockwise me-1"></i>
            Réessayer
        </button>
    </div>
}
else if (session == null)
{
    <div class="container mt-4">
        <div class="alert alert-warning">
            <i class="bi bi-info-circle me-2"></i>
            Session introuvable.
        </div>
    </div>
}
else
{
    @* Ajout d'un header moderne *@
    <div class="page-header header-waves ocean header-animated">
        <div class="container">
            <h1 class="page-title typewriter">@session?.Title</h1>
            <p class="page-subtitle">
                @session?.Description
            </p>
            <div>
                <span class="badge @(IsSessionEnded() ? "bg-secondary" : IsSessionActive() ? "bg-success" : "bg-warning") me-1 mb-1">
                    @(IsSessionEnded() ? "Session terminée" : IsSessionActive() ? "Session en cours" : "À venir")
                </span>
                <span class="badge bg-info me-1 ">@coursList.Count cours</span>
                @* **AMÉLIORÉ**: Affichage du score total de la session avec détails *@
                @if (sessionTotalScore > 0 || sessionMaxScore > 0)
                {
                        <span class="badge bg-warning me-1">
                            <i class="bi bi-trophy me-1"></i>
                            @sessionTotalScore/@sessionMaxScore pts
                        </span>
                }
            </div>
        </div>
    </div>

    <div class="container mt-4">
        @if (IsSessionEnded())
        {
            <div class="alert alert-warning mb-4">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Session terminée</strong> - Cette session s'est terminée le @session.EndDate.ToString("dd/MM/yyyy").
            </div>
        }

        @* **NOUVEAU: Affichage du message d'erreur temporaire** *@
        @if (!string.IsNullOrEmpty(tempErrorMessage))
        {
            <div class="alert alert-info mb-4" role="alert">
                <i class="bi bi-info-circle me-2"></i>
                @((MarkupString)tempErrorMessage)
            </div>
        }

        <div class="courses-grid">
            @foreach (var cours in orderedCoursList)
            {
                <div class="course-card">
                    <div class="course-header">
                        <div class="course-status">
                            <span class="badge @GetCourseStatusBadgeClass(cours.Id)">
                                @GetCourseCompletionStatus(cours.Id)
                            </span>
                        </div>
                        @* **AMÉLIORÉ**: Affichage complet du score du cours *@
                        @if (courseScores.ContainsKey(cours.Id))
                        {
                            var courseScore = courseScores[cours.Id];
                            <div class="course-score">
                                @if (courseScore.TotalPossiblePoints > 0)
                                {
                                    <div class="d-flex align-items-center gap-2 mb-2">
                                        <span class="badge @GetScoreBadgeClass(courseScore.ScorePercentage)">
                                            <i class="bi bi-star-fill me-1"></i>
                                            @courseScore.TotalEarnedPoints/@courseScore.TotalPossiblePoints pts
                                        </span>
                                        <span class="badge bg-light text-dark">
                                            @courseScore.ScorePercentage.ToString("F1")%
                                        </span>
                                    </div>
                                    
                                    @* Barre de progression du score *@
                                    <div class="score-progress mb-2">
                                        <div class="progress" style="height: 4px;">
                                            <div class="progress-bar @GetProgressBarClass(courseScore.ScorePercentage)"
                                                 role="progressbar"
                                                 style="width: @courseScore.ScorePercentage%"
                                                 aria-valuenow="@courseScore.ScorePercentage"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100">
                                            </div>
                                        </div>
                                        <small class="text-muted">
                                            @courseScore.CorrectAnswers/@courseScore.QuizCount quiz (@courseScore.CorrectAnswers réussis)
                                        </small>
                                    </div>
                                }
                                else if (courseScore.QuizCount > 0)
                                {
                                    <div class="course-score-pending">
                                        <span class="badge bg-secondary">
                                            <i class="bi bi-hourglass-split me-1"></i>
                                            @courseScore.QuizCount quiz disponible@(courseScore.QuizCount > 1 ? "s" : "")
                                        </span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            @* Indicateur qu'aucun quiz n'est disponible *@
                            <div class="course-score-empty">
                                <small class="text-muted">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Aucun quiz disponible
                                </small>
                            </div>
                        }
                    </div>
                    <div class="course-content">
                        <div class="course-title">@cours.Title</div>
                        <div class="course-description">@GetTruncatedDescription(cours.Description)</div>
                        <div class="course-meta">
                            <div class="course-updated">
                                <i class="bi bi-calendar me-1"></i> Mise à jour : @cours.UpdatedAt.ToString("dd/MM/yyyy")
                            </div>
                        </div>
                    </div>
                    <div class="course-actions">
                        <div class="btn-group w-100">
                            <button class="btn btn-outline-primary"
                                 @onclick="() => VoirCours(cours.Id)"
                                 disabled="@(!cours.IsPublished || IsSessionEnded() || GetCourseCompletionStatus(cours.Id) == "Terminé")">
                                 <i class="bi bi-play-circle-fill me-1"></i>
                                 @(GetCourseCompletionStatus(cours.Id) == "Terminé" ? "Terminé" :
                                 cours.IsPublished ? "Démarrer" : "Bientôt")
                            </button>
                        </div>
                    </div>
                </div>
            }

            @if (!coursList.Any())
            {
                <div class="empty-state mt-4">
                    <div class="empty-state-icon"><i class="bi bi-emoji-frown"></i></div>
                    <div class="empty-state-title">Aucun cours disponible</div>
                    <div class="empty-state-text">
                        Cette session ne contient pas encore de cours publiés.
                    </div>
                </div>
            }
        </div>

        <div class="row mt-4">
            <div class="col-md-8 mx-auto">
                <div class="card bg-light">
                    <div class="card-body">
                        <h6 class="card-title">Progression des cours</h6>
                        <div class="progress mb-1" style="height: 8px;">
                            <div class="progress-bar bg-success" role="progressbar"
                                 style="width: @(progressPercentage)%"
                                 aria-valuenow="@progressPercentage"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                            </div>
                        </div>
                        <small class="text-muted">
                            @completedCoursCount sur @coursList.Count cours terminés
                        </small>
                        
                        @* **NOUVEAU**: Affichage du score global de la session *@
                        @if (sessionTotalScore > 0 || sessionMaxScore > 0)
                        {
                            <div class="mt-3">
                                <h6 class="card-title d-flex align-items-center">
                                    <i class="bi bi-trophy me-2"></i>
                                    Score global de la session
                                </h6>
                                
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <div class="score-stat text-center">
                                            <div class="score-value text-primary">
                                                @sessionTotalScore
                                            </div>
                                            <small class="text-muted">Points gagnés</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="score-stat text-center">
                                            <div class="score-value text-info">
                                                @sessionMaxScore
                                            </div>
                                            <small class="text-muted">Points possibles</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="score-stat text-center">
                                            <div class="score-value @GetPerformanceTextClass(sessionScorePercentage)">
                                                @sessionScorePercentage.ToString("F1")%
                                            </div>
                                            <small class="text-muted">Réussite</small>
                                        </div>
                                    </div>
                                </div>
                                
                                @* Barre de progression globale *@
                                <div class="mt-3">
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar @GetProgressBarClass(sessionScorePercentage)"
                                             role="progressbar"
                                             style="width: @sessionScorePercentage%"
                                             aria-valuenow="@sessionScorePercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mt-1">
                                        <small class="text-muted">0 pts</small>
                                        <small class="text-muted">@sessionMaxScore pts</small>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="mt-3">
                                <h6 class="card-title text-muted">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Aucun quiz disponible dans cette session
                                </h6>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int SessionId { get; set; }

    private Session? session;
    private List<Cours> coursList = new();
    private bool isLoading = true;
    private string? errorMessage;
    private string? tempErrorMessage; // Nouveau: pour les erreurs temporaires
    private Timer? refreshTimer;
    private Timer? courseProgressTimer;
    private Timer? errorMessageTimer; // Nouveau: pour effacer les erreurs temporaires

    // Nouveau dictionnaire pour tracker les progrès des cours
    private Dictionary<int, Services.CourseProgress> courseProgresses = new();
    
    // **CORRECTION**: Initialisation explicite des dictionnaires pour les scores
    private Dictionary<int, CourseScoreResult> courseScores = new Dictionary<int, CourseScoreResult>();
    private int sessionTotalScore = 0;
    private int sessionMaxScore = 0;
    private double sessionScorePercentage = 0;

    // Injection du service
    @inject CourseStateService CourseStateService

    // Propriétés calculées pour améliorer les performances
    private IEnumerable<Cours> orderedCoursList => coursList.OrderBy(c => c.Order);
    private int publishedCoursCount => coursList.Count(c => c.IsPublished);
    private int completedCoursCount => courseProgresses.Count(kvp => kvp.Value.IsCompleted);
    private int progressPercentage => coursList.Any() ? (completedCoursCount * 100) / coursList.Count : 0;

    protected override async Task OnInitializedAsync()
    {
        // **AJOUT**: Initialisation explicite des dictionnaires au cas où
        courseProgresses ??= new Dictionary<int, Services.CourseProgress>();
        courseScores ??= new Dictionary<int, CourseScoreResult>();
        
        await LoadSessionData();
        await LoadCourseProgresses(); // Charger les progrès des cours
        await LoadCourseScores(); // **NOUVEAU**: Charger les scores des cours
        
        // Démarrer un timer pour vérifier les changements de statut de session toutes les minutes
        refreshTimer = new Timer(async _ => await CheckSessionStatus(), null, TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1));
        
        // Nouveau timer pour vérifier les progrès des cours toutes les 30 secondes
        courseProgressTimer = new Timer(async _ => await RefreshCourseProgresses(), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    protected override async Task OnParametersSetAsync()
    {
        // Recharger les données si SessionId change
        await LoadSessionData();
        await LoadCourseProgresses();
        await LoadCourseScores(); // **NOUVEAU**
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        courseProgressTimer?.Dispose();
        errorMessageTimer?.Dispose(); // Nouveau
    }

    // **MÉTHODE CORRIGÉE**: Charger les scores des cours avec le nouveau système de questionnaire
    private async Task LoadCourseScores()
    {
        try
        {
            courseScores ??= new Dictionary<int, CourseScoreResult>();  
            courseScores.Clear();
            
            sessionTotalScore = 0;
            sessionMaxScore = 0;
            
            Console.WriteLine($"🔄 Chargement des scores pour {coursList.Count} cours de la session {SessionId}");
            
            foreach (var cours in coursList)
            {
                try
                {
                    // Utiliser la nouvelle méthode pour le questionnaire unique
                    var scoreResultWithTotal = await CourseStateService.CalculateCourseScoreWithTotalAsync(cours.Id);
                    
                    var scoreResult = new CourseScoreResult
                    {
                        TotalEarnedPoints = scoreResultWithTotal.TotalEarnedPoints,
                        TotalPossiblePoints = scoreResultWithTotal.TotalPossiblePoints,
                        ScorePercentage = scoreResultWithTotal.ScorePercentage,
                        QuizCount = scoreResultWithTotal.TotalQuizCount,
                        CorrectAnswers = scoreResultWithTotal.CorrectAnswers,
                        QuizResults = scoreResultWithTotal.QuizResults
                    };
                    
                    courseScores[cours.Id] = scoreResult;
                    
                    sessionTotalScore += scoreResult.TotalEarnedPoints;
                    sessionMaxScore += scoreResult.TotalPossiblePoints;
                    
                    Console.WriteLine($"✅ Cours '{cours.Title}': {scoreResult.TotalEarnedPoints}/{scoreResult.TotalPossiblePoints} pts ({scoreResult.ScorePercentage:F1}%) - {scoreResult.QuizCount} questions");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"❌ Erreur score cours '{cours.Title}': {ex.Message}");
                    
                    // Fallback : récupérer le nombre de questions
                    try
                    {
                        var (totalQuestions, totalPossiblePoints) = await CourseStateService.GetQuestionnaireInfoAsync(cours.Id);
                        courseScores[cours.Id] = new CourseScoreResult
                        {
                            TotalEarnedPoints = 0,
                            TotalPossiblePoints = totalPossiblePoints,
                            ScorePercentage = 0,
                            QuizCount = totalQuestions,
                            CorrectAnswers = 0,
                        };
                        sessionMaxScore += totalPossiblePoints;
                        Console.WriteLine($"🔧 Fallback cours '{cours.Title}': 0/{totalPossiblePoints} pts ({totalQuestions} questions)");
                    }
                    catch
                    {
                        courseScores[cours.Id] = new CourseScoreResult
                        {
                            TotalEarnedPoints = 0,
                            TotalPossiblePoints = 0,
                            ScorePercentage = 0,
                            QuizCount = 0,
                            CorrectAnswers = 0,
                        };
                    }
                }
            }
            
            // Calculer le pourcentage global
            sessionScorePercentage = sessionMaxScore > 0 ? (double)sessionTotalScore / sessionMaxScore * 100 : 0;
            
            Console.WriteLine($"🏆 Score session: {sessionTotalScore}/{sessionMaxScore} pts ({sessionScorePercentage:F1}%) - Système questionnaire unique");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erreur critique lors du chargement des scores: {ex.Message}");
            courseScores ??= new Dictionary<int, CourseScoreResult>();
            sessionTotalScore = 0;
            sessionMaxScore = 0;
            sessionScorePercentage = 0;
        }
    }

    // Nouvelle méthode pour charger les progrès des cours
    private async Task LoadCourseProgresses()
    {
        try
        {
            // **AJOUT**: Vérification et initialisation si nécessaire
            courseProgresses ??= new Dictionary<int, Services.CourseProgress>();
            courseProgresses.Clear();
            
            foreach (var cours in coursList)
            {
                var progress = await CourseStateService.GetOrCreateProgressAsync(cours.Id);
                courseProgresses[cours.Id] = progress;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des progrès: {ex.Message}");
            // **AJOUT**: Réinitialiser les progrès en cas d'erreur
            courseProgresses ??= new Dictionary<int, Services.CourseProgress>();
        }
    }

    // Nouvelle méthode pour rafraîchir les progrès des cours
    private async Task RefreshCourseProgresses()
    {
        if (coursList.Any())
        {
            var previousCompletedCount = completedCoursCount;
            await LoadCourseProgresses();
            await LoadCourseScores(); // **NOUVEAU**: Rafraîchir les scores aussi
            
            // Si le nombre de cours complétés a changé, rafraîchir l'interface
            if (completedCoursCount != previousCompletedCount)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    // **NOUVELLES MÉTHODES**: Helper pour l'affichage des scores

    /// <summary>
    /// Obtient la classe CSS pour le badge de score selon le pourcentage
    /// </summary>
    private string GetScoreBadgeClass(double scorePercentage)
    {
        return scorePercentage switch
        {
            >= 90 => "bg-success",
            >= 75 => "bg-info", 
            >= 50 => "bg-warning",
            > 0 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    /// <summary>
    /// Obtient la classe CSS pour la barre de progression selon le pourcentage
    /// </summary>
    private string GetProgressBarClass(double percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-success",
            >= 75 => "bg-info",
            >= 50 => "bg-warning", 
            > 0 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    /// <summary>
    /// Obtient la classe CSS pour le texte de performance
    /// </summary>
    private string GetPerformanceTextClass(double percentage)
    {
        return percentage switch
        {
            >= 90 => "text-success",
            >= 75 => "text-info",
            >= 50 => "text-warning",
            > 0 => "text-danger",
            _ => "text-secondary"
        };
    }

    /// <summary>
    /// Obtient la classe CSS pour le badge de performance de session
    /// </summary>
    private string GetSessionPerformanceBadgeClass(double percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-success",
            >= 75 => "bg-primary",
            >= 50 => "bg-warning",
            > 0 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    /// <summary>
    /// Vérifie si un cours a des quiz disponibles
    /// </summary>
    private bool HasAvailableQuizzes(int coursId)
    {
        return courseScores.ContainsKey(coursId) && 
               (courseScores[coursId].QuizCount > 0 || courseScores[coursId].TotalPossiblePoints > 0);
    }

    /// <summary>
    /// Obtient un résumé textuel du score d'un cours
    /// </summary>
    private string GetCourseScoreSummary(int coursId)
    {
        if (!courseScores.ContainsKey(coursId))
            return "Aucune donnée";

        var score = courseScores[coursId];
        
        if (score.TotalPossiblePoints == 0)
            return "Aucun quiz";

        if (score.TotalEarnedPoints == 0)
            return "Non commencé";

        return $"{score.TotalEarnedPoints}/{score.TotalPossiblePoints} pts ({score.ScorePercentage:F1}%)";
    }

    // Méthode pour obtenir le statut d'un cours spécifique
    private string GetCourseCompletionStatus(int coursId)
    {
        if (courseProgresses.TryGetValue(coursId, out var progress))
        {
            if (progress.IsCompleted)
            {
                return "Terminé";
            }
            else if (progress.CompletedBlocks.Any())
            {
                return "En cours";
            }
        }
        return "Non commencé";
    }
    
    // Méthode pour obtenir la classe CSS du badge de statut
    private string GetCourseStatusBadgeClass(int coursId)
    {
        return GetCourseCompletionStatus(coursId) switch
        {
            "Terminé" => "bg-success",
            "En cours" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private async Task CheckSessionStatus()
    {
        // Vérifier si le statut de la session a changé
        if (session != null)
        {
            var currentTime = DateTime.Now;
            var wasActive = IsSessionActive();
            var wasEnded = IsSessionEnded();

            // Recharger les données de session pour détecter les changements
            using var context = await DbContextFactory.CreateDbContextAsync();
            var updatedSession = await context.Sessions
                .Include(s => s.Courses)
                .FirstOrDefaultAsync(s => s.Id == SessionId);

            if (updatedSession != null)
            {
                var sessionChanged = session.EndDate != updatedSession.EndDate || 
                                   session.StartDate != updatedSession.StartDate ||
                                   session.IsActive != updatedSession.IsActive;

                if (sessionChanged)
                {
                    session = updatedSession;
                    coursList = session.Courses?.ToList() ?? new List<Cours>();
                    await LoadCourseProgresses(); // Recharger les progrès aussi
                    await LoadCourseScores(); // **NOUVEAU**: Recharger les scores aussi
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

// Ajout de la méthode manquante pour tronquer la description
 private string GetTruncatedDescription(string? description, int maxLength = 256)
  {
   if (string.IsNullOrWhiteSpace(description))
   return string.Empty;
   if (description.Length <= maxLength)
   return description;
   return description.Substring(0, maxLength) + "...";
  }

    private async Task LoadSessionData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            using var context = await DbContextFactory.CreateDbContextAsync();
            session = await context.Sessions
                .Include(s => s.Courses)
                .FirstOrDefaultAsync(s => s.Id == SessionId);

            if (session?.Courses != null)
            {
                coursList = session.Courses.ToList();
            }
            else
            {
                coursList = new List<Cours>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erreur lors du chargement de la session. Veuillez réessayer.";
            // Log l'erreur si vous avez un système de logging
        }
        finally
        {
            isLoading = false;
        }
    }

    // Ajout de la méthode manquante pour vérifier si la session est terminée
    private bool IsSessionEnded()
    {
        return session != null && DateTime.Now > session.EndDate;
    }

    // Ajout de la méthode pour vérifier si la session est active
    private bool IsSessionActive()
    {
        return session != null && DateTime.Now >= session.StartDate && DateTime.Now <= session.EndDate && session.IsActive;
    }

    private async Task ReloadData()
    {

        await LoadSessionData();
        await LoadCourseProgresses();
    }

    // Ajout de la méthode manquante pour corriger CS0103
    private void VoirCours(int coursId)
    {
        // Vérifier si la session est terminée
        if (IsSessionEnded())
        {
            tempErrorMessage = $"Impossible de démarrer le cours. Cette session s'est terminée le {session?.EndDate.ToString("dd/MM/yyyy")}.<br>Vous serez redirigé vers la page d'accueil dans quelques secondes.";
            
            // Programmer l'effacement du message après 5 secondes
            errorMessageTimer?.Dispose();
            errorMessageTimer = new Timer(_ => {
                tempErrorMessage = null;
                NavigationManager.NavigateTo("/"); // Rediriger vers la page d'accueil
            }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
            
            StateHasChanged();
            return;
        }

        // **NOUVEAU: Vérifier si le cours est déjà terminé**
        if (GetCourseCompletionStatus(coursId) == "Terminé")
        {
            tempErrorMessage = "Ce cours est déjà terminé. Vous ne pouvez pas le redémarrer.";
            
            // Programmer l'effacement du message après 3 secondes
            errorMessageTimer?.Dispose();
            errorMessageTimer = new Timer(_ => {
                tempErrorMessage = null;
                InvokeAsync(StateHasChanged);
            }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
            
            StateHasChanged();
            return;
        }

        // Vérifier si le cours est publié
        var cours = coursList.FirstOrDefault(c => c.Id == coursId);
        if (cours == null || !cours.IsPublished)
        {
            tempErrorMessage = "Ce cours n'est pas encore disponible.";
            
            // Programmer l'effacement du message après 5 secondes
            errorMessageTimer?.Dispose();
            errorMessageTimer = new Timer(_ => {
                tempErrorMessage = null;
                InvokeAsync(StateHasChanged);
            }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
            
            StateHasChanged();
            return;
        }

        // Si tout est OK, naviguer vers le cours
        NavigationManager.NavigateTo($"/Cours/View/{coursId}");
    }
}