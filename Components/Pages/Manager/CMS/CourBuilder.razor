@using Mooc.Components.Pages.Manager.CMS.Block

<h3>Créateur de cours</h3>

<div class="d-flex flex-wrap gap-2 mb-4">
    <button type="button" 
            class="btn btn-primary" 
            @onclick='() => AddBlock("texte")'
            disabled="@HasCoursBlock()">
        Ajouter un cours
    </button>
    @if (HasCoursBlock())
    {
        <small class="text-muted align-self-center ms-2">
            <i class="bi bi-info-circle me-1"></i>
            Un bloc cours est déjà présent
        </small>
    }
    
    <button type="button" 
            class="btn btn-secondary" 
            @onclick='() => AddBlock("questionnaire")'
            disabled="@(!HasCoursBlock() || HasQuestionnaire())">
        Ajouter un questionnaire
    </button>
    @if (!HasCoursBlock())
    {
        <small class="text-muted align-self-center ms-2">
            <i class="bi bi-exclamation-triangle me-1"></i>
            Ajoutez d'abord un bloc cours
        </small>
    }
    else if (HasQuestionnaire())
    {
        <small class="text-muted align-self-center ms-2">
            <i class="bi bi-info-circle me-1"></i>
            Un questionnaire est déjà présent dans ce cours
        </small>
    }
</div>

@if (!HasCoursBlock())
{
    <div class="alert alert-warning">
        <i class="bi bi-exclamation-triangle me-2"></i>
        <strong>Attention :</strong> Chaque cours doit contenir au moins un bloc de contenu (cours).
    </div>
}

<div class="cours-container">
    @if (!Blocks.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            Ajoutez un bloc de cours pour commencer
        </div>
    }

    @foreach (var block in Blocks)
    {
        <div class="mb-3 cours-block @(block == SelectedBlock ? "block-selected" : "")" @onclick="() => SelectBlock(block)">
            <DynamicComponent Type="@GetBlockComponent(block.Type)" Parameters="@GetBlockParameters(block)" />
        </div>
    }
</div>

@code {
    [Parameter]
    public int CoursId { get; set; }

    /// <summary>
    /// Représente un bloc de contenu dans le créateur de cours.
    /// </summary>
    public class CoursBlock
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public required string Type { get; set; }
        public object? Content { get; set; }
        public int Order { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string? Message { get; set; }
        [Obsolete("Utilisez Content avec QuestionnaireContentModel pour le nouveau système")]
        public string? QuizId { get; set; }
        public string? FileUrl { get; set; }
        public List<string> FileUrls { get; set; } = new();
        public Guid CoursId { get; set; }

        public CoursBlock()
        {
            Title = Title ?? string.Empty;
            Text = Text ?? string.Empty;
            FileUrls = FileUrls ?? new List<string>();
        }
    }

    private List<CoursBlock> Blocks { get; set; } = new();
    
    [Parameter]
    public CoursBlock? SelectedBlock { get; set; }

    [Parameter]
    public EventCallback<CoursBlock?> SelectedBlockChanged { get; set; }

    [Parameter]
    public EventCallback OnContentChanged { get; set; }

    // ✅ Vérifie si un bloc de cours existe
    private bool HasCoursBlock()
    {
        return Blocks.Any(b => b.Type == "texte");
    }

    // ✅ Vérifie si un questionnaire existe
    private bool HasQuestionnaire()
    {
        return Blocks.Any(b => b.Type == "questionnaire" || b.Type == "quiz");
    }

    private Dictionary<string, object> GetBlockParameters(CoursBlock block)
    {
        var parameters = new Dictionary<string, object>
        {
            ["Block"] = block,
            ["OnBlockChanged"] = EventCallback.Factory.Create<CoursBlock>(this, () => StateHasChanged()),
            ["OnDeleteRequested"] = EventCallback.Factory.Create<CoursBlock>(this, (b) => RemoveBlock(b))
        };

        if (block.Type == "tableau" || block.Type == "texte" || block.Type == "questionnaire")
        {
            parameters["CoursId"] = CoursId;
        }

        return parameters;
    }

    private async Task SelectBlock(CoursBlock block)
    {
        SelectedBlock = block;
        await SelectedBlockChanged.InvokeAsync(block);
    }

    public async Task AddBlock(string type)
    {
        // ✅ Bloquer l'ajout d'un second bloc cours
        if (type == "texte" && HasCoursBlock())
        {
            Console.WriteLine("Impossible d'ajouter un bloc cours : un bloc cours existe déjà");
            return;
        }

        // ✅ Bloquer l'ajout d'un questionnaire sans bloc cours
        if (type == "questionnaire" && !HasCoursBlock())
        {
            Console.WriteLine("Impossible d'ajouter un questionnaire : ajoutez d'abord un bloc cours");
            return;
        }

        // ✅ Bloquer l'ajout d'un second questionnaire
        if (type == "questionnaire" && HasQuestionnaire())
        {
            Console.WriteLine("Impossible d'ajouter un questionnaire : un questionnaire existe déjà dans ce cours");
            return;
        }

        int order = Blocks.Count > 0 ? Blocks.Max(b => b.Order) + 1 : 1;
        var newBlock = new CoursBlock { 
            Type = type, 
            Order = order, 
            Title = string.Empty,
            Text = string.Empty
        };
        
        Blocks.Add(newBlock);
        
        SelectedBlock = newBlock;
        await SelectedBlockChanged.InvokeAsync(newBlock);
        await OnContentChanged.InvokeAsync();
        
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task RemoveBlock(CoursBlock block)
    {
        // ✅ Empêcher la suppression du dernier bloc cours
        if (block.Type == "texte" && Blocks.Count(b => b.Type == "texte") <= 1)
        {
            Console.WriteLine("Impossible de supprimer le dernier bloc cours");
            return;
        }

        if (block == SelectedBlock)
        {
            SelectedBlock = null;
            await SelectedBlockChanged.InvokeAsync(null);
        }
        
        Blocks.Remove(block);
        for (int i = 0; i < Blocks.Count; i++)
        {
            Blocks[i].Order = i + 1;
        }
        
        await OnContentChanged.InvokeAsync();
        StateHasChanged();
    }

    public void MoveBlockUp(CoursBlock block)
    {
        int index = Blocks.IndexOf(block);
        if (index > 0)
        {
            var temp = Blocks[index - 1].Order;
            Blocks[index - 1].Order = Blocks[index].Order;
            Blocks[index].Order = temp;
            Blocks = Blocks.OrderBy(b => b.Order).ToList();
            StateHasChanged();
        }
    }

    public void MoveBlockDown(CoursBlock block)
    {
        int index = Blocks.IndexOf(block);
        if (index < Blocks.Count - 1)
        {
            var temp = Blocks[index + 1].Order;
            Blocks[index + 1].Order = Blocks[index].Order;
            Blocks[index].Order = temp;
            Blocks = Blocks.OrderBy(b => b.Order).ToList();
            StateHasChanged();
        }
    }

    public List<CoursBlock> GetBlocks()
    {
        return Blocks;
    }

    public void SetBlocks(List<CoursBlock> blocks)
    {
        if (blocks == null)
        {
            Console.WriteLine("SetBlocks: blocks est null");
            return;
        }
        
        Console.WriteLine($"SetBlocks: Chargement de {blocks.Count} blocs");
        
        try
        {
            Blocks.Clear();
            
            foreach (var block in blocks.OrderBy(b => b.Order))
            {
                if (block.FileUrls == null)
                {
                    block.FileUrls = new List<string>();
                }
                Blocks.Add(block);
            }
            
            Console.WriteLine($"SetBlocks: {Blocks.Count} blocs chargés");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SetBlocks: Erreur - {ex.Message}");
        }
    }

    Type GetBlockComponent(string type) => type switch
    {
        "texte" => typeof(TextBlock),
        "questionnaire" => typeof(QuestionnaireBlock),
        "quiz" => typeof(QuestionnaireBlock),
        _ => typeof(TextBlock)
    };
}