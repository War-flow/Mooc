@using Mooc.Components.Pages.Manager.CMS.Block

<h3>Créateur de cours</h3>

<div class="d-flex flex-wrap gap-2 mb-4">
    <button type="button" class="btn btn-primary" @onclick='() => AddBlock("texte")'>Ajouter un texte</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("image")'>Ajouter une image</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("video")'>Ajouter une vidéo</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("audio")'>Ajouter un audio</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("quiz")'>Ajouter un quiz</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("lien")'>Ajouter un lien</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("tableau")'>Ajouter un tableau</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("fichier")'>Ajouter un fichier</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("separateur")'>Ajouter un séparateur</button>
    <button type="button" class="btn btn-secondary" @onclick='() => AddBlock("info")'>Ajouter une info</button>
</div>

<div class="cours-container">
    @if (!Blocks.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            Ajoutez des blocs de contenu pour créer votre cours
        </div>
    }

    @foreach (var block in Blocks)
    {
        <div class="mb-3 cours-block @(block == SelectedBlock ? "block-selected" : "")" @onclick="() => SelectBlock(block)">
            <DynamicComponent Type="@GetBlockComponent(block.Type)" Parameters="@GetBlockParameters(block)" />
        </div>
    }
</div>

@code {
    // Ajout du paramètre CoursId
    [Parameter]
    public int CoursId { get; set; }

    // Modifiez la définition de CoursBlock pour garantir que les propriétés sont initialisées
    public class CoursBlock
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Type { get; set; } = string.Empty;
        public object? Content { get; set; }
        public int Order { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string? Message { get; set; }
        public string? ImageUrl { get; set; }
        public string? VideoUrl { get; set; }
        public string? AudioUrl { get; set; }
        public string? QuizId { get; set; }
        public string? Url { get; set; }
        public string? FileUrl { get; set; }
        public List<string> FileUrls { get; set; } = new();
    }

    private List<CoursBlock> Blocks { get; set; } = new();
    
    [Parameter]
    public CoursBlock? SelectedBlock { get; set; }

    [Parameter]
    public EventCallback<CoursBlock?> SelectedBlockChanged { get; set; }

    // Méthode pour créer les paramètres du bloc avec CoursId
    private Dictionary<string, object> GetBlockParameters(CoursBlock block)
    {
        var parameters = new Dictionary<string, object>
        {
            ["Block"] = block,
            ["OnBlockChanged"] = EventCallback.Factory.Create<CoursBlock>(this, () => StateHasChanged()),
            ["OnDeleteRequested"] = EventCallback.Factory.Create<CoursBlock>(this, (b) => RemoveBlock(b))
        };

        // Ajouter CoursId seulement si c'est un bloc qui en a besoin
        if (block.Type == "tableau" || block.Type == "texte" || block.Type == "quiz")
        {
            parameters["CoursId"] = CoursId;
        }

        return parameters;
    }

    // Méthode pour sélectionner un bloc
    private async Task SelectBlock(CoursBlock block)
    {
        SelectedBlock = block;
        await SelectedBlockChanged.InvokeAsync(block);
    }

    // Méthode pour ajouter un bloc
    public void AddBlock(string type)
    {
        int order = Blocks.Count > 0 ? Blocks.Max(b => b.Order) + 1 : 1;
        var newBlock = new CoursBlock { 
            Type = type, 
            Order = order, 
            Title = string.Empty,
            Text = string.Empty
        };
        
        Blocks.Add(newBlock);
        
        // Sélectionner automatiquement le nouveau bloc
        SelectedBlock = newBlock;
        SelectedBlockChanged.InvokeAsync(newBlock);
        
        InvokeAsync(() => StateHasChanged());
    }

    // Méthode pour supprimer un bloc
    public void RemoveBlock(CoursBlock block)
    {
        if (block == SelectedBlock)
        {
            SelectedBlock = null;
            SelectedBlockChanged.InvokeAsync(null);
        }
        
        Blocks.Remove(block);
        for (int i = 0; i < Blocks.Count; i++)
        {
            Blocks[i].Order = i + 1;
        }
        StateHasChanged();
    }

    // Méthode pour déplacer un bloc vers le haut
    public void MoveBlockUp(CoursBlock block)
    {
        int index = Blocks.IndexOf(block);
        if (index > 0)
        {
            var temp = Blocks[index - 1].Order;
            Blocks[index - 1].Order = Blocks[index].Order;
            Blocks[index].Order = temp;
            Blocks = Blocks.OrderBy(b => b.Order).ToList();
            StateHasChanged();
        }
    }

    // Méthode pour déplacer un bloc vers le bas
    public void MoveBlockDown(CoursBlock block)
    {
        int index = Blocks.IndexOf(block);
        if (index < Blocks.Count - 1)
        {
            var temp = Blocks[index + 1].Order;
            Blocks[index + 1].Order = Blocks[index].Order;
            Blocks[index].Order = temp;
            Blocks = Blocks.OrderBy(b => b.Order).ToList();
            StateHasChanged();
        }
    }

    // Méthode pour obtenir la liste des blocs
    public List<CoursBlock> GetBlocks()
    {
        return Blocks;
    }

    // Méthode pour définir les blocs
    public void SetBlocks(List<CoursBlock> blocks)
    {
        if (blocks == null)
        {
            Console.WriteLine("SetBlocks: blocks est null");
            return;
        }
        
        Console.WriteLine($"SetBlocks: Chargement de {blocks.Count} blocs");
        
        try
        {
            Blocks.Clear();
            
            foreach (var block in blocks.OrderBy(b => b.Order))
            {
                if (block.FileUrls == null)
                {
                    block.FileUrls = new List<string>();
                }
                Blocks.Add(block);
            }
            
            Console.WriteLine($"SetBlocks: {Blocks.Count} blocs chargés");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SetBlocks: Erreur - {ex.Message}");
        }
    }

    Type GetBlockComponent(string type) => type switch
    {
        "texte" => typeof(TextBlock),
        "image" => typeof(ImageBlock),
        "quiz" => typeof(QuizBlock),
        "lien" => typeof(LinkBlock),
        "video" => typeof(VideoBlock),
        "audio" => typeof(AudioBlock),
        "tableau" => typeof(TableBlock),
        "fichier" => typeof(FileBlock),
        "separateur" => typeof(SpaceBlock),
        "info" => typeof(InfoBlock),
        _ => typeof(TextBlock)
    };
}