@using Microsoft.AspNetCore.Components.Forms
@implements IDisposable

<div class="info-block @GetTypeClass()" @attributes="AdditionalAttributes">
    <h4 class="info-title @(string.IsNullOrEmpty(TypedContent.Title) ? "text-muted" : "")">
        @if (IsEditing)
        {
            <InputText class="form-control" @bind-Value="TypedContent.Title" placeholder="Titre (optionnel)" />
            <ValidationMessage For="@(() => TypedContent.Title)" />
        }
        else if (!string.IsNullOrEmpty(TypedContent.Title))
        {
            @TypedContent.Title
        }
    </h4>

    <div class="info-content">
        @if (IsEditing)
        {
            <InputSelect class="form-select mb-2" @bind-Value="TypedContent.Type">
                <option value="info">Information</option>
                <option value="warning">Attention</option>
                <option value="success">Succès</option>
                <option value="danger">Important</option>
            </InputSelect>

            <InputTextArea class="form-control" @bind-Value="TypedContent.Message" 
                          rows="3" placeholder="Contenu du message d'information" />
            <ValidationMessage For="@(() => TypedContent.Message)" />
        }
        else
        {
            <div class="info-message">@TypedContent.Message</div>
        }
    </div>

    <div class="block-controls mt-2">
        <button type="button" class="btn-block btn-valid"
                @onclick="ToggleEdit" disabled="@(IsEditing && !IsValid())"
                aria-label="@(IsEditing ? "Enregistrer les modifications" : "Modifier le bloc")">
            <i class="bi bi-@(IsEditing ? "floppy" : "pencil")"></i>
            @(IsEditing ? "Enregistrer" : "Modifier")
        </button>
        
        @if (IsEditing)
        {
            <button type="button" class="btn-block btn-cancel" @onclick="CancelEdit"
                    aria-label="Annuler les modifications">
                <i class="bi bi-x-lg"></i> Annuler
            </button>
        }
        else
        {
            <button type="button" class="btn-block btn-cancel" @onclick="RequestDelete"
                    title="Supprimer ce bloc">
                <i class="bi bi-trash"> Supprimer</i>
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public CourBuilder.CoursBlock Block { get; set; } = default!;

    [Parameter]
    public EventCallback<CourBuilder.CoursBlock> OnBlockChanged { get; set; }
    
    [Parameter]
    public EventCallback<CourBuilder.CoursBlock> OnDeleteRequested { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    private bool IsEditing { get; set; } = false;
    private InfoBlockContent? _originalContent;

    // Propriété de commodité pour accéder au contenu typé
    private InfoBlockContent TypedContent => Block.Content as InfoBlockContent ?? new InfoBlockContent();

    protected override void OnInitialized()
    {
        EnsureContentInitialized();
    }

    protected override void OnParametersSet()
    {
        EnsureContentInitialized();
    }

    private void EnsureContentInitialized()
    {
        if (Block.Content is not InfoBlockContent)
        {
            Block.Content = new InfoBlockContent
            {
                Title = Block.Title ?? string.Empty,
                Message = Block.Message ?? string.Empty,
                Type = "info"
            };
        }
    }

    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(TypedContent.Message) && 
               !string.IsNullOrEmpty(TypedContent.Type);
    }

    private async Task ToggleEdit()
    {
        if (IsEditing)
        {
            if (!IsValid())
                return;

            // Synchroniser vers Block pour compatibilité
            Block.Title = TypedContent.Title;
            Block.Message = TypedContent.Message;
            
            _originalContent = null;
            IsEditing = false;
            
            await OnBlockChanged.InvokeAsync(Block);
        }
        else
        {
            // Créer un backup
            _originalContent = new InfoBlockContent
            {
                Title = TypedContent.Title,
                Message = TypedContent.Message,
                Type = TypedContent.Type
            };
            
            IsEditing = true;
        }
    }

    private void CancelEdit()
    {
        if (_originalContent != null)
        {
            Block.Content = _originalContent;
            Block.Title = _originalContent.Title;
            Block.Message = _originalContent.Message;
        }
        
        IsEditing = false;
    }

    private async Task RequestDelete()
    {
        await OnDeleteRequested.InvokeAsync(Block);
    }

    private string GetTypeClass()
    {
        return TypedContent.Type switch
        {
            "warning" => "alert alert-warning",
            "success" => "alert alert-success", 
            "danger" => "alert alert-danger",
            _ => "alert alert-info"
        };
    }

    public void Dispose()
    {
        _originalContent = null;
    }

    // Classe pour contenu spécifique à InfoBlock
    public class InfoBlockContent
    {
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string Type { get; set; } = "info";
    }
}