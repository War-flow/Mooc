@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Mooc.Services
@using static Mooc.Components.Pages.Manager.CMS.CourBuilder
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="space-block @GetTypeClass()" id="block-@Block.Order">
    <h4 class="space-title @(string.IsNullOrEmpty(Block.Title) ? "text-muted" : "")">
        @if (IsEditing)
        {
            <InputText class="form-control" @bind-Value="Block.Title" placeholder="Titre du séparateur (optionnel)" />
            @if (titleError)
            {
                <small class="text-danger">Le titre ne peut pas dépasser 100 caractères</small>
            }
        }
        else if (!string.IsNullOrEmpty(Block.Title))
        {
            @Block.Title
        }
        else
        {
            <span class="text-muted">Séparateur</span>
        }
    </h4>
    
    @* Section de prévisualisation du séparateur *@
    <div class="separator-preview">
        @if (IsEditing)
        {
            <div class="separator-options">
                <div class="form-group mb-3">
                    <label class="form-label">Style du séparateur :</label>
                    <select class="form-select" value="@separatorStyle" @onchange="OnStyleChanged">
                        <option value="line">Ligne simple</option>
                        <option value="double-line">Ligne double</option>
                        <option value="gradient">Dégradé</option>
                    </select>
                </div>
                
                <div class="form-group mb-3">
                    <label class="form-label">Espacement :</label>
                    <select class="form-select" value="@separatorSpacing" @onchange="OnSpacingChanged">
                        <option value="small">Petit</option>
                        <option value="medium">Moyen</option>
                        <option value="large">Grand</option>
                        <option value="extra-large">Très grand</option>
                    </select>
                </div>
            </div>
        }
        
        @* Affichage du séparateur avec les styles appliqués *@
        <div class="separator-display @GetSeparatorClasses()" @key="separatorKey">
            <div class="separator-line"></div>
        </div>
    </div>
    
    <div class="block-controls mt-3">
        <button type="button" class="btn-block btn-valid" @onclick="ToggleEdit">
            <i class="bi bi-@(IsEditing ? "floppy" : "pencil")"></i> @(IsEditing ? "Enregistrer" : "Modifier")
        </button>
        @if (!IsEditing)
        {
            <button type="button" class="btn-block btn-cancel" @onclick="RequestDelete" title="Supprimer ce bloc">
                <i class="bi bi-trash"></i> Supprimer
            </button>
        }
        else
        {
            <button type="button" class="btn-block btn-cancel" @onclick="CancelEdit" title="Annuler les modifications">
                <i class="bi bi-x-lg"></i> Annuler
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public CourBuilder.CoursBlock Block { get; set; } = default!;
    
    [Parameter]
    public EventCallback<CourBuilder.CoursBlock> OnDeleteRequested { get; set; }
    
    [Parameter]
    public EventCallback<CourBuilder.CoursBlock> OnBlockChanged { get; set; }
    
    [Parameter]
    public bool IsEditing { get; set; } = false;
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    
    private bool titleError = false;
    private string originalTitle = string.Empty;
    private string separatorKey = Guid.NewGuid().ToString();
    
    // Propriétés du séparateur - couleur et épaisseur fixées
    private string separatorStyle = "line";
    private string separatorThickness = "medium"; // Toujours moyenne
    private string separatorColor = "black"; // Toujours noir
    private string separatorSpacing = "medium";
    
    protected override void OnInitialized()
    {
        // Initialiser les propriétés du séparateur depuis Block.Text (utilisé comme stockage JSON)
        LoadSeparatorSettings();
    }
    
    private void LoadSeparatorSettings()
    {
        if (!string.IsNullOrEmpty(Block.Text))
        {
            try
            {
                var settings = System.Text.Json.JsonSerializer.Deserialize<SeparatorSettings>(Block.Text);
                if (settings != null)
                {
                    separatorStyle = settings.Style ?? "line";
                    separatorSpacing = settings.Spacing ?? "medium";
                    // Forcer la couleur noire et l'épaisseur moyenne
                    separatorThickness = "medium";
                    separatorColor = "black";
                }
            }
            catch
            {
                // Si la désérialisation échoue, utiliser les valeurs par défaut
                ResetToDefaults();
            }
        }
        else
        {
            ResetToDefaults();
        }
    }
    
    private void ResetToDefaults()
    {
        separatorStyle = "line";
        separatorThickness = "medium";
        separatorColor = "black";
        separatorSpacing = "medium";
    }
    
    private void SaveSeparatorSettings()
    {
        var settings = new SeparatorSettings
        {
            Style = separatorStyle,
            Thickness = "medium", // Toujours moyenne
            Color = "black", // Toujours noir
            Spacing = separatorSpacing
        };
        
        Block.Text = System.Text.Json.JsonSerializer.Serialize(settings);
    }
    
    private void OnStyleChanged(ChangeEventArgs e)
    {
        separatorStyle = e.Value?.ToString() ?? "line";
        UpdateSeparatorDisplay();
    }
    
    private void OnSpacingChanged(ChangeEventArgs e)
    {
        separatorSpacing = e.Value?.ToString() ?? "medium";
        UpdateSeparatorDisplay();
    }
    
    private void UpdateSeparatorDisplay()
    {
        // Forcer la mise à jour du rendu en générant une nouvelle clé
        separatorKey = Guid.NewGuid().ToString();
        StateHasChanged();
    }
    
    private string GetTypeClass()
    {
        var classList = new List<string>();
        
        classList.Add("separator-block");
        
        if (IsEditing)
        {
            classList.Add("editing");
        }
        
        return string.Join(" ", classList);
    }
    
    private string GetSeparatorClasses()
    {
        var classes = new List<string>
        {
            $"separator-{separatorStyle}",
            $"separator-{separatorThickness}", // Toujours "medium"
            $"separator-{separatorColor}",     // Toujours "black"
            $"separator-spacing-{separatorSpacing}"
        };
        
        return string.Join(" ", classes);
    }
    
    private async Task ToggleEdit()
    {
        if (IsEditing)
        {
            // Validation avant de sauvegarder
            if (Block.Title?.Length > 100)
            {
                titleError = true;
                return;
            }
            
            titleError = false;
            
            // Sauvegarder les paramètres du séparateur
            SaveSeparatorSettings();
            
            // Notifier le parent que le bloc a changé
            await OnBlockChanged.InvokeAsync(Block);
        }
        else
        {
            // Sauvegarder l'état original pour permettre d'annuler
            originalTitle = Block.Title ?? string.Empty;
        }
        
        IsEditing = !IsEditing;
    }
    
    private async Task CancelEdit()
    {
        // Restaurer le titre original
        Block.Title = originalTitle;
        
        // Recharger les paramètres du séparateur
        LoadSeparatorSettings();
        
        // Regénérer la clé pour forcer le rendu
        separatorKey = Guid.NewGuid().ToString();
        
        IsEditing = false;
        StateHasChanged();
    }

    private async Task RequestDelete()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce séparateur?");
        if (confirmed)
        {
            await OnDeleteRequested.InvokeAsync(Block);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Pas de ressources à nettoyer pour le séparateur
        await Task.CompletedTask;
    }
    
    // Classe pour stocker les paramètres du séparateur
    private class SeparatorSettings
    {
        public string? Style { get; set; }
        public string? Thickness { get; set; }
        public string? Color { get; set; }
        public string? Spacing { get; set; }
    }
}
