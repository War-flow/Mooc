@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Mooc.Data
@inject IJSRuntime JSRuntime

<link href="~/css/quiz-styles.css" rel="stylesheet" />

<div class="quiz-block-viewer">
    @if (!string.IsNullOrEmpty(Block.Title))
    {
        <h4 class="quiz-title">@Block.Title</h4>
    }

    @if (IsCompleted)
    {
        <div class="alert alert-success d-flex align-items-center">
            <i class="bi bi-check-circle-fill me-2 fs-5"></i>
            <div>
                <strong>Quiz terminé !</strong>
                @if (IsCorrect.HasValue)
                {
                    <span class="ms-2">
                        @(IsCorrect.Value ? "🎉 Excellente réponse !" : "📚 Continue d'apprendre !")
                    </span>
                }
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(QuizData.Question))
    {
        <div class="quiz-display">
            <!-- Barre de progression améliorée -->
            @if (QuizData.ShowProgress)
            {
                <div class="quiz-progress mb-3" style="--progress-width: @GetProgressPercentage()%"></div>
                <small class="text-muted mb-3 d-block">
                    Progression : @GetProgressPercentage()%
                </small>
            }

            <!-- Statistiques en temps réel -->
            @if (QuizData.ShowStats && !IsCompleted)
            {
                <div class="quiz-live-stats mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            ⏱️ Temps écoulé : <span class="fw-bold">@GetFormattedTime()</span>
                        </small>
                        @if (HasUserAnswer())
                        {
                            <small class="text-success">
                                ✓ Réponse sélectionnée
                            </small>
                        }
                    </div>
                </div>
            }

            <div class="question">
                @((MarkupString)QuizData.Question)
            </div>

            <div class="options">
                @for (int i = 0; i < QuizData.Options.Count; i++)
                {
                    var index = i;
                    var optionClass = GetEnhancedOptionClass(index);

                    <div class="form-check @optionClass"
                         @onclick="() => HandleOptionClick(index)"
                         @onkeydown="@(async (e) => await HandleKeyDown(e, index))">

                        @if (QuizData.Type == "multiple-select")
                        {
                            <input class="form-check-input" type="checkbox"
                                   id="option-@Block.Order-@index"
                                   disabled="@IsCompleted"
                                   checked="@(IsCompleted? CompletedAnswers[index] : UserAnswers[index])"
                                   @onchange="@(e => { if (!IsCompleted) UserAnswers[index] = (bool)e.Value; })" />
                        }
                        else
                        {
                            <input class="form-check-input" type="radio"
                                   name="quiz-@Block.Order"
                                   id="option-@Block.Order-@index"
                                   disabled="@IsCompleted"
                                   checked="@(IsCompleted? CompletedAnswers[index] : UserAnswers[index])"
                                   @onchange="@(e => { if (!IsCompleted) SetUserAnswer(index); })" />
                        }

                        <label class="form-check-label" for="option-@Block.Order-@index">
                            <span>@QuizData.Options[index].Text</span>

                            <!-- Icônes de résultat avec animation -->
                            @if (IsCompleted && QuizData.Options[index].IsCorrect)
                            {
                                <i class="bi bi-check-circle-fill text-success result-icon"></i>
                            }
                            else if (IsCompleted && CompletedAnswers[index] && !QuizData.Options[index].IsCorrect)
                            {
                                <i class="bi bi-x-circle-fill text-danger result-icon"></i>
                            }
                        </label>
                    </div>
                }
            </div>

            <div class="quiz-actions mt-4">
                @if (!IsCompleted)
                {
                    <div class="d-flex flex-wrap gap-2 align-items-center">
                        <button type="button" class="quiz-submit-btn"
                                @onclick="SubmitAnswer"
                                disabled="@(!HasUserAnswer() || IsSubmitting)">
                            @if (IsSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                <span>Vérification...</span>
                            }
                            else
                            {
                                <i class="bi bi-check-lg"></i>
                                <span>Valider ma réponse</span>
                            }
                        </button>

                        <!-- Bouton d'aide amélioré -->
                        @if (QuizData.AllowHint && !string.IsNullOrEmpty(QuizData.Hint) && !HintUsed)
                        {
                            <button type="button" class="btn btn-outline-info" @onclick="ShowHint">
                                <i class="bi bi-lightbulb me-1"></i>
                                💡 Besoin d'aide ?
                            </button>
                        }
                    </div>

                    <!-- Indicateur de progression des réponses -->
                    @if (HasUserAnswer())
                    {
                        <div class="mt-2">
                            <small class="text-success d-flex align-items-center">
                                <i class="bi bi-check-circle me-1"></i>
                                Réponse prête à être validée
                            </small>
                        </div>
                    }
                }
                else
                {
                    <!-- Badge de résultat avec score détaillé -->
                    @if (IsCorrect.HasValue)
                    {
                        <div class="result-section">
                            <span class="result-badge @(IsCorrect.Value ? "success" : "error")">
                                @if (IsCorrect.Value)
                                {
                                    <i class="bi bi-trophy-fill me-2"></i>
                                    <span>@GetSuccessMessage()</span>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-repeat me-2"></i>
                                    <span>@GetEncouragementMessage()</span>
                                }
                            </span>

                            <!-- Score détaillé -->
                            <div class="score-details mt-3">
                                <div class="row g-2">
                                    <div class="col-auto">
                                        <div class="score-item">
                                            <div class="score-value @(IsCorrect.Value ? "text-success" : "text-warning")">
                                                @(IsCorrect.GetValueOrDefault() ? "100" : "0")%
                                            </div>
                                            <div class="score-label">Score</div>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <div class="score-item">
                                            <div class="score-value text-info">
                                                @GetFormattedTime()
                                            </div>
                                            <div class="score-label">Temps</div>
                                        </div>
                                    </div>
                                    @if (AttemptsCount > 1)
                                    {
                                        <div class="col-auto">
                                            <div class="score-item">
                                                <div class="score-value text-secondary">
                                                    @AttemptsCount
                                                </div>
                                                <div class="score-label">Tentatives</div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Sections de feedback améliorées -->
            @if (HintUsed && !string.IsNullOrEmpty(QuizData.Hint))
            {
                <div class="alert alert-info mt-3 quiz-hint">
                    <div class="d-flex align-items-start">
                        <i class="bi bi-lightbulb text-warning me-2 fs-5"></i>
                        <div>
                            <strong>💡 Indice utilisé :</strong>
                            <p class="mb-0 mt-1">@QuizData.Hint</p>
                        </div>
                    </div>
                </div>
            }

            @if (IsCompleted && !IsCorrect.GetValueOrDefault() && QuizData.ShowValidationFeedback)
            {
                <div class="quiz-feedback mt-3">
                    <div class="d-flex align-items-start">
                        <i class="bi bi-chat-square-text text-primary me-2 fs-5"></i>
                        <div>
                            <strong>💬 Feedback :</strong>
                            <p class="mb-2 mt-1">@ValidationMessage</p>

                            @if (QuizData.ShowCorrectAnswer)
                            {
                                <div class="correct-answer-reveal">
                                    <strong>✅ Bonne(s) réponse(s) :</strong>
                                    <span class="ms-1 text-success fw-bold">@GetCorrectAnswersText()</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            @if (IsCompleted && !string.IsNullOrEmpty(QuizData.Explanation))
            {
                <div class="quiz-explanation mt-3">
                    <div class="d-flex align-items-start">
                        <i class="bi bi-book text-info me-2 fs-5"></i>
                        <div>
                            <strong>📖 Explication :</strong>
                            <div class="mt-1">@((MarkupString)QuizData.Explanation)</div>
                        </div>
                    </div>
                </div>
            }

            <!-- Statistiques finales améliorées -->
            @if (IsCompleted && QuizData.ShowStats)
            {
                <div class="quiz-final-stats">
                    <h6 class="text-center mb-3 text-muted">📊 Résumé de votre performance</h6>
                    <div class="row text-center g-3">
                        <div class="col-md-4">
                            <div class="stat-item">
                                <div class="stat-value @(IsCorrect.GetValueOrDefault() ? "text-success" : "text-warning")">
                                    @(IsCorrect.GetValueOrDefault() ? "100" : "0")%
                                </div>
                                <div class="stat-label">Score Final</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="stat-item">
                                <div class="stat-value text-info">@GetFormattedTime()</div>
                                <div class="stat-label">Temps Total</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="stat-item">
                                <div class="stat-value text-secondary">@AttemptsCount</div>
                                <div class="stat-label">Tentative(s)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Performance badge -->
                    <div class="text-center mt-3">
                        @if (IsCorrect.GetValueOrDefault() && TimeSpent.TotalSeconds <= 30 && AttemptsCount == 1)
                        {
                            <span class="badge bg-warning text-dark px-3 py-2">
                                ⚡ Performance Excellente !
                            </span>
                        }
                        else if (IsCorrect.GetValueOrDefault())
                        {
                            <span class="badge bg-success px-3 py-2">
                                🎯 Objectif Atteint !
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-info px-3 py-2">
                                📚 Continue ton apprentissage !
                            </span>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            Ce quiz n'a pas encore été configuré.
        </div>
    }
</div>

@code {
    [Parameter] public CourBuilder.CoursBlock Block { get; set; } = default!;
    [Parameter] public bool IsReadOnly { get; set; } = true;
    [Parameter] public EventCallback<bool> OnQuizCompleted { get; set; }
    [Parameter] public bool IsCompleted { get; set; } = false;
    [Parameter] public EventCallback<bool> IsCompletedChanged { get; set; }

    private QuizStructure QuizData { get; set; } = new QuizStructure();

    // État du quiz amélioré
    private bool IsAnswered { get; set; } = false;
    private bool IsSubmitting { get; set; } = false;
    private bool? IsCorrect { get; set; } = null;
    private List<bool> UserAnswers { get; set; } = new();
    private List<bool> CompletedAnswers { get; set; } = new();
    private string ValidationMessage { get; set; } = string.Empty;
    private DateTime StartTime { get; set; }
    private TimeSpan TimeSpent { get; set; }
    private bool HintUsed { get; set; } = false;
    private int AttemptsCount { get; set; } = 0;
    private Timer? _timeUpdateTimer;

    protected override void OnInitialized()
    {
        LoadQuizData();

        if (IsCompleted)
        {
            IsAnswered = true;
            CompletedAnswers = new List<bool>(new bool[Math.Max(QuizData.Options.Count, 2)]);
        }
        else
        {
            InitializeUserAnswers();
            StartTime = DateTime.UtcNow;
            StartTimeUpdateTimer();
        }
    }

    private void StartTimeUpdateTimer()
    {
        _timeUpdateTimer = new Timer(async _ =>
        {
            if (!IsCompleted)
            {
                TimeSpent = DateTime.UtcNow - StartTime;
                await InvokeAsync(StateHasChanged);
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void LoadQuizData()
    {
        try
        {
            if (!string.IsNullOrEmpty(Block.Content?.ToString()))
            {
                QuizData = System.Text.Json.JsonSerializer.Deserialize<QuizStructure>(Block.Content.ToString()) ?? new QuizStructure();
            }
        }
        catch
        {
            QuizData = new QuizStructure();
        }
    }

    private void HandleOptionClick(int index)
    {
        if (IsCompleted || IsAnswered) return;

        if (QuizData.Type == "multiple-select")
        {
            UserAnswers[index] = !UserAnswers[index];
        }
        else
        {
            SetUserAnswer(index);
        }
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            HandleOptionClick(index);
        }
    }

    private async Task SubmitAnswer()
    {
        if (IsCompleted) return;

        IsSubmitting = true;
        AttemptsCount++;
        TimeSpent = DateTime.UtcNow - StartTime;
        _timeUpdateTimer?.Dispose();

        await Task.Delay(800); // Effet visuel

        CompletedAnswers = new List<bool>(UserAnswers);
        IsCorrect = CheckAnswer();
        IsAnswered = true;
        IsSubmitting = false;
        IsCompleted = true;

        if (QuizData.ShowValidationFeedback)
        {
            ValidationMessage = IsCorrect.GetValueOrDefault()
                ? GetSuccessMessage()
                : GetFailureMessage();
        }

        if (IsCompletedChanged.HasDelegate)
        {
            await IsCompletedChanged.InvokeAsync(true);
        }

        if (OnQuizCompleted.HasDelegate)
        {
            await OnQuizCompleted.InvokeAsync(IsCorrect.GetValueOrDefault());
        }

        StateHasChanged();
    }

    private void ShowHint()
    {
        if (IsCompleted) return;
        HintUsed = true;
        StateHasChanged();
    }

    private string GetProgressPercentage()
    {
        if (!IsAnswered && !IsCompleted) return "0";
        return IsCorrect.GetValueOrDefault() ? "100" : "50";
    }

    private string GetFormattedTime()
    {
        return TimeSpent.ToString(@"mm\:ss");
    }

    private string GetEnhancedOptionClass(int index)
    {
        var classes = new List<string>();

        if (!IsCompleted)
        {
            if (UserAnswers[index]) classes.Add("selected");
        }
        else
        {
            if (QuizData.Options[index].IsCorrect)
                classes.Add("correct");
            else if (CompletedAnswers[index])
                classes.Add("incorrect");
        }

        if (IsCompleted) classes.Add("disabled");

        return string.Join(" ", classes);
    }

    private string GetSuccessMessage()
    {
        var messages = new[]
        {
            "Parfait ! 🎉",
            "Excellente réponse ! 🌟",
            "Bravo ! 👏",
            "Superbe travail ! 🚀",
            "Fantastique ! ⭐"
        };
        return messages[new Random().Next(messages.Length)];
    }

    private string GetFailureMessage()
    {
        var messages = new[]
        {
            "Pas de problème, on apprend tous ! 📚",
            "Chaque erreur est une leçon ! 💪",
            "Continue, tu es sur la bonne voie ! 🎯",
            "Ne te décourage pas ! 🌈"
        };
        return messages[new Random().Next(messages.Length)];
    }

    private string GetEncouragementMessage()
    {
        var messages = new[]
        {
            "Bonne tentative ! 🌟",
            "Continue d'apprendre ! 📖",
            "Presque ! 💪",
            "Bon effort ! 👍"
        };
        return messages[new Random().Next(messages.Length)];
    }

    private string GetCorrectAnswersText()
    {
        var correctOptions = QuizData.Options
            .Where((option, index) => option.IsCorrect)
            .Select(option => option.Text);
        return string.Join(", ", correctOptions);
    }

    private void SetUserAnswer(int index)
    {
        if (IsCompleted) return;

        for (int i = 0; i < UserAnswers.Count; i++)
        {
            UserAnswers[i] = (i == index);
        }
    }

    private void InitializeUserAnswers()
    {
        UserAnswers = new List<bool>(new bool[Math.Max(QuizData.Options.Count, 2)]);
    }

    private bool CheckAnswer()
    {
        if (QuizData.Type == "multiple-select")
        {
            for (int i = 0; i < QuizData.Options.Count; i++)
            {
                if (QuizData.Options[i].IsCorrect != UserAnswers[i])
                    return false;
            }
            return true;
        }
        else
        {
            for (int i = 0; i < QuizData.Options.Count; i++)
            {
                if (UserAnswers[i] && QuizData.Options[i].IsCorrect)
                    return true;
            }
            return false;
        }
    }

    private bool HasUserAnswer()
    {
        return UserAnswers != null && UserAnswers.Any(a => a);
    }

    public void Dispose()
    {
        _timeUpdateTimer?.Dispose();
    }
}