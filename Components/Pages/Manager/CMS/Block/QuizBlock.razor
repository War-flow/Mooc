@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Mooc.Services
@inject IJSRuntime JSRuntime

<div class="quiz-block @GetTypeClass()" @attributes="AdditionalAttributes">
    <h4 class="quiz-title">
        @if (IsEditing)
        {
            <InputText class="form-control" @bind-Value="Block.Title" 
                      @bind-Value:event="oninput"
                      @onblur="ValidateTitle"
                      placeholder="Titre du quiz" 
                      maxlength="100" />
            @if (titleError)
            {
                <small class="text-danger">Le titre ne peut pas dépasser 100 caractères</small>
            }
            <ValidationMessage For="@(() => Block.Title)" />
        }
        else if (!string.IsNullOrEmpty(Block.Title))
        {
            @Block.Title
        }
        else
        {
            <span class="text-muted">Quiz sans titre</span>
        }
    </h4>

    @if (IsEditing)
    {
        <!-- Mode édition du quiz avec validation en temps réel -->
        <div class="quiz-editor">
            <div class="mb-3">
                <label class="form-label">
                    Question <span class="text-danger">*</span>
                    <small class="text-muted">(@QuizData.Question.Length/500 caractères)</small>
                </label>

                <InputTextArea class="@($"form-control {GetQuestionValidationClass()}")"
                               @bind-Value="QuizData.Question"
                               @bind-Value:event="oninput"
                               @onblur="ValidateQuestion"
                               rows="3"
                               maxlength="500"
                               placeholder="Saisissez votre question..." />
                
                @if (questionError)
                {
                    <small class="text-danger">@questionErrorMessage</small>
                }
            </div>

            <div class="mb-3">
                <label class="form-label">Type de quiz</label>
                <InputSelect class="form-select" @bind-Value="QuizData.Type" @onchange="OnQuizTypeChanged">
                    <option value="multiple-choice">Choix multiple (une seule réponse)</option>
                    <option value="multiple-select">Choix multiple (plusieurs réponses)</option>
                    <option value="true-false">Vrai/Faux</option>
                </InputSelect>
            </div>
            
            <div class="mb-3">
                <label class="form-label d-flex justify-content-between align-items-center">
                    <span>
                        Réponses
                        @if (QuizData.Type == "multiple-select")
                        {
                            <small class="text-muted">(Cochez les bonnes réponses)</small>
                        }
                        else
                        {
                            <small class="text-muted">(Sélectionnez la bonne réponse)</small>
                        }
                    </span>
                    
                    @if (optionsError)
                    {
                        <small class="text-danger">@optionsErrorMessage</small>
                    }
                </label>

                @for (int i = 0; i < QuizData.Options.Count; i++)
                {
                    var index = i;
                    <div class="input-group mb-2">
                        @if (QuizData.Type == "multiple-select")
                        {
                            <div class="input-group-text">
                                <input class="form-check-input" type="checkbox"
                                       checked="@QuizData.Options[index].IsCorrect"
                                       @onchange="@(e => { QuizData.Options[index].IsCorrect = (bool)e.Value!; ValidateOptions(); })" />
                            </div>
                        }
                        else
                        {
                            <div class="input-group-text">
                                <input class="form-check-quiz" type="radio" name="correct-answer-@Block.Order"
                                       checked="@QuizData.Options[index].IsCorrect"
                                       @onchange="@(e => { SetSingleCorrectAnswer(index); ValidateOptions(); })" />
                            </div>
                        }
                        <InputText class="@($"form-control {GetOptionValidationClass(index)}")"
                                   @bind-Value="QuizData.Options[index].Text"
                                   @bind-Value:event="oninput"
                                   @onblur="() => ValidateOption(index)"
                                   placeholder="@($"Option {index + 1}")"
                                   maxlength="200" />
                        <button type="button" class="btn btn-outline-danger"
                                @onclick="() => RemoveOption(index)"
                                disabled="@(QuizData.Options.Count <= GetMinimumOptions())"
                                title="Supprimer cette option">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                }

                <div class="d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-outline-primary btn-sm" 
                            @onclick="AddOption"
                            disabled="@(QuizData.Options.Count >= 6)">
                        <i class="bi bi-plus"></i> Ajouter une option
                    </button>
                    <small class="text-muted">Maximum 6 options</small>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">
                    Explication (optionnel)
                    <small class="text-muted">(@QuizData.Explanation.Length/300 caractères)</small>
                </label>
                <InputTextArea class="form-control" 
                              @bind-Value="QuizData.Explanation" 
                              rows="2"
                              maxlength="300"
                              placeholder="Explication affichée après la réponse..." />
            </div>

            <!-- Paramètres avancés avec accordéon -->
            <div class="accordion" id="advancedSettings">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" data-bs-target="#collapseAdvanced">
                            <i class="bi bi-gear me-2"></i>
                            Paramètres avancés
                        </button>
                    </h2>
                    <div id="collapseAdvanced" class="accordion-collapse collapse">
                        <div class="accordion-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="form-check-input" @bind-Value="QuizData.ShowValidationFeedback" id="@showFeedbackId" />
                                        <label class="form-check-label" for="@showFeedbackId">
                                            Afficher un retour détaillé
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="form-check-input" @bind-Value="QuizData.ShowProgress" id="@($"showProgress-{Block.Order}")" />
                                        <label class="form-check-label" for="@($"showProgress-{Block.Order}")">
                                            Afficher la progression
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="form-check-input" @bind-Value="QuizData.ShowStats" id="@($"showStats-{Block.Order}")" />
                                        <label class="form-check-label" for="@($"showStats-{Block.Order}")">
                                            Afficher les statistiques
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="form-check-input" @bind-Value="QuizData.AllowHint" id="@($"allowHint-{Block.Order}")" />
                                        <label class="form-check-label" for="@($"allowHint-{Block.Order}")">
                                            Autoriser l'aide
                                        </label>
                                    </div>
                                </div>
                            </div>
                            
                            @if (QuizData.AllowHint)
                            {
                                <div class="mt-3">
                                    <label class="form-label">Indice (optionnel)</label>
                                    <InputTextArea class="form-control" 
                                                  @bind-Value="QuizData.Hint" 
                                                  rows="2"
                                                  maxlength="200"
                                                  placeholder="Indice pour aider l'utilisateur..." />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Prévisualisation en temps réel -->
            <div class="mt-4 p-3 bg-light rounded">
                <h6 class="text-muted mb-3">
                    <i class="bi bi-eye me-1"></i> Aperçu du quiz
                </h6>
                <div class="quiz-preview">
                    @if (!string.IsNullOrEmpty(QuizData.Question))
                    {
                        <div class="fw-bold mb-3">@QuizData.Question</div>
                        @for (int i = 0; i < QuizData.Options.Count; i++)
                        {
                            var index = i;
                            <div class="form-check">
                                <input class="form-check-input" type="@(QuizData.Type == "multiple-select" ? "checkbox" : "radio")" disabled />
                                <label class="form-check-label">
                                    @QuizData.Options[index].Text
                                    @if (QuizData.Options[index].IsCorrect)
                                    {
                                        <i class="bi bi-check-circle text-success ms-1"></i>
                                    }
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <em class="text-muted">Saisissez une question pour voir l'aperçu</em>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Mode affichage du quiz avec interactions améliorées -->
        <div class="quiz-display">
            @if (!string.IsNullOrEmpty(QuizData.Question))
            {
                <!-- Barre de progression si activée -->
                @if (QuizData.ShowProgress && IsAnswered)
                {
                    <div class="progress mb-3" style="height: 8px;">
                        <div class="progress-bar @(IsCorrect.GetValueOrDefault() ? "bg-success" : "bg-warning")" 
                             style="width: 100%" role="progressbar"></div>
                    </div>
                }

                <div class="question mb-3">
                    <strong>@((MarkupString)QuizData.Question)</strong>
                </div>

                <div class="options mb-3">
                    @for (int i = 0; i < QuizData.Options.Count; i++)
                    {
                        var index = i;
                        <div class="form-check @GetOptionDisplayClass(index)"
                             @onclick="@(async () => { if (!IsAnswered) HandleOptionClick(index); })"
                             role="button"
                             tabindex="@(IsAnswered ? -1 : 0)"
                             @onkeypress="@(async (e) => await HandleOptionKeyPress(e, index))">

                            @if (QuizData.Type == "multiple-select")
                            {
                                <input class="form-check-input" type="checkbox" 
                                       id="option-@Block.Order-@index"
                                       disabled="@IsAnswered" 
                                       checked="@UserAnswers[index]" />
                            }
                            else
                            {
                                <input class="form-check-input" type="radio" 
                                       name="quiz-@Block.Order"
                                       id="option-@Block.Order-@index" 
                                       disabled="@IsAnswered" 
                                       checked="@UserAnswers[index]" />
                            }
                            
                            <label class="form-check-label @GetOptionLabelClass(index)" for="option-@Block.Order-@index">
                                @QuizData.Options[index].Text
                                @if (IsAnswered && QuizData.Options[index].IsCorrect)
                                {
                                    <i class="bi bi-check-circle-fill text-success ms-2" title="Bonne réponse"></i>
                                }
                                else if (IsAnswered && UserAnswers[index] && !QuizData.Options[index].IsCorrect)
                                {
                                    <i class="bi bi-x-circle-fill text-danger ms-2" title="Mauvaise réponse"></i>
                                }
                            </label>
                        </div>
                    }
                </div>

                <div class="quiz-actions mb-3">
                    @if (!IsAnswered)
                    {
                        <div class="d-flex flex-wrap gap-2 align-items-center">
                            <button type="button" class="btn btn-primary" 
                                    @onclick="SubmitAnswer"
                                    disabled="@(!HasUserAnswer() || isSubmitting)">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-1">Validation...</span>
                                   
                                }
                                else
                                {
                                    <i class="bi bi-check-lg me-1">Valider la réponse</i>
                                   
                                }
                            </button>

                            @if (QuizData.AllowHint && !string.IsNullOrEmpty(QuizData.Hint) && !hintShown)
                            {
                                <button type="button" class="btn btn-outline-info btn-sm" @onclick="ShowHint">
                                    <i class="bi bi-lightbulb me-1"></i>
                                    Aide
                                </button>
                            }
                        </div>

                        @if (HasUserAnswer())
                        {
                            <small class="text-success d-block mt-2">
                                <i class="bi bi-check-circle me-1"></i>
                                Réponse sélectionnée, vous pouvez valider
                            </small>
                        }
                    }
                    else
                    {
                        <!-- Résultat avec animation -->
                        <div class="result-container">
                            @if (IsCorrect.HasValue)
                            {
                                <div class="alert @(IsCorrect.Value ? "alert-success" : "alert-warning") d-flex align-items-center">
                                    @if (IsCorrect.Value)
                                    {
                                        <i class="bi bi-trophy-fill me-2 fs-5"></i>
                                        <strong>Excellent ! Bonne réponse.</strong>
                                    }
                                    else
                                    {
                                        <i class="bi bi-book me-2 fs-5"></i>
                                        <strong>Pas de problème ! Continue.</strong>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Indice si montré -->
                @if (hintShown && !string.IsNullOrEmpty(QuizData.Hint))
                {
                    <div class="alert alert-info">
                        <i class="bi bi-lightbulb me-2"></i>
                        <strong>Indice :</strong> @QuizData.Hint
                    </div>
                }

                <!-- Feedback détaillé -->
                @if (IsAnswered && !IsCorrect.GetValueOrDefault() && QuizData.ShowValidationFeedback && !string.IsNullOrEmpty(ValidationMessage))
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Explication :</strong> @ValidationMessage
                    </div>
                }

                @if (IsAnswered && !string.IsNullOrEmpty(QuizData.Explanation))
                {
                    <div class="alert alert-secondary">
                        <i class="bi bi-book me-2"></i>
                        <strong>En savoir plus :</strong> @QuizData.Explanation
                    </div>
                }

                <!-- Statistiques si activées -->
                @if (IsAnswered && QuizData.ShowStats)
                {
                    <div class="quiz-stats mt-3 p-3 bg-light rounded">
                        <h6 class="text-muted mb-2">
                            <i class="bi bi-bar-chart me-1"></i> Statistiques
                        </h6>
                        <div class="row text-center">
                            <div class="col">
                                <div class="fw-bold @(IsCorrect.GetValueOrDefault() ? "text-success" : "text-warning")">
                                    @(IsCorrect.GetValueOrDefault() ? "100%" : "0%")
                                </div>
                                <small class="text-muted">Score</small>
                            </div>
                            <div class="col">
                                <div class="fw-bold text-info">1</div>
                                <small class="text-muted">Tentative</small>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Ce quiz n'a pas encore été configuré.
                </div>
            }
        </div>
    }

    <div class="block-controls mt-3">
        <button type="button" class="btn-block btn-valid" @onclick="ToggleEdit" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-1">Enregistrement...</span>
                
            }
            else
            {
                <i class="bi bi-@(IsEditing ? "floppy" : "pencil")"></i>
                @(IsEditing ? "Enregistrer" : "Modifier")
            }
        </button>
        @if (!IsEditing)
        {
            <button type="button" class="btn-block btn-cancel" @onclick="RequestDelete" title="Supprimer ce bloc">
                <i class="bi bi-trash"> Supprimer</i>
            </button>
        }
        else
        {
            <button type="button" class="btn-block btn-cancel" @onclick="CancelEdit" title="Annuler les modifications">
                <i class="bi bi-x-lg"></i> Annuler
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public CourBuilder.CoursBlock Block { get; set; } = default!;
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public EventCallback<CourBuilder.CoursBlock> OnBlockChanged { get; set; }
    [Parameter] public EventCallback<CourBuilder.CoursBlock> OnDeleteRequested { get; set; }
    [CascadingParameter] private EditContext? EditContext { get; set; }

    // État du composant amélioré
    private bool IsEditing { get; set; } = false;
    private bool isSaving { get; set; } = false;
    private bool isSubmitting { get; set; } = false;
    private bool hintShown { get; set; } = false;
    
    // Validation en temps réel
    private bool titleError { get; set; } = false;
    private bool questionError { get; set; } = false;
    private bool optionsError { get; set; } = false;
    private string questionErrorMessage { get; set; } = string.Empty;
    private string optionsErrorMessage { get; set; } = string.Empty;
    private List<bool> optionErrors { get; set; } = new();
    
    private string originalContent = string.Empty;
    private string originalTitle = string.Empty;

    // Propriétés calculées pour les IDs
    private string showFeedbackId => $"showFeedback-{Block.Order}";

    // État du quiz
    private bool IsAnswered { get; set; } = false;
    private bool? IsCorrect { get; set; } = null;
    private List<bool> UserAnswers { get; set; } = new();
    private string ValidationMessage { get; set; } = string.Empty;

    // Structure des données du quiz
    private QuizStructure QuizData { get; set; } = new();

    // Classes pour représenter la structure du quiz améliorée
    public class QuizStructure
    {
        public string Question { get; set; } = string.Empty;
        public string Type { get; set; } = "multiple-choice";
        public List<QuizOption> Options { get; set; } = new();
        public string Explanation { get; set; } = string.Empty;
        public bool ShowValidationFeedback { get; set; } = true;
        public bool ShowProgress { get; set; } = false;
        public bool ShowStats { get; set; } = false;
        public bool AllowHint { get; set; } = false;
        public string Hint { get; set; } = string.Empty;

        public QuizStructure()
        {
            // Initialiser avec 2 options par défaut
            Options.Add(new QuizOption { Text = "", IsCorrect = false });
            Options.Add(new QuizOption { Text = "", IsCorrect = false });
        }
    }

    public class QuizOption
    {
        public string Text { get; set; } = string.Empty;
        public bool IsCorrect { get; set; } = false;
    }

    protected override void OnInitialized()
    {
        LoadQuizData();
        InitializeUserAnswers();
        InitializeValidation();
    }

    private void InitializeValidation()
    {
        optionErrors = new List<bool>(new bool[QuizData.Options.Count]);
    }

    private void LoadQuizData()
    {
        try
        {
            if (!string.IsNullOrEmpty(Block.Content?.ToString()))
            {
                QuizData = System.Text.Json.JsonSerializer.Deserialize<QuizStructure>(Block.Content.ToString()) ?? new QuizStructure();
            }
        }
        catch
        {
            QuizData = new QuizStructure();
        }
    }

    private void InitializeUserAnswers()
    {
        UserAnswers = new List<bool>(new bool[Math.Max(QuizData.Options.Count, 2)]);
    }

    // Méthodes de validation améliorées
    private void ValidateTitle()
    {
        titleError = !string.IsNullOrEmpty(Block.Title) && Block.Title.Length > 100;
    }

    private void ValidateQuestion()
    {
        questionError = false;
        questionErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(QuizData.Question))
        {
            questionError = true;
            questionErrorMessage = "La question est obligatoire";
        }
        else if (QuizData.Question.Length > 500)
        {
            questionError = true;
            questionErrorMessage = "La question ne peut pas dépasser 500 caractères";
        }
    }

    private void ValidateOptions()
    {
        optionsError = false;
        optionsErrorMessage = string.Empty;

        // Vérifier qu'il y a au moins une réponse correcte
        if (!QuizData.Options.Any(o => o.IsCorrect))
        {
            optionsError = true;
            optionsErrorMessage = "Au moins une réponse correcte est requise";
            return;
        }

        // Vérifier que toutes les options ont du texte
        if (QuizData.Options.Any(o => string.IsNullOrWhiteSpace(o.Text)))
        {
            optionsError = true;
            optionsErrorMessage = "Toutes les options doivent avoir du texte";
            return;
        }
    }

    private void ValidateOption(int index)
    {
        if (index < optionErrors.Count)
        {
            optionErrors[index] = string.IsNullOrWhiteSpace(QuizData.Options[index].Text);
        }
    }

    private string GetQuestionValidationClass()
    {
        return questionError ? "is-invalid" : (!string.IsNullOrEmpty(QuizData.Question) ? "is-valid" : "");
    }

    private string GetOptionValidationClass(int index)
    {
        if (index < optionErrors.Count)
        {
            return optionErrors[index] ? "is-invalid" : (!string.IsNullOrWhiteSpace(QuizData.Options[index].Text) ? "is-valid" : "");
        }
        return string.Empty;
    }

    private string GetTypeClass()
    {
        var classList = new List<string> { "quiz-block" };

        if (IsEditing) classList.Add("editing");
        if (string.IsNullOrEmpty(QuizData.Question)) classList.Add("empty");
        if (IsAnswered) classList.Add("answered");

        return string.Join(" ", classList);
    }

    private string GetOptionDisplayClass(int index)
    {
        var classes = new List<string> { "quiz-option" };

        if (!IsAnswered)
        {
            if (UserAnswers[index]) classes.Add("selected");
            classes.Add("interactive");
        }
        else
        {
            if (QuizData.Options[index].IsCorrect) classes.Add("correct");
            else if (UserAnswers[index]) classes.Add("incorrect");
            classes.Add("answered");
        }

        return string.Join(" ", classes);
    }

    private string GetOptionLabelClass(int index)
    {
        if (!IsAnswered) return string.Empty;

        var classes = new List<string>();

        if (QuizData.Options[index].IsCorrect)
            classes.Add("text-success fw-bold");
        else if (UserAnswers[index])
            classes.Add("text-danger");

        return string.Join(" ", classes);
    }

    private int GetMinimumOptions()
    {
        return QuizData.Type == "true-false" ? 2 : 2;
    }

    private void OnQuizTypeChanged(ChangeEventArgs e)
    {
        QuizData.Type = e.Value?.ToString() ?? "multiple-choice";

        // Ajuster les options pour Vrai/Faux
        if (QuizData.Type == "true-false")
        {
            QuizData.Options.Clear();
            QuizData.Options.Add(new QuizOption { Text = "Vrai", IsCorrect = false });
            QuizData.Options.Add(new QuizOption { Text = "Faux", IsCorrect = false });
        }

        InitializeUserAnswers();
        InitializeValidation();
    }

    private async Task ToggleEdit()
    {
        if (IsEditing)
        {
            // Validation avant sauvegarde
            ValidateTitle();
            ValidateQuestion();
            ValidateOptions();

            if (titleError || questionError || optionsError)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Veuillez corriger les erreurs avant de sauvegarder.");
                return;
            }

            isSaving = true;
            StateHasChanged();

            try
            {
                // Sauvegarder les données du quiz
                Block.Content = System.Text.Json.JsonSerializer.Serialize(QuizData);

                if (OnBlockChanged.HasDelegate)
                {
                    await OnBlockChanged.InvokeAsync(Block);
                }

                EditContext?.NotifyFieldChanged(new FieldIdentifier(Block, nameof(Block.Title)));
                EditContext?.NotifyFieldChanged(new FieldIdentifier(Block, nameof(Block.Content)));

                // Attendre un court délai pour l'effet visuel
                await Task.Delay(500);
            }
            finally
            {
                isSaving = false;
            }
        }
        else
        {
            originalContent = Block.Content?.ToString() ?? string.Empty;
            originalTitle = Block.Title ?? string.Empty;
        }

        IsEditing = !IsEditing;
        StateHasChanged();
    }

    private async Task CancelEdit()
    {
        // Restaurer les données originales
        if (!string.IsNullOrEmpty(originalContent))
        {
            try
            {
                QuizData = System.Text.Json.JsonSerializer.Deserialize<QuizStructure>(originalContent) ?? new QuizStructure();
            }
            catch
            {
                QuizData = new QuizStructure();
            }
        }

        Block.Title = originalTitle;
        
        // Réinitialiser les erreurs
        titleError = false;
        questionError = false;
        optionsError = false;

        IsEditing = false;
        StateHasChanged();
    }

    private async Task RequestDelete()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce quiz ?");
        if (confirmed && OnDeleteRequested.HasDelegate)
        {
            await OnDeleteRequested.InvokeAsync(Block);
        }
    }

    // Méthodes pour gérer les options du quiz
    private void AddOption()
    {
        if (QuizData.Options.Count < 6)
        {
            QuizData.Options.Add(new QuizOption());
            UserAnswers.Add(false);
            optionErrors.Add(false);
        }
    }

    private void RemoveOption(int index)
    {
        if (QuizData.Options.Count > GetMinimumOptions())
        {
            QuizData.Options.RemoveAt(index);
            if (UserAnswers.Count > index)
            {
                UserAnswers.RemoveAt(index);
            }
            if (optionErrors.Count > index)
            {
                optionErrors.RemoveAt(index);
            }
            ValidateOptions();
        }
    }

    private void SetSingleCorrectAnswer(int correctIndex)
    {
        for (int i = 0; i < QuizData.Options.Count; i++)
        {
            QuizData.Options[i].IsCorrect = (i == correctIndex);
        }
    }

    // Méthodes pour gérer les réponses utilisateur améliorées
    private void HandleOptionClick(int index)
    {
        if (IsAnswered) return;

        if (QuizData.Type == "multiple-select")
        {
            UserAnswers[index] = !UserAnswers[index];
        }
        else
        {
            SetUserAnswer(index);
        }
        StateHasChanged();
    }

    private async Task HandleOptionKeyPress(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            HandleOptionClick(index);
        }
    }

    private void SetUserAnswer(int index)
    {
        for (int i = 0; i < UserAnswers.Count; i++)
        {
            UserAnswers[i] = (i == index);
        }
    }

    private async Task SubmitAnswer()
    {
        if (IsAnswered || !HasUserAnswer()) return;

        isSubmitting = true;
        StateHasChanged();

        // Attendre pour l'effet visuel
        await Task.Delay(800);

        IsCorrect = CheckAnswer();
        IsAnswered = true;
        isSubmitting = false;

        if (QuizData.ShowValidationFeedback)
        {
            ValidationMessage = IsCorrect.GetValueOrDefault() 
                ? "Parfait ! Vous avez donné la bonne réponse." 
                : "Ce n'est pas correct, mais continuez à apprendre !";
        }

        StateHasChanged();
    }

    private void ShowHint()
    {
        hintShown = true;
        StateHasChanged();
    }

    private bool CheckAnswer()
    {
        if (QuizData.Type == "multiple-select")
        {
            for (int i = 0; i < QuizData.Options.Count; i++)
            {
                if (QuizData.Options[i].IsCorrect != UserAnswers[i])
                    return false;
            }
            return true;
        }
        else
        {
            for (int i = 0; i < QuizData.Options.Count; i++)
            {
                if (UserAnswers[i] && QuizData.Options[i].IsCorrect)
                    return true;
            }
            return false;
        }
    }

    private bool HasUserAnswer()
    {
        return UserAnswers != null && UserAnswers.Any(a => a);
    }
}