@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Mooc.Services
@inject IJSRuntime JSRuntime

<div class="quiz-block @GetTypeClass()" @attributes="AdditionalAttributes">
    <h4 class="quiz-title">
        @if (IsEditing)
        {
            <InputText class="form-control" @bind-Value="Block.Title" placeholder="Titre du quiz" />
            @if (titleError)
            {
                <small class="text-danger">Le titre ne peut pas dépasser 100 caractères</small>
            }
            <ValidationMessage For="@(() => Block.Title)" />
        }
        else if (!string.IsNullOrEmpty(Block.Title))
        {
            @Block.Title
        }
        else
        {
            <span class="text-muted">Quiz sans titre</span>
        }
    </h4>

    @if (IsEditing)
    {
        <!-- Mode édition du quiz -->
        <div class="quiz-editor">
            <div class="mb-3">
                <label class="form-label">Question</label>
                @if (useRichEditor)
                {
                    <div id="editor-@Block.Order" class="rich-editor" style="height: 150px;"></div>
                }
                else
                {
                    <InputTextArea class="form-control" @bind-Value="QuizData.Question" rows="3"
                                   placeholder="Saisissez votre question..." />
                }

            </div>

            <div class="mb-3">
                <label class="form-label">Type de quiz</label>
                <InputSelect class="form-select" @bind-Value="QuizData.Type" @onchange="OnQuizTypeChanged">
                    <option value="multiple-choice">Choix multiple (une seule réponse)</option>
                    <option value="multiple-select">Choix multiple (plusieurs réponses)</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">
                    Réponses
                    @if (QuizData.Type == "multiple-select")
                    {
                        <small class="text-muted">(Cochez les bonnes réponses)</small>
                    }
                    else
                    {
                        <small class="text-muted">(Sélectionnez la bonne réponse)</small>
                    }
                </label>

                @for (int i = 0; i < QuizData.Options.Count; i++)
                {
                    var index = i;
                    <div class="input-group mb-2">
                        @if (QuizData.Type == "multiple-select")
                        {
                            <div class="input-group-text">
                                <input class="form-check-input" type="checkbox"
                                       checked="@QuizData.Options[index].IsCorrect"
                                       @onchange="@(e => QuizData.Options[index].IsCorrect = (bool)e.Value!)" />
                            </div>
                        }
                        else
                        {
                            <div class="input-group-text">
                                <input class="form-check-input" type="radio" name="correct-answer-@Block.Order"
                                       checked="@QuizData.Options[index].IsCorrect"
                                       @onchange="@(e => SetSingleCorrectAnswer(index))" />
                            </div>
                        }
                        <InputText class="form-control" @bind-Value="QuizData.Options[index].Text"
                                   placeholder="@($"Option {index + 1}")" />
                        <button type="button" class="btn btn-outline-danger"
                                @onclick="() => RemoveOption(index)"
                                disabled="@(QuizData.Options.Count <= GetMinimumOptions())">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                }

                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddOption"
                        disabled="@(QuizData.Options.Count >= 6)">
                    <i class="bi bi-plus"></i> Ajouter une option
                </button>
            </div>

            <div class="mb-3">
                <label class="form-label">Explication (optionnel)</label>
                <InputTextArea class="form-control" @bind-Value="QuizData.Explanation" rows="2"
                               placeholder="Explication affichée après la réponse..." />
            </div>

            <!-- Paramètres avancés -->
            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="QuizData.ShowValidationFeedback" id="@showFeedbackId" />
                    <label class="form-check-label" for="@showFeedbackId">
                        Afficher un retour détaillé sur les erreurs
                    </label>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Mode affichage du quiz -->
        <div class="quiz-display">
            @if (!string.IsNullOrEmpty(QuizData.Question))
            {
                <div class="question mb-3">
                    <strong>@((MarkupString)QuizData.Question)</strong>
                </div>

                <div class="options mb-3">
                    @for (int i = 0; i < QuizData.Options.Count; i++)
                    {
                        var index = i;
                        <div class="form-check">
                            @if (QuizData.Type == "multiple-select")
                            {
                                <input class="form-check-input" type="checkbox" id="option-@Block.Order-@index"
                                       disabled="@IsAnswered" @bind="UserAnswers[index]" />
                            }
                            else
                            {
                                <input class="form-check-input" type="radio" name="quiz-@Block.Order"
                                       id="option-@Block.Order-@index" value="@index"
                                       disabled="@IsAnswered" @onchange="@(e => SetUserAnswer(index))" />
                            }
                            <label class="form-check-label @GetOptionClass(index)" for="option-@Block.Order-@index">
                                @QuizData.Options[index].Text
                                @if (IsAnswered && QuizData.Options[index].IsCorrect)
                                {
                                    <i class="bi bi-check-circle-fill text-success ms-2"></i>
                                }
                                else if (IsAnswered && UserAnswers[index] && !QuizData.Options[index].IsCorrect)
                                {
                                    <i class="bi bi-x-circle-fill text-danger ms-2"></i>
                                }
                            </label>
                        </div>
                    }
                </div>

                <div class="quiz-actions mb-3">
                    @if (!IsAnswered)
                    {
                        <button type="button" class="btn btn-primary" @onclick="SubmitAnswer"
                                disabled="@(!HasUserAnswer())">
                            Valider la réponse
                        </button>
                    }
                    else
                    {

                        @if (IsCorrect.HasValue)
                        {
                            <span class="ms-3 badge @(IsCorrect.Value ? "bg-success" : "bg-danger")">
                                @if (IsCorrect.Value)
                                {
                                    <i class="bi bi-check-lg me-1"></i>
                                    @:Correct!
                                }
                                else
                                {
                                    <i class="bi bi-x-lg me-1"></i>
                                    @:Incorrect
                                }
                            </span>
                        }
                    }
                </div>

                <!-- Feedback détaillé pour les réponses incorrectes -->
                @if (IsAnswered && !IsCorrect.GetValueOrDefault() && QuizData.ShowValidationFeedback && !string.IsNullOrEmpty(ValidationMessage))
                {
                    <div class="alert alert-warning">
                        <strong>Résultat</strong> @ValidationMessage
                    </div>
                }

                @if (IsAnswered && !string.IsNullOrEmpty(QuizData.Explanation))
                {
                    <div class="alert alert-info">
                        <strong>Explication :</strong> @QuizData.Explanation
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Ce quiz n'a pas encore été configuré.
                </div>
            }
        </div>
    }

    <div class="block-controls mt-3">
        <button type="button" class="btn-block btn-valid" @onclick="ToggleEdit">
            <i class="bi bi-@(IsEditing ? "floppy" : "pencil")"></i> @(IsEditing ? "Enregistrer" : "Modifier")
        </button>
        @if (!IsEditing)
        {
            <button type="button" class="btn-block btn-cancel" @onclick="RequestDelete" title="Supprimer ce bloc">
                <i class="bi bi-trash"> Supprimer</i>
            </button>
        }
        else
        {
            <button type="button" class="btn-block btn-cancel" @onclick="CancelEdit" title="Annuler les modifications">
                <i class="bi bi-x-lg"></i> Annuler
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public CourBuilder.CoursBlock Block { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public EventCallback<CourBuilder.CoursBlock> OnBlockChanged { get; set; }

    [Parameter]
    public EventCallback<CourBuilder.CoursBlock> OnDeleteRequested { get; set; }

    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    // État du composant
    private bool IsEditing { get; set; } = false;
    private bool useRichEditor { get; set; } = false;
    private bool titleError { get; set; } = false;
    private string originalContent = string.Empty;
    private string originalTitle = string.Empty;
    private string editorId => $"editor-{Block.Order}";

    // Propriétés calculées pour les IDs
    private string showFeedbackId => $"showFeedback-{Block.Order}";
    private string useRichEditorId => $"useRichEditor-{Block.Order}";

    // État du quiz
    private bool IsAnswered { get; set; } = false;
    private bool? IsCorrect { get; set; } = null;
    private List<bool> UserAnswers { get; set; } = new();
    private string ValidationMessage { get; set; } = string.Empty;

    // Structure des données du quiz
    private QuizStructure QuizData { get; set; } = new();

    // Classes pour représenter la structure du quiz
    public class QuizStructure
    {
        public string Question { get; set; } = string.Empty;
        public string Type { get; set; } = "multiple-choice";
        public List<QuizOption> Options { get; set; } = new();
        public string Explanation { get; set; } = string.Empty;
        public bool ShowValidationFeedback { get; set; } = true;

        public QuizStructure()
        {
            // Initialiser avec 2 options par défaut
            Options.Add(new QuizOption { Text = "", IsCorrect = false });
            Options.Add(new QuizOption { Text = "", IsCorrect = false });
        }
    }

    public class QuizOption
    {
        public string Text { get; set; } = string.Empty;
        public bool IsCorrect { get; set; } = false;
    }

    // Classe pour représenter les blocs de cours
    public class CoursBlock
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Type { get; set; } = string.Empty;
        public int Order { get; set; }
        public string? Title { get; set; }
        public string? Text { get; set; }
        public object? Content { get; set; }
        public string? Url { get; set; }
        public List<string> FileUrls { get; set; } = new();
    }

    protected override void OnInitialized()
    {
        LoadQuizData();
        InitializeUserAnswers();
    }

    private void LoadQuizData()
    {
        try
        {
            if (!string.IsNullOrEmpty(Block.Content?.ToString()))
            {
                QuizData = System.Text.Json.JsonSerializer.Deserialize<QuizStructure>(Block.Content.ToString()) ?? new QuizStructure();
            }
        }
        catch
        {
            // Si la désérialisation échoue, garder la structure par défaut
            QuizData = new QuizStructure();
        }
    }

    private void InitializeUserAnswers()
    {
        UserAnswers = new List<bool>(new bool[Math.Max(QuizData.Options.Count, 2)]);
    }

    private void OnContentChanged(string elementId, string content)
    {
        QuizData.Question = content;
    }

    private string GetTypeClass()
    {
        var classList = new List<string> { "quiz-block" };

        if (IsEditing) classList.Add("editing");
        if (string.IsNullOrEmpty(QuizData.Question)) classList.Add("empty");
        if (IsAnswered) classList.Add("answered");

        return string.Join(" ", classList);
    }

    private string GetOptionClass(int index)
    {
        if (!IsAnswered) return string.Empty;

        var classes = new List<string>();

        if (QuizData.Options[index].IsCorrect)
            classes.Add("text-success fw-bold");
        else if (UserAnswers[index])
            classes.Add("text-danger");

        return string.Join(" ", classes);
    }

    private int GetMinimumOptions()
    {
        return QuizData.Type == "true-false" ? 2 : 2;
    }

    private void OnQuizTypeChanged(ChangeEventArgs e)
    {
        QuizData.Type = e.Value?.ToString() ?? "multiple-choice";

        // Ajuster les options pour Vrai/Faux
        if (QuizData.Type == "true-false")
        {
            QuizData.Options.Clear();
            QuizData.Options.Add(new QuizOption { Text = "Vrai", IsCorrect = false });
            QuizData.Options.Add(new QuizOption { Text = "Faux", IsCorrect = false });
        }

        InitializeUserAnswers();
    }

    private async Task ToggleEdit()
    {
        if (IsEditing)
        {
            // Validation
            if (Block.Title?.Length > 100)
            {
                titleError = true;
                return;
            }

            // Validation des options pour s'assurer qu'au moins une réponse correcte existe
            if (!QuizData.Options.Any(o => o.IsCorrect))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Veuillez sélectionner au moins une réponse correcte.");
                return;
            }

            // Sauvegarder les données du quiz
            Block.Content = System.Text.Json.JsonSerializer.Serialize(QuizData);

            if (OnBlockChanged.HasDelegate)
            {
                await OnBlockChanged.InvokeAsync(Block);
            }

            EditContext?.NotifyFieldChanged(new FieldIdentifier(Block, nameof(Block.Title)));
            EditContext?.NotifyFieldChanged(new FieldIdentifier(Block, nameof(Block.Content)));
        }
        else
        {
            originalContent = Block.Content?.ToString() ?? string.Empty;
            originalTitle = Block.Title ?? string.Empty;
        }

        titleError = false;
        IsEditing = !IsEditing;
    }

    private async Task CancelEdit()
    {
        // Restaurer les données originales
        if (!string.IsNullOrEmpty(originalContent))
        {
            try
            {
                QuizData = System.Text.Json.JsonSerializer.Deserialize<QuizStructure>(originalContent) ?? new QuizStructure();
            }
            catch
            {
                QuizData = new QuizStructure();
            }
        }

        Block.Title = originalTitle;

        IsEditing = false;
        StateHasChanged();
    }

    private async Task RequestDelete()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce quiz?");
        if (confirmed && OnDeleteRequested.HasDelegate)
        {
            await OnDeleteRequested.InvokeAsync(Block);
        }
    }

    // Méthodes pour gérer les options du quiz
    private void AddOption()
    {
        if (QuizData.Options.Count < 6)
        {
            QuizData.Options.Add(new QuizOption());
            UserAnswers.Add(false);
        }
    }

    private void RemoveOption(int index)
    {
        if (QuizData.Options.Count > GetMinimumOptions())
        {
            QuizData.Options.RemoveAt(index);
            if (UserAnswers.Count > index)
            {
                UserAnswers.RemoveAt(index);
            }
        }
    }

    private void SetSingleCorrectAnswer(int correctIndex)
    {
        for (int i = 0; i < QuizData.Options.Count; i++)
        {
            QuizData.Options[i].IsCorrect = (i == correctIndex);
        }
    }

    // Méthodes pour gérer les réponses utilisateur
    private void SetUserAnswer(int index)
    {
        for (int i = 0; i < UserAnswers.Count; i++)
        {
            UserAnswers[i] = (i == index) && !UserAnswers[i];
        }

        IsAnswered = UserAnswers.Any();
    }

    private void SubmitAnswer()
    {
        IsCorrect = QuizData.Options.Any(o => o.IsCorrect && UserAnswers[QuizData.Options.IndexOf(o)]);

        // Afficher le message de validation si l'option est activée
        if (QuizData.ShowValidationFeedback)
        {
            ValidationMessage = IsCorrect.GetValueOrDefault() ? "Bonne réponse !" : "Mauvaise réponse. Essayez encore.";
        }

        IsAnswered = true;
    }

    private bool HasUserAnswer()
    {
        return UserAnswers != null && UserAnswers.Any(a => a);
    }
}