@page "/cours/view/{CoursId:int}"
@page "/cours/view/{CoursId:int}/block/{BlockIndex:int}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using Mooc.Components.Pages.Manager.CMS
@using Mooc.Components.Pages.Manager.CMS.Block
@using Mooc.Components.Pages.Manager.CMS.Block.ReadOnly
@using Mooc.Services
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject CourseStateService CourseStateService
@inject IJSRuntime JSRuntime

<PageTitle>@(cours?.Title ?? "Cours") - @GetCurrentBlockTitle()</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-3 text-muted">Chargement du cours...</p>
        </div>
    </div>
}
else if (cours == null)
{
    <div class="container mt-4">
        <div class="alert alert-warning d-flex align-items-center">
            <i class="bi bi-exclamation-triangle me-3 fs-4"></i>
            <div>
                <strong>Cours introuvable</strong>
                <p class="mb-0">Le cours demandé n'a pas été trouvé ou n'est plus disponible.</p>
            </div>
        </div>
        <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/Manager/Cours")'>
            <i class="bi bi-arrow-left me-1"></i> Retour aux cours
        </button>
    </div>
} 
else
{
    <div class="container mt-4">
        <!-- En-tête du cours amélioré -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h2 class="mb-0">
                                <i class="bi bi-book me-2"></i>
                                @cours.Title
                            </h2>
                            <div class="course-status">
                                @if (courseProgress?.IsCompleted == true)
                                {
                                    <span class="badge bg-success fs-6">
                                        <i class="bi bi-trophy-fill me-1"></i>
                                        Terminé
                                    </span>
                                }
                                else if (courseProgress != null && courseProgress.CompletedBlocks.Any())
                                {
                                    <span class="badge bg-info fs-6">
                                        <i class="bi bi-clock-history me-1"></i>
                                        En cours
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary fs-6">
                                        <i class="bi bi-play me-1"></i>
                                        Non commencé
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(cours.Description))
                        {
                            <p class="text-muted mb-3">@cours.Description</p>
                        }

                        <!-- Barre de progression améliorée -->
                        @if (courseProgress != null && blocks != null)
                        {
                            var progressPercentage = blocks.Count > 0 ? (courseProgress.CompletedBlocks.Count * 100 / blocks.Count) : 0;
                            <div class="progress mb-3" style="height: 12px;">
                                <div class="progress-bar bg-gradient progress-bar-striped @(courseProgress.IsCompleted ? "bg-success" : "bg-info")" 
                                     role="progressbar"
                                     style="width: @progressPercentage%"
                                     aria-valuenow="@progressPercentage"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                </div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="bi bi-graph-up me-1"></i>
                                    Progression: @progressPercentage% (@courseProgress.CompletedBlocks.Count/@blocks.Count blocs)
                                </small>
                                @if (courseProgress.IsCompleted)
                                {
                                    <small class="text-success fw-bold">
                                        <i class="bi bi-check-circle-fill me-1"></i>
                                        Cours terminé !
                                    </small>
                                }
                            </div>
                        }

                        <!-- Navigation entre blocs -->
                        @if (blocks != null && blocks.Any())
                        {
                            <div class="block-navigation mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <button class="btn btn-outline-primary" 
                                            @onclick="GoToPreviousBlock"
                                            disabled="@(CurrentBlockIndex <= 0)">
                                        <i class="bi bi-arrow-left me-1"></i>
                                        Précédent
                                    </button>

                                    <div class="block-counter">
                                        <span class="badge bg-light text-dark">
                                            Bloc @(CurrentBlockIndex + 1) sur @blocks.Count
                                        </span>
                                    </div>

                                    <button class="btn btn-outline-primary" 
                                            @onclick="GoToNextBlock"
                                            disabled="@(!CanNavigateToNext())">
                                        Suivant
                                        <i class="bi bi-arrow-right ms-1"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Informations
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="info-item mb-3">
                            <strong>Session :</strong>
                            <p class="mb-0">@cours.Session?.Title</p>
                        </div>
                        <div class="info-item mb-3">
                            <strong>Période :</strong>
                            <p class="mb-0">
                                Du @cours.Session?.StartDate.ToString("dd/MM/yyyy") 
                                au @cours.Session?.EndDate.ToString("dd/MM/yyyy")
                            </p>
                        </div>
                        
                        @if (courseProgress?.IsCompleted == true)
                        {
                            <div class="info-item mb-3">
                                <strong>Score :</strong>
                                <div class="score-display">
                                    <span class="fs-4 fw-bold text-success">
                                        @GetCorrectAnswersCount()/@GetTotalQuizCount()
                                    </span>
                                    @if (GetTotalQuizCount() > 0)
                                    {
                                        <span class="text-muted">
                                            (@(Math.Round((double)GetCorrectAnswersCount() / GetTotalQuizCount() * 100, 1))%)
                                        </span>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Nouvelle section : Indicateur de quiz -->
                        <div class="info-item mb-3">
                            <strong>Quiz :</strong>
                            <div class="d-flex align-items-center">
                                <span class="me-2">@GetTotalQuizCount() quiz disponible(s)</span>
                                @if (GetTotalQuizCount() == 0)
                                {
                                    <span class="badge bg-warning">
                                        <i class="bi bi-exclamation-triangle me-1"></i>
                                        Aucun quiz
                                    </span>
                                }
                                else if (GetTotalQuizCount() == 1)
                                {
                                    <span class="badge bg-info">
                                        <i class="bi bi-check-circle me-1"></i>
                                        Quiz disponible
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-success">
                                        <i class="bi bi-check-circle-fill me-1"></i>
                                        Plusieurs quiz
                                    </span>
                                }
                            </div>
                        </div>

                        <!-- Liste des blocs avec statut -->
                        @if (blocks != null && blocks.Any())
                        {
                            <div class="blocks-overview">
                                <strong>Contenu du cours :</strong>
                                <div class="list-group list-group-flush mt-2">
                                    @for (int i = 0; i < blocks.Count; i++)
                                    {
                                        var blockIndex = i;
                                        var block = blocks[i];
                                        var isCompleted = courseProgress?.CompletedBlocks.Contains(blockIndex) ?? false;
                                        var isCurrent = blockIndex == CurrentBlockIndex;

                                        <div class="list-group-item @(isCurrent ? "active" : "") p-2"
                                             @onclick="() => GoToBlock(blockIndex)"
                                             role="button">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="@(isCurrent ? "fw-bold" : "")">
                                                    @(blockIndex + 1). @(!string.IsNullOrEmpty(block.Title) ? block.Title : GetBlockTypeDisplay(block.Type))
                                                </span>
                                                @if (isCompleted)
                                                {
                                                    <i class="bi bi-check-circle-fill text-success"></i>
                                                }
                                                else if (isCurrent)
                                                {
                                                    <i class="bi bi-arrow-right text-primary"></i>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Contenu principal du bloc -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm">
                    @if (showNavigationHelper && !CanNavigateToNext() && IsCurrentBlockQuiz())
                    {
                        <div class="alert alert-warning alert-dismissible fade show m-3">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Information :</strong> Vous devez compléter ce quiz pour continuer vers le bloc suivant.
                            <button type="button" class="btn-close" @onclick="() => showNavigationHelper = false"></button>
                        </div>
                    }

                    <div class="card-body">
                        @if (blocks != null && blocks.Any() && CurrentBlockIndex >= 0 && CurrentBlockIndex < blocks.Count)
                        {
                            var currentBlock = blocks[CurrentBlockIndex];
                            <div class="course-block-viewer">
                                <DynamicComponent Type="@GetViewerBlockComponent(currentBlock.Type)"
                                                  Parameters="@GetViewerBlockParameters(currentBlock)" />
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info text-center">
                                <i class="bi bi-info-circle me-2 fs-3"></i>
                                <h5>Cours en construction</h5>
                                <p class="mb-0">Ce cours ne contient pas encore de contenu. Revenez plus tard !</p>
                            </div>
                        }
                    </div>

                    <!-- Pied de page avec navigation -->
                    <div class="card-footer bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="navigation-left">
                                @if (CurrentBlockIndex > 0)
                                {
                                    <button class="btn btn-outline-secondary" @onclick="GoToPreviousBlock">
                                        <i class="bi bi-arrow-left me-1"></i>
                                        Précédent
                                    </button>
                                }
                            </div>

                            <div class="navigation-center">
                                @if (courseProgress?.IsCompleted == true)
                                {
                                    <!-- Affichage pour cours terminé -->
                                    <div class="text-center">
                                        <div class="alert alert-success d-inline-flex align-items-center mb-0">
                                            <i class="bi bi-trophy-fill me-2 fs-5"></i>
                                            <div>
                                                <strong>Félicitations !</strong>
                                                <div class="small">
                                                    Score : @GetCorrectAnswersCount()/@GetTotalQuizCount() 
                                                    @if (GetTotalQuizCount() > 0)
                                                    {
                                                        <span>(@(Math.Round((double)GetCorrectAnswersCount() / GetTotalQuizCount() * 100, 1))%)</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (IsLastBlock() && !IsCurrentBlockCompleted())
                                {
                                    <!-- Bouton pour terminer le cours -->
                                    <button class="btn btn-success @(CanCompleteCourse() ? "" : "disabled")" 
                                            @onclick="CompleteCourse"
                                            disabled="@(!CanCompleteCourse())">
                                        <i class="bi bi-check-circle me-1"></i>
                                        Terminer le cours
                                    </button>
                                    
                                    @if (!CanCompleteCourse() && IsCurrentBlockQuiz())
                                    {
                                        <div class="text-warning small mt-1">
                                            <i class="bi bi-exclamation-triangle me-1"></i>
                                            Complétez ce quiz pour terminer
                                        </div>
                                    }
                                }
                            </div>

                            <div class="navigation-right">
                                @if (CurrentBlockIndex < (blocks?.Count ?? 0) - 1)
                                {
                                    <button class="btn @(CanNavigateToNext() ? "btn-primary" : "btn-outline-primary disabled")" 
                                            @onclick="GoToNextBlock"
                                            disabled="@(!CanNavigateToNext())">
                                        Suivant
                                        <i class="bi bi-arrow-right ms-1"></i>
                                    </button>
                                }
                                else if (courseProgress?.IsCompleted == true)
                                {
                                    <button class="btn btn-outline-secondary" @onclick="RetourVersListe">
                                        <i class="bi bi-list me-1"></i>
                                        Retour aux cours
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int CoursId { get; set; }
    [Parameter] public int? BlockIndex { get; set; }

    private Cours? cours;
    private List<CourBuilder.CoursBlock>? blocks;
    private bool isLoading = true;
    private bool showNavigationHelper = true;
    private int CurrentBlockIndex => BlockIndex ?? 0;
    private Services.CourseProgress? courseProgress;

    // Dictionnaire pour tracker l'état des quiz par bloc
    private Dictionary<int, bool> quizCompletionState = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCoursData();
        await LoadCourseProgress();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Rediriger vers le dernier bloc consulté si aucun bloc spécifié
        if (!BlockIndex.HasValue && blocks != null && blocks.Any())
        {
            var targetBlock = courseProgress?.LastAccessedBlock ?? 0;
            NavigationManager.NavigateTo(GetBlockUrl(targetBlock), replace: true);
            return;
        }

        // Vérifier que l'index est valide
        if (BlockIndex.HasValue && blocks != null &&
            (BlockIndex.Value < 0 || BlockIndex.Value >= blocks.Count))
        {
            NavigationManager.NavigateTo(GetBlockUrl(0), replace: true);
            return;
        }

        // Sauvegarder l'accès au bloc actuel
        if (BlockIndex.HasValue && courseProgress != null)
        {
            courseProgress.LastAccessedBlock = BlockIndex.Value;
            await CourseStateService.SaveProgressAsync(courseProgress);
        }
    }

    private async Task LoadCoursData()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            cours = await context.Courses
                .Include(c => c.Session)
                .FirstOrDefaultAsync(c => c.Id == CoursId);

            if (cours != null && !string.IsNullOrEmpty(cours.Content))
            {
                try
                {
                    blocks = System.Text.Json.JsonSerializer.Deserialize<List<CourBuilder.CoursBlock>>(
                        cours.Content,
                        new System.Text.Json.JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Erreur lors de la désérialisation des blocs: {ex.Message}");
                    blocks = new List<CourBuilder.CoursBlock>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du cours: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCourseProgress()
    {
        try
        {
            courseProgress = await CourseStateService.GetOrCreateProgressAsync(CoursId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du progrès: {ex.Message}");
        }
    }

    // Navigation améliorée
    private async Task GoToPreviousBlock()
    {
        if (CurrentBlockIndex > 0)
        {
            NavigationManager.NavigateTo(GetBlockUrl(CurrentBlockIndex - 1));
        }
    }

    private async Task GoToNextBlock()
    {
        if (!CanNavigateToNext())
        {
            if (IsCurrentBlockQuiz())
            {
                await JSRuntime.InvokeVoidAsync("alert", "Vous devez compléter ce quiz pour continuer.");
            }
            return;
        }

        // Marquer le bloc actuel comme complété
        if (courseProgress != null && !courseProgress.CompletedBlocks.Contains(CurrentBlockIndex))
        {
            await MarkBlockAsCompleted();
        }

        if (CurrentBlockIndex < (blocks?.Count ?? 0) - 1)
        {
            NavigationManager.NavigateTo(GetBlockUrl(CurrentBlockIndex + 1));
        }
    }

    private async Task GoToBlock(int blockIndex)
    {
        if (blockIndex >= 0 && blockIndex < (blocks?.Count ?? 0))
        {
            NavigationManager.NavigateTo(GetBlockUrl(blockIndex));
        }
    }

    private async Task MarkBlockAsCompleted()
    {
        if (courseProgress != null)
        {
            courseProgress.CompletedBlocks.Add(CurrentBlockIndex);

            // Vérifier si le cours est complété
            if (blocks != null && courseProgress.CompletedBlocks.Count >= blocks.Count)
            {
                courseProgress.IsCompleted = true;
            }

            await CourseStateService.SaveProgressAsync(courseProgress);
            StateHasChanged();
        }
    }

    private async Task CompleteCourse()
    {
        if (courseProgress == null || blocks == null) return;

        try
        {
            // Marquer le dernier bloc comme complété s'il ne l'est pas
            if (!courseProgress.CompletedBlocks.Contains(CurrentBlockIndex))
            {
                courseProgress.CompletedBlocks.Add(CurrentBlockIndex);
            }

            // Marquer le cours comme terminé
            courseProgress.IsCompleted = true;

            await CourseStateService.SaveProgressAsync(courseProgress);

            // Montrer une notification de succès
            await JSRuntime.InvokeVoidAsync("alert", 
                $"🎉 Félicitations ! Vous avez terminé ce cours.\n" +
                $"Score : {GetCorrectAnswersCount()}/{GetTotalQuizCount()} quiz réussis");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la completion du cours: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Une erreur s'est produite lors de la completion du cours.");
        }
    }

    // Méthodes utilitaires améliorées
    private bool IsLastBlock()
    {
        return blocks != null && CurrentBlockIndex == blocks.Count - 1;
    }

    private bool IsCurrentBlockCompleted()
    {
        return courseProgress?.CompletedBlocks.Contains(CurrentBlockIndex) ?? false;
    }

    private bool CanCompleteCourse()
    {
        if (blocks == null || courseProgress == null) return false;

        var currentBlock = blocks[CurrentBlockIndex];
        
        // Si ce n'est pas un quiz, permettre la completion
        if (currentBlock.Type != "quiz") return true;

        // Si c'est un quiz, vérifier s'il est complété
        return quizCompletionState.ContainsKey(CurrentBlockIndex) && quizCompletionState[CurrentBlockIndex];
    }

    private bool CanNavigateToNext()
    {
        if (blocks == null) return false;

        var currentBlock = blocks[CurrentBlockIndex];
        
        // Si ce n'est pas un quiz, permettre la navigation
        if (currentBlock.Type != "quiz") return true;

        // Si c'est un quiz, vérifier s'il est complété
        return quizCompletionState.ContainsKey(CurrentBlockIndex) && quizCompletionState[CurrentBlockIndex];
    }

    private bool IsCurrentBlockQuiz()
    {
        if (blocks == null || CurrentBlockIndex >= blocks.Count) return false;
        return blocks[CurrentBlockIndex].Type == "quiz";
    }

    private async Task OnQuizCompleted(bool isCorrect)
    {
        // Marquer le quiz comme complété
        quizCompletionState[CurrentBlockIndex] = true;

        // Enregistrer l'interaction du quiz
        if (courseProgress != null)
        {
            var quizInteraction = new { 
                completed = true, 
                correct = isCorrect, 
                timestamp = DateTime.UtcNow 
            };
            courseProgress.BlockInteractions[CurrentBlockIndex] = System.Text.Json.JsonSerializer.Serialize(quizInteraction);
            
            await CourseStateService.SaveProgressAsync(courseProgress);
        }

        StateHasChanged();
    }

    private void RetourVersListe()
    {
        var sessionId = cours?.SessionId;
        var url = sessionId.HasValue ? $"/session/{sessionId.Value}" : "/Manager/Cours";
        NavigationManager.NavigateTo(url);
    }

    private string GetBlockUrl(int blockIndex)
    {
        return $"/Cours/View/{CoursId}/Block/{blockIndex}";
    }

    private string GetCurrentBlockTitle()
    {
        if (blocks == null || !blocks.Any() || CurrentBlockIndex < 0 || CurrentBlockIndex >= blocks.Count)
            return "Contenu du cours";

        var currentBlock = blocks[CurrentBlockIndex];
        return !string.IsNullOrEmpty(currentBlock.Title)
            ? currentBlock.Title
            : $"Bloc {CurrentBlockIndex + 1}";
    }

    private string GetBlockTypeDisplay(string type) => type switch
    {
        "texte" => "Contenu textuel",
        "quiz" => "Quiz",
        _ => "Contenu"
    };

    private Type GetViewerBlockComponent(string type) => type switch
    {
        "texte" => typeof(TextBlockViewer),
        "quiz" => typeof(QuizBlockViewer),
        _ => typeof(TextBlockViewer)
    };

    private Dictionary<string, object> GetViewerBlockParameters(CourBuilder.CoursBlock block)
    {
        var parameters = new Dictionary<string, object>
        {
            ["Block"] = block,
            ["IsReadOnly"] = true
        };

        // Ajouter le callback pour les quiz
        if (block.Type == "quiz")
        {
            parameters["OnQuizCompleted"] = EventCallback.Factory.Create<bool>(this, OnQuizCompleted);
        }

        return parameters;
    }

    private int GetCorrectAnswersCount()
    {
        if (courseProgress?.BlockInteractions == null) return 0;
        
        int correctCount = 0;
        foreach (var interaction in courseProgress.BlockInteractions)
        {
            try
            {
                using var document = System.Text.Json.JsonDocument.Parse(interaction.Value);
                if (document.RootElement.TryGetProperty("correct", out var correctProperty) &&
                    correctProperty.GetBoolean())
                {
                    correctCount++;
                }
            }
            catch
            {
                // Ignorer les interactions mal formées
            }
        }
        
        return correctCount;
    }

    private int GetTotalQuizCount()
    {
        if (blocks == null) return 0;
        return blocks.Count(b => b.Type == "quiz");
    }
}