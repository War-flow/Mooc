@page "/Cours/View/{CoursId:int}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using Mooc.Components.Pages.Manager.CMS
@using Mooc.Components.Pages.Manager.CMS.Block
@using Mooc.Components.Pages.Manager.CMS.Block.ReadOnly
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager

<PageTitle>@(cours?.Title ?? "Cours")</PageTitle>

<div class="container mt-4">
    @if (cours != null)
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h2 class="mb-0">@cours.Title</h2>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(cours.Description))
                        {
                            <p class="text-muted">@cours.Description</p>
                        }
                        <div class="mb-3">
                            <span class="badge bg-primary me-2">
                                <i class="bi bi-clock me-1"></i>
                                @cours.Duration min
                            </span>
                            <span class="badge @(cours.IsPublished ? "bg-success" : "bg-secondary") me-2">
                                @(cours.IsPublished ? "Publié" : "Brouillon")
                            </span>
                            @if (cours.IsRequired)
                            {
                                <span class="badge bg-warning">Obligatoire</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Informations</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Session :</strong> @cours.Session?.Title</p>
                        <p><strong>Date de début :</strong> @cours.Session?.StartDate.ToString("dd/MM/yyyy")</p>
                        <p><strong>Date de fin :</strong> @cours.Session?.EndDate.ToString("dd/MM/yyyy")</p>
                        <hr />
                        <button class="btn btn-outline-secondary" @onclick="RetourVersListe">
                            <i class="bi bi-arrow-left me-2"></i>Retour
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h4 class="mb-0">Contenu du cours</h4>
            </div>
            <div class="card-body">
                <div class="cours-viewer-container">
                    @if (blocks != null && blocks.Any())
                    {
                        @foreach (var block in blocks.OrderBy(b => b.Order))
                        {
                            <div class="mb-4 cours-block-viewer">
                                <DynamicComponent Type="@GetViewerBlockComponent(block.Type)"
                                                  Parameters="@GetViewerBlockParameters(block)" />
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            Ce cours ne contient pas encore de contenu.
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            Le cours demandé n'a pas été trouvé.
        </div>
    }
</div>

@code {
    [Parameter]
    public int CoursId { get; set; }

    private Cours? cours;
    private List<CourBuilder.CoursBlock>? blocks;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoursData();
    }

    private async Task LoadCoursData()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            cours = await context.Courses
                .Include(c => c.Session)
                .FirstOrDefaultAsync(c => c.Id == CoursId);

            if (cours != null && !string.IsNullOrEmpty(cours.Content))
            {
                try
                {
                    blocks = System.Text.Json.JsonSerializer.Deserialize<List<CourBuilder.CoursBlock>>(
                        cours.Content,
                        new System.Text.Json.JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Erreur lors de la désérialisation des blocs: {ex.Message}");
                    blocks = new List<CourBuilder.CoursBlock>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du cours: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RetourVersListe()
    {
        var sessionId = cours?.SessionId;
        var url = sessionId.HasValue ? $"/Manager/Cours?sessionId={sessionId}" : "/Manager/Cours";
        NavigationManager.NavigateTo(url);
    }

    // Méthode pour obtenir le composant viewer correspondant à chaque type de bloc
    private Type GetViewerBlockComponent(string type) => type switch
    {
        "texte" => typeof(TextBlockViewer),
        "audio" => typeof(AudioBlockViewer),
        "quiz" => typeof(QuizBlockViewer),
        "tableau" => typeof(TableBlockViewer),
        "fichier" => typeof(FileBlockViewer),
        _ => typeof(TextBlockViewer)
    };

    // Méthode pour créer les paramètres pour les composants viewer
    private Dictionary<string, object> GetViewerBlockParameters(CourBuilder.CoursBlock block)
    {
        return new Dictionary<string, object>
        {
            ["Block"] = block,
            ["IsReadOnly"] = true
        };
    }
}