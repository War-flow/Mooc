@page "/Manager/Session"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Components.Shared
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Mooc.Services
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject FileUploadService FileUploadService
@attribute [Authorize(Policy = "GestionFormation")]
@attribute [StreamRendering]

<PageTitle>Gestion des Sessions</PageTitle>

<!-- Intégration du composant ErrorComp au niveau global -->
<ErrorComp @ref="globalErrorComponent" OnRetry="RetryLastOperation">
    <!-- En-tête de page avec design moderne -->
    <div class="page-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col">
                    <h1 class="page-title">
                        Gestion des Sessions
                    </h1>
                    <p class="page-subtitle">Créez et gérez vos sessions de formation</p>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary btn-lg session-create-btn" @onclick="ShowCreateSessionModal">
                        <i class="bi bi-plus-circle me-2"></i>
                        Nouvelle Session
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <!-- ErrorComp pour les erreurs de chargement des sessions -->
        <ErrorComp @ref="loadingErrorComponent" OnRetry="LoadSessions">
            @if (sessions != null)
            {
                @if (sessions.Any())
                {
                    <!-- Vue en cartes pour un meilleur design -->
                    <div class="sessions-grid">
                        @foreach (var session in sessions)
                        {
                            <div class="session-card">
                                <div class="session-image">
                                    @if (!string.IsNullOrEmpty(session.Image))
                                    {
                                        <img src="@session.Image" alt="@session.Title" />
                                    }
                                    else
                                    {
                                        <div class="session-image-placeholder">
                                            <i class="bi bi-image"></i>
                                        </div>
                                    }
                                    <div class="session-status">
                                        <span class="badge @GetSessionStatusClass(session)">
                                            <i class="bi @GetSessionStatusIcon(session)"></i>
                                            @GetSessionStatusText(session)
                                        </span>

                                        <span class="badge bg-secondary">
                                            <i class="bi bi-people-fill text-info me-2"></i>
                                            @GetEnrolledCount(session.Id) inscrit@(GetEnrolledCount(session.Id) > 1 ? "s" : "")
                                            @if (IsCountUpdating(session.Id))
                                            {
                                                <span class="spinner-border spinner-border-sm ms-1" style="width: 0.75rem; height: 0.75rem;"></span>
                                            }
                                        </span>
                                    </div>
                                </div>
                                
                                <div class="session-content">
                                    <h5 class="session-title">@session.Title</h5>
                                    <p class="session-description">
                                        @(session.Description?.Length > 100 ? session.Description.Substring(0, 100) + "..." : session.Description)
                                    </p>
                                    
                                    <div class="session-meta">
                                        <div class="session-date">
                                            <i class="bi bi-calendar3 me-1"></i>
                                            <small>@session.StartDate.ToString("dd/MM/yyyy") - @session.EndDate.ToString("dd/MM/yyyy")</small>
                                        </div>
                                        <div class="session-work">
                                            <i class="bi bi-clock me-1"></i>
                                            <small>@session.Work heures</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="session-actions">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary" @onclick="() => EditSession(session.Id)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn @(session.IsActive ? "btn-success" : "btn-outline-secondary")" 
                                                @onclick="() => ToggleSessionStatus(session.Id)">
                                            <i class="bi @(session.IsActive ? "bi-toggle-on" : "bi-toggle-off")"></i>
                                        </button>
                                        <a class="btn btn-info" href="/Manager/Cours?sessionId=@session.Id">
                                            <i class="bi bi-book"></i>
                                        </a>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteSessionConfirmation(session.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- État vide amélioré -->
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="bi bi-calendar-x"></i>
                        </div>
                        <h3 class="empty-state-title">Aucune session créée</h3>
                        <p class="empty-state-text">Créez votre première session de formation pour commencer.</p>
                        <button class="btn btn-primary btn-lg" @onclick="ShowCreateSessionModal">
                            <i class="bi bi-plus-circle me-2"></i>
                            Créer ma première session
                        </button>
                    </div>
                }
            }
            else
            {
                <!-- Loading state amélioré -->
                <div class="loading-state">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <p class="mt-3">Chargement des sessions...</p>
                </div>
            }
        </ErrorComp>
    </div>
</ErrorComp>

<!-- Modal amélioré avec ErrorComp intégré -->
@if (showModal)
{
    <div class="modal fade show modal-backdrop-custom" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content modal-modern">
                <div class="modal-header modal-header-modern">
                    <h5 class="modal-title">
                        <i class="bi @(isEditing ? "bi-pencil-square" : "bi-plus-circle") me-2"></i>
                        @modalTitle
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <!-- ErrorComp pour les erreurs du formulaire -->
                    <ErrorComp @ref="formErrorComponent" OnRetry="ClearFormError">
                        <EditForm Model="@sessionModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="row">
                                <div class="col-md-8">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="sessionModel.Title" class="form-control" placeholder="Titre de la session" />
                                        <label>Titre de la session</label>
                                        <ValidationMessage For="@(() => sessionModel.Title)" />
                                    </div>
                                    
                                    <div class="form-floating mb-3">
                                        <InputTextArea @bind-Value="sessionModel.Description" class="form-control" style="height: 120px" placeholder="Description" />
                                        <label>Description</label>
                                        <ValidationMessage For="@(() => sessionModel.Description)" />
                                    </div>
                                </div>
                                
                                <div class="col-md-4">
                                    <div class="image-upload-section">
                                        <label class="form-label">Image de la session</label>
                                        <div class="image-preview">
                                            @if (!string.IsNullOrEmpty(sessionModel.Image))
                                            {
                                                <img src="@sessionModel.Image" alt="Aperçu" />
                                            }
                                            else
                                            {
                                                <div class="image-placeholder">
                                                    <i class="bi bi-image"></i>
                                                    <p>Aucune image</p>
                                                </div>
                                            }
                                        </div>
                                        <InputFile OnChange="OnImageFileSelected" class="form-control mt-2" accept=".jpg,.jpeg,.png,.gif" />
                                        <small class="text-muted">JPG, PNG, GIF. Max: 3MB</small>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row mt-1">
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <InputDate @bind-Value="sessionModel.StartDate" class="form-control" />
                                        <label>Date de début</label>
                                        <ValidationMessage For="@(() => sessionModel.StartDate)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <InputDate @bind-Value="sessionModel.EndDate" class="form-control" />
                                        <label>Date de fin</label>
                                        <ValidationMessage For="@(() => sessionModel.EndDate)" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <InputNumber @bind-Value="sessionModel.Work" class="form-control" />
                                        <label>Durée (heures)</label>
                                        <ValidationMessage For="@(() => sessionModel.Work)" />
                                    </div>
                                </div>
                                <div class="col-md-6 d-flex align-items-center">
                                    <div class="form-check form-switch form-check-lg">
                                        <InputCheckbox @bind-Value="sessionModel.IsActive" class="form-check-input" id="isActiveCheck" />
                                        <label class="form-check-label" for="isActiveCheck">
                                            Session en ligne
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">
                                    <i class="bi bi-x-circle me-1"></i>
                                    Annuler
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi @(isEditing ? "bi-check-circle" : "bi-plus-circle") me-1"></i>
                                    @(isEditing ? "Modifier" : "Créer")
                                </button>
                            </div>
                        </EditForm>
                    </ErrorComp>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal fade show modal-backdrop-custom" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-modern">
                <div class="modal-header modal-header-danger">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showDeleteConfirmation = false"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="delete-icon mb-3">
                        <i class="bi bi-trash3"></i>
                    </div>
                    <p class="lead">Êtes-vous sûr de vouloir supprimer cette session ?</p>
                    <p class="text-muted">Cette action est irréversible.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => showDeleteConfirmation = false">
                        <i class="bi bi-x-circle me-1"></i>
                        Annuler
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteSession">
                        <i class="bi bi-trash me-1"></i>
                        Supprimer définitivement
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Variables existantes
    private List<Mooc.Data.Session>? sessions;
    private SessionModel sessionModel = new();
    private bool showModal = false;
    private string modalTitle = "Créer une session";
    private bool isEditing = false;
    private int currentSessionId = 0;
    private bool showDeleteConfirmation = false;
    private IBrowserFile? selectedImageFile;
    private string? oldImagePath;
    private Dictionary<int, int> enrolledCounts = new();
    private HashSet<int> updatingCounts = new();

    // **NOUVELLES VARIABLES pour ErrorComp**
    private ErrorComp? globalErrorComponent;
    private ErrorComp? loadingErrorComponent;
    private ErrorComp? formErrorComponent;

    // Variables pour gérer la dernière opération ayant échoué
    private string? lastFailedOperation;
    private int? lastFailedSessionId;

    protected override async Task OnInitializedAsync()
    {
        await LoadSessionsWithErrorHandling();
    }

    private async Task LoadSessionsWithErrorHandling()
    {
        try
        {
            await LoadSessions();
            await LoadEnrolledCounts();
        }
        catch (Exception ex)
        {
            loadingErrorComponent?.SetError($"Erreur lors du chargement des sessions : {ex.Message}");
            lastFailedOperation = "LoadSessions";
        }
    }

    private async Task LoadSessions()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        
        // Vérification immédiate des sessions expirées avant l'affichage
        await CheckAndUpdateExpiredSessions(context);
        
        sessions = await context.Sessions.ToListAsync();
    }

    private async Task CheckAndUpdateExpiredSessions(ApplicationDbContext context)
    {
        var now = DateTime.Now;
        var expiredSessions = await context.Sessions
            .Where(s => s.IsActive && s.EndDate < now)
            .ToListAsync();

        if (expiredSessions.Any())
        {
            foreach (var session in expiredSessions)
            {
                session.IsActive = false;
            }
            
            await context.SaveChangesAsync();
        }
    }

    private async Task LoadEnrolledCounts()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        enrolledCounts.Clear();
        if (sessions != null)
        {
            foreach (var session in sessions)
            {
                try
                {
                    var count = await context.Entry(session)
                        .Collection(s => s.EnrolledUsers)
                        .Query()
                        .CountAsync();
                    enrolledCounts[session.Id] = count;
                }
                catch (Exception ex)
                {
                    // Erreur silencieuse pour le comptage - pas critique
                    enrolledCounts[session.Id] = 0;
                }
            }
        }
    }

    private async Task ToggleSessionStatus(int sessionId)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var session = await context.Sessions.FindAsync(sessionId);

            if (session != null)
            {
                session.IsActive = !session.IsActive;
                await context.SaveChangesAsync();
                await LoadSessions();
                
                // Réinitialiser les erreurs en cas de succès
                globalErrorComponent?.Reset();
            }
        }
        catch (Exception ex)
        {
            globalErrorComponent?.SetError($"Erreur lors du changement de statut : {ex.Message}");
            lastFailedOperation = "ToggleStatus";
            lastFailedSessionId = sessionId;
        }
    }

    private void ShowCreateSessionModal()
    {
        sessionModel = new SessionModel();
        selectedImageFile = null;
        oldImagePath = null;
        modalTitle = "Créer une session";
        isEditing = false;
        showModal = true;
        
        // Réinitialiser les erreurs du formulaire
        formErrorComponent?.Reset();
    }

    private async Task EditSession(int sessionId)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var session = await context.Sessions.FindAsync(sessionId);

            if (session != null)
            {
                currentSessionId = sessionId;
                oldImagePath = session.Image;
                sessionModel = new SessionModel
                {
                    Title = session.Title,
                    Image = session.Image ?? string.Empty,
                    Description = session.Description ?? string.Empty,
                    StartDate = session.StartDate,
                    EndDate = session.EndDate,
                    Work = session.Work,
                    IsActive = session.IsActive
                };

                modalTitle = "Modifier la session";
                isEditing = true;
                showModal = true;
                selectedImageFile = null;
                
                // Réinitialiser les erreurs du formulaire
                formErrorComponent?.Reset();
            }
        }
        catch (Exception ex)
        {
            globalErrorComponent?.SetError($"Erreur lors du chargement de la session : {ex.Message}");
            lastFailedOperation = "EditSession";
            lastFailedSessionId = sessionId;
        }
    }

    private async Task OnImageFileSelected(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;

        try
        {
            if (!selectedImageFile.ContentType.StartsWith("image/"))
            {
                formErrorComponent?.SetError("Le fichier doit être une image.");
                selectedImageFile = null;
                return;
            }

            if (selectedImageFile.Size > 3 * 1024 * 1024)
            {
                formErrorComponent?.SetError("La taille de l'image ne doit pas dépasser 3MB.");
                selectedImageFile = null;
                return;
            }

            // Réinitialiser les erreurs en cas de succès
            formErrorComponent?.Reset();
        }
        catch (Exception ex)
        {
            formErrorComponent?.SetError($"Erreur lors de la sélection de l'image : {ex.Message}");
            selectedImageFile = null;
        }
    }

    private void DeleteSessionConfirmation(int sessionId)
    {
        currentSessionId = sessionId;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteSession()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var session = await context.Sessions.FindAsync(currentSessionId);

            if (session != null)
            {
                if (!string.IsNullOrEmpty(session.Image) && session.Image.StartsWith("/uploads/"))
                {
                    FileUploadService.DeleteFile(session.Image);
                }

                context.Sessions.Remove(session);
                await context.SaveChangesAsync();
                await LoadSessions();
                
                // Réinitialiser les erreurs en cas de succès
                globalErrorComponent?.Reset();
            }

            showDeleteConfirmation = false;
        }
        catch (Exception ex)
        {
            globalErrorComponent?.SetError($"Erreur lors de la suppression : {ex.Message}");
            lastFailedOperation = "DeleteSession";
            lastFailedSessionId = currentSessionId;
            showDeleteConfirmation = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            string imagePath = sessionModel.Image;

            if (selectedImageFile != null)
            {
                imagePath = await FileUploadService.UploadImageAsync(selectedImageFile);
            }

            using var context = await DbContextFactory.CreateDbContextAsync();

            if (isEditing)
            {
                var session = await context.Sessions.FindAsync(currentSessionId);

                if (session != null)
                {
                    session.Title = sessionModel.Title;

                    if (selectedImageFile != null && !string.IsNullOrEmpty(oldImagePath) && oldImagePath.StartsWith("/uploads/"))
                    {
                        FileUploadService.DeleteFile(oldImagePath);
                    }

                    session.Image = imagePath;
                    session.Description = sessionModel.Description;
                    session.StartDate = sessionModel.StartDate;
                    session.EndDate = sessionModel.EndDate ?? DateTime.Today.AddDays(30);
                    session.Work = sessionModel.Work;
                    session.IsActive = sessionModel.IsActive;

                    await context.SaveChangesAsync();
                }
            }
            else
            {
                var session = new Mooc.Data.Session
                {
                    Title = sessionModel.Title,
                    Image = imagePath,
                    Description = sessionModel.Description,
                    StartDate = sessionModel.StartDate,
                    EndDate = sessionModel.EndDate ?? DateTime.Today.AddDays(30),
                    Work = sessionModel.Work,
                    IsActive = sessionModel.IsActive
                };

                context.Sessions.Add(session);
                await context.SaveChangesAsync();
            }

            await LoadSessions();
            CloseModal();
            
            // Réinitialiser toutes les erreurs en cas de succès
            globalErrorComponent?.Reset();
            formErrorComponent?.Reset();
        }
        catch (Exception ex)
        {
            formErrorComponent?.SetError($"Erreur lors de l'enregistrement : {ex.Message}");
            lastFailedOperation = "SaveSession";
        }
    }

    // **NOUVELLES MÉTHODES pour la gestion d'erreurs**
    
    /// <summary>
    /// Réessaie la dernière opération qui a échoué
    /// </summary>
    private async Task RetryLastOperation()
    {
        if (string.IsNullOrEmpty(lastFailedOperation)) return;

        try
        {
            switch (lastFailedOperation)
            {
                case "LoadSessions":
                    await LoadSessionsWithErrorHandling();
                    break;
                case "ToggleStatus" when lastFailedSessionId.HasValue:
                    await ToggleSessionStatus(lastFailedSessionId.Value);
                    break;
                case "EditSession" when lastFailedSessionId.HasValue:
                    await EditSession(lastFailedSessionId.Value);
                    break;
                case "DeleteSession" when lastFailedSessionId.HasValue:
                    currentSessionId = lastFailedSessionId.Value;
                    await ConfirmDeleteSession();
                    break;
                case "SaveSession":
                    await HandleValidSubmit();
                    break;
            }
            
            // Réinitialiser après une tentative réussie
            lastFailedOperation = null;
            lastFailedSessionId = null;
        }
        catch (Exception ex)
        {
            globalErrorComponent?.SetError($"La nouvelle tentative a échoué : {ex.Message}");
        }
    }

    /// <summary>
    /// Efface les erreurs du formulaire
    /// </summary>
    private void ClearFormError()
    {
        formErrorComponent?.Reset();
    }

    // Méthodes existantes
    private int GetEnrolledCount(int sessionId)
    {
        return enrolledCounts.TryGetValue(sessionId, out var count) ? count : 0;
    }
    
    private void CloseModal()
    {
        showModal = false;
        selectedImageFile = null;
        formErrorComponent?.Reset();
    }

    private bool IsCountUpdating(int sessionId)
    {
        return updatingCounts.Contains(sessionId);
    }

    private class SessionModel
    {
        [Required(ErrorMessage = "Le titre est requis")]
        [StringLength(200, ErrorMessage = "Le titre ne doit pas dépasser 200 caractères")]
        public string Title { get; set; } = string.Empty;

        public string Image { get; set; } = string.Empty;

        [Required(ErrorMessage = "La description est requise")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "La date de début est requise")]
        public DateTime StartDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "La date de fin est requise")]
        public DateTime? EndDate { get; set; } = DateTime.Today.AddDays(30);

        [Required(ErrorMessage = "Le temps de travail est requis")]
        [Range(1, 1000, ErrorMessage = "Le temps de travail doit être entre 1 et 1000 heures")]
        public int Work { get; set; } = 10;

        [Required(ErrorMessage = "le nombre de places est requis")]
        [Range(1, 100, ErrorMessage = "Le nombre maximal de place par session est de 100")]
        public bool IsActive { get; set; } = false;
    }

    private string GetSessionStatusClass(Mooc.Data.Session session)
    {
        var now = DateTime.Now;
        
        if (now > session.EndDate)
            return "bg-secondary"; // Session terminée
        
        if (!session.IsActive)
            return "bg-danger"; // Hors ligne manuellement
            
        return "bg-success"; // En ligne
    }

    private string GetSessionStatusIcon(Mooc.Data.Session session)
    {
        var now = DateTime.Now;
        
        if (now > session.EndDate)
            return "bi-clock-history"; // Session terminée
        
        if (!session.IsActive)
            return "bi bi-wifi-off"; // Hors ligne
            
        return "bi bi-wifi"; // En ligne
    }

    private string GetSessionStatusText(Mooc.Data.Session session)
    {
        var now = DateTime.Now;
        
        if (now > session.EndDate)
            return "Terminée";
        
        if (!session.IsActive)
            return "Hors ligne";
            
        return "En ligne";
    }
}