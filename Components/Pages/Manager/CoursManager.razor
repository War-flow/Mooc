@page "/manager/cours"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Mooc.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "GestionFormation")]
@attribute [StreamRendering]

<PageTitle>Modules</PageTitle>

@if (session != null)
{
    <!-- En-tête de page avec design moderne -->
    <div class="page-header header-waves ocean header-animated">
        <div class="container">
            <div class="row align-items-center">
                <div class="col">
                    <i class="bi bi-book header-icon morphing"></i>
                    <h1 class="page-title typewriter">Modules de formation</h1>
                    <p class="page-subtitle">@session.Title - Gérez vos modules</p>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary btn-lg session-create-btn" @onclick="() => CreerCours(session.Id)">
                        <i class="bi bi-plus-circle me-2"></i>
                        Nouveau Module
                    </button>
                    <a class="btn btn-outline-light btn-lg session-create-btn ms-2" href="/Manager/Session">
                        <i class="bi bi-arrow-left me-2"></i>
                        Retour aux sessions
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        @if (coursList.Any())
        {
            <!-- Vue en cartes pour un meilleur design -->
            <div class="courses-grid">
                @foreach (var cours in coursList.OrderBy(c => c.Order))
                {
                    <div class="course-card">
                        <div class="course-header">
                            <div class="course-status">
                                <span class="badge @(cours.IsPublished ? "bg-success" : "bg-secondary")">
                                    @(cours.IsPublished ? "Publié" : "Brouillon")
                                </span>
                            </div>
                        </div>
                        
                        <div class="course-content">
                            <h5 class="course-title">@cours.Title</h5>
                            <p class="course-description">
                                @(cours.Description?.Length > 100 ? cours.Description.Substring(0, 100) + "..." : cours.Description ?? "Aucune description")
                            </p>
                            <div class="course-meta">
                                <div class="course-updated">
                                    <i class="bi bi-calendar-check me-1"></i>
                                    <small>Mis à jour le @cours.UpdatedAt.ToString("dd/MM/yyyy")</small>
                                </div>
                            </div>
                        </div>
                        
                        <div class="course-actions">
                            <div class="btn-group w-100" role="group">
                                <button class="btn" @onclick="() => VoirCours(cours.Id)" title="Voir le module">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn" @onclick="() => EditerCours(cours.Id)" title="Modifier le module">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn" 
                                        @onclick="() => ToggleCourseStatus(cours.Id)" 
                                        title="@(cours.IsPublished ? "Dépublier" : "Publier")">
                                    <i class="bi @(cours.IsPublished ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                                <button class="btn" @onclick="() => SupprimerCoursConfirmation(cours.Id)" title="Supprimer le module">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- État vide amélioré -->
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="bi bi-book"></i>
                </div>
                <h3 class="empty-state-title">Aucun module créé</h3>
                <p class="empty-state-text">Créez votre premier module de cours pour cette session.</p>
                <button class="btn btn-primary btn-lg" @onclick="() => CreerCours(session.Id)">
                    <i class="bi bi-plus-circle me-2"></i>
                    Créer mon premier module
                </button>
            </div>
        }
    </div>
}
else if (sessionId != null)
{
    <!-- Loading state amélioré -->
    <div class="container mt-4">
        <div class="loading-state">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-3">Chargement des modules...</p>
        </div>
    </div>
}
else
{
    <!-- État d'erreur amélioré -->
    <div class="container mt-4">
        <div class="empty-state">
            <div class="empty-state-icon text-warning">
                <i class="bi bi-exclamation-triangle"></i>
            </div>
            <h3 class="empty-state-title">Session non sélectionnée</h3>
            <p class="empty-state-text">Veuillez sélectionner une session pour voir ses modules.</p>
            <a href="/Manager/Session" class="btn btn-primary btn-lg">
                <i class="bi bi-arrow-left me-2"></i>
                Voir les sessions
            </a>
        </div>
    </div>
}

<!-- Modal amélioré avec de meilleurs styles -->
@if (showDeleteConfirmation)
{
    <div class="modal fade show modal-backdrop-custom" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-modern">
                <div class="modal-header modal-header-danger">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showDeleteConfirmation = false"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="delete-icon mb-3">
                        <i class="bi bi-trash3"></i>
                    </div>
                    <p class="lead">Êtes-vous sûr de vouloir supprimer ce module ?</p>
                    <p class="text-muted">Cette action est irréversible et supprimera tout le contenu du module.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => showDeleteConfirmation = false">
                        <i class="bi bi-x-circle me-1"></i>
                        Annuler
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCours">
                        <i class="bi bi-trash me-1"></i>
                        Supprimer définitivement
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private int? sessionId;
    private Session? session;
    private List<Cours> coursList = new();
    private bool showDeleteConfirmation = false;
    private int courseIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        // Récupération de l'ID depuis l'URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sessionId", out var id))
        {
            if (int.TryParse(id, out var parsedId))
            {
                sessionId = parsedId;

                // Charger la session depuis la base de données
                using var context = await DbContextFactory.CreateDbContextAsync();
                // Charger la session et ses cours associés
                session = await context.Sessions
                    .Include(s => s.Courses)
                    .FirstOrDefaultAsync(s => s.Id == sessionId);

                // Charger la liste des cours (sécurité si la navigation n'est pas chargée)
                if (session?.Courses != null)
                    coursList = session.Courses.ToList();
            }
        }
    }

    private void CreerCours(int sessionId)
    {
        NavigationManager.NavigateTo($"/manager/cours/edit?sessionId={sessionId}");
    }

    private void EditerCours(int coursId)
    {
        NavigationManager.NavigateTo($"/manager/cours/edit/{coursId}");
    }

    private void VoirCours(int coursId)
    {
        NavigationManager.NavigateTo($"/cours/view/{coursId}");
    }

    private async Task ToggleCourseStatus(int coursId)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var cours = await context.Courses.FindAsync(coursId);

            if (cours != null)
            {
                cours.IsPublished = !cours.IsPublished;
                cours.UpdatedAt = DateTime.UtcNow;
                await context.SaveChangesAsync();

                // Mettre à jour la liste locale
                var localCours = coursList.FirstOrDefault(c => c.Id == coursId);
                if (localCours != null)
                {
                    localCours.IsPublished = cours.IsPublished;
                    localCours.UpdatedAt = cours.UpdatedAt;
                }
            }
        }
        catch (Exception)
        {
            // Gérer les erreurs silencieusement ou afficher un message
        }
    }

    private void SupprimerCoursConfirmation(int coursId)
    {
        courseIdToDelete = coursId;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteCours()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var cours = await context.Courses.FindAsync(courseIdToDelete);

            if (cours != null)
            {
                context.Courses.Remove(cours);
                await context.SaveChangesAsync();

                // Rafraîchir la liste
                coursList.RemoveAll(c => c.Id == courseIdToDelete);
            }

            showDeleteConfirmation = false;
        }
        catch (Exception)
        {
            // Gérer les erreurs
        }
    }
}