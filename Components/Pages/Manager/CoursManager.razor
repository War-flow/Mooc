@page "/Manager/Cours"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Mooc.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "GestionFormation")]
@attribute [StreamRendering]

<PageTitle>Modules</PageTitle>

@if (session != null)
{
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>@session.Title</h2>
            <div>
                <button class="btn btn-primary" @onclick="() => CreerCours(session.Id)">
                    <i class="bi bi-plus-circle me-2"></i>Nouveau module
                </button>
                <a class="btn btn-outline-secondary ms-2" href="/Manager/Session">
                    <i class="bi bi-arrow-left me-2"></i>Retour aux sessions
                </a>
            </div>
        </div>

        <div class="card">
            <div class="card-header bg-light">
                <h3 class="mb-0">Module de cette session</h3>
            </div>
            <div class="card-body">
                @if (coursList.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Titre</th>
                                    <th>Description</th>
                                    <th>Durée</th>
                                    <th>Statut</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cours in coursList.OrderBy(c => c.Order))
                                {
                                    <tr>
                                        <td>@cours.Title</td>
                                        <td>@(cours.Description?.Length > 50 ? cours.Description.Substring(0, 50) + "..." : cours.Description)</td>
                                        <td>@(cours.Duration) min</td>
                                        <td>
                                            <span class="badge @(cours.IsPublished ? "bg-success" : "bg-secondary")">
                                                @(cours.IsPublished ? "Publié" : "Brouillon")
                                            </span>
                                            @if (cours.IsRequired)
                                            {
                                                <span class="badge bg-warning ms-1">Obligatoire</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn" @onclick="() => VoirCours(cours.Id)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn" @onclick="() => EditerCours(cours.Id)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn" @onclick="() => SupprimerCoursConfirmation(cours.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Aucun cours n'est disponible pour cette session. Créez votre premier cours en cliquant sur "Nouveau module".
                    </div>
                }
            </div>
        </div>
    </div>
}
else if (sessionId != null)
{
    <div class="container mt-4">
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            Veuillez sélectionner une session pour voir ses cours.
        </div>
        <a href="/Manager/Session" class="btn btn-primary">
            <i class="bi bi-arrow-left me-2"></i>Voir les sessions
        </a>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmer la suppression</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer ce cours ?</p>
                    <p class="text-danger">Cette action est irréversible.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCours">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private int? sessionId;
    private Session? session;
    private List<Cours> coursList = new();
    private bool showDeleteConfirmation = false;
    private int courseIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        // Récupération de l'ID depuis l'URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sessionId", out var id))
        {
            if (int.TryParse(id, out var parsedId))
            {
                sessionId = parsedId;

                // Charger la session depuis la base de données
                using var context = await DbContextFactory.CreateDbContextAsync();
                // Charger la session et ses cours associés
                session = await context.Sessions
                    .Include(s => s.Courses)
                    .FirstOrDefaultAsync(s => s.Id == sessionId);

                // Charger la liste des cours (sécurité si la navigation n'est pas chargée)
                if (session?.Courses != null)
                    coursList = session.Courses.ToList();
            }
        }
    }

    private void CreerCours(int sessionId)
    {
        NavigationManager.NavigateTo($"/Manager/Cours/Edit?sessionId={sessionId}");
    }

    private void EditerCours(int coursId)
    {
        NavigationManager.NavigateTo($"/Manager/Cours/Edit/{coursId}");
    }

    private void VoirCours(int coursId)
    {
        // Rediriger vers une page de visualisation du cours
        NavigationManager.NavigateTo($"/Cours/View/{coursId}");
    }

    private void SupprimerCoursConfirmation(int coursId)
    {
        courseIdToDelete = coursId;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteCours()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var cours = await context.Courses.FindAsync(courseIdToDelete);

            if (cours != null)
            {
                context.Courses.Remove(cours);
                await context.SaveChangesAsync();

                // Rafraîchir la liste
                if (session?.Courses != null)
                {
                    var coursToRemove = session.Courses.FirstOrDefault(c => c.Id == courseIdToDelete);
                    if (coursToRemove != null)
                    {
                        coursList.Remove(coursToRemove);
                    }
                }
            }

            showDeleteConfirmation = false;
        }
        catch (Exception)
        {
            // Gérer les erreurs
        }
    }
}