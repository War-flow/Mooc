@page "/Manager/Cours"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Mooc.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "GestionFormation")]
@attribute [StreamRendering]


<PageTitle>Liste des modules</PageTitle>

@if (session != null)
{
    <div class="mb-4">
        <h2>@session.Title</h2>
    </div>
    <a class="btn" href="/Manager/Cours?sessionId=@session.Id">Voir les cours</a>
    <h3>Cours de cette session</h3>
    @if (coursList.Any())
    {
        <ul class="list-group">
            @foreach (var cours in coursList)
            {
                <li class="list-group-item">
                    <strong>@cours.Title</strong>
                    @* Ajoutez d'autres propriétés si besoin *@
                </li>
            }
        </ul>
    }
    else
    {
        <div>Aucun cours pour cette session.</div>
    }
}
else if (sessionId != null)
{
    <div>Chargement...</div>
}

@code {
    private int? sessionId;
    private Session? session;
    private List<Cours> coursList = new();

    protected override async Task OnInitializedAsync()
    {
        // Récupération de l'ID depuis l'URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sessionId", out var id))
        {
            if (int.TryParse(id, out var parsedId))
            {
                sessionId = parsedId;

                // Charger la session depuis la base de données
                using var context = await DbContextFactory.CreateDbContextAsync();
                // Charger la session et ses cours associés
                session = await context.Sessions
                    .Include(s => s.Courses)
                    .FirstOrDefaultAsync(s => s.Id == sessionId);

                // Charger la liste des cours (sécurité si la navigation n'est pas chargée)
                if (session?.Courses != null)
                    coursList = session.Courses.ToList();
            }
        }
    }
}

