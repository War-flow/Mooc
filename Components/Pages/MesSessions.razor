@page "/mes-sessions"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Mooc.Data
@using Microsoft.EntityFrameworkCore
@using Mooc.Services
@using Mooc.Components.Shared
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ISessionCompletionService SessionCompletionService
@inject CourseStateService CourseStateService
@attribute [Authorize(Policy = "VoirCours")]
@implements IDisposable

<PageTitle>Mes Sessions</PageTitle>

<!-- En-tête de page avec design moderne amélioré -->
<div class="page-header header-waves ocean header-animated">
    <div class="container">
        <div class="row align-items-center">
            <div class="col">
                <i class="bi bi-calendar3 header-icon morphing"></i>
                <h1 class="page-title typewriter">Mes Formations</h1>
                <p class="page-subtitle">Retrouvez vos sessions de formation en cours</p>
                @if (enrolledSessions != null && enrolledSessions.Any())
                {
                    <div class="header-stats">
                        <span class="stat-badge bouncing">
                            <i class="bi bi-calendar-check me-2"></i>
                            @enrolledSessions.Count session @(enrolledSessions.Count > 1 ? "s" : "")
                        </span>
                        @{
                            var completedSessions = enrolledSessions.Count(s => sessionCompletionInfos.GetValueOrDefault(s.Id)?.IsCompleted == true);
                            var activeSessions = enrolledSessions.Count(s => IsSessionActive(s));
                        }
                        @if (completedSessions > 0)
                        {
                            <span class="stat-badge bouncing" style="animation-delay: 0.2s;">
                                <i class="bi bi-check-circle me-2"> </i>
                                @completedSessions terminée @(completedSessions > 1 ? "s" : "")
                            </span>
                        }
                        @if (activeSessions > 0)
                        {
                            <span class="stat-badge bouncing" style="animation-delay: 0.4s;">
                                <i class="bi bi-play-circle me-2"> </i>
                                @activeSessions en cours
                            </span>
                        }
                        @* **NOUVEAU**: Affichage du score total *@
                        @if (totalEarnedPoints > 0)
                        {
                            <span class="stat-badge bouncing" style="animation-delay: 0.6s;">
                                <i class="bi bi-trophy me-2"></i>
                                @totalEarnedPoints pts
                            </span>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <!-- Notifications en haut de page -->
    @if (sessionNotifications.Any())
    {
        @foreach (var notification in sessionNotifications)
        {
            <div class="alert alert-@notification.Type alert-dismissible fade show" role="alert">
                <i class="bi bi-@notification.Icon me-2"></i>
                <strong>@notification.Title</strong> @notification.Message
                <button type="button" class="btn-close" @onclick="() => DismissNotification(notification.Id)"></button>
            </div>
        }
    }

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-3">Chargement de vos sessions...</p>
        </div>
    }
    else if (enrolledSessions != null && enrolledSessions.Any())
    {
        <div class="sessions-grid">
            @foreach (var session in enrolledSessions)
            {
                var completionInfo = sessionCompletionInfos.GetValueOrDefault(session.Id);
                var sessionScore = sessionScores.GetValueOrDefault(session.Id);
                <div class="session-card @(GetSessionBorderClass(session, completionInfo))">
                    <div class="session-image">
                        @if (!string.IsNullOrEmpty(session.Image))
                        {
                            <img src="@session.Image" alt="@session.Title" />
                        }
                        else
                        {
                            <div class="session-image-placeholder">
                                <i class="bi bi-image"></i>
                            </div>
                        }
                        <div class="session-status">
                            @if (completionInfo?.IsCompleted == true)
                            {
                                <span class="badge bg-success">
                                    <i class="bi bi-check-circle-fill me-1"></i>Terminée
                                </span>
                            }
                            else if (IsSessionActive(session))
                            {
                                <span class="badge bg-primary">
                                    <i class="bi bi-play-circle me-1"></i>En cours
                                </span>
                                @* **NOUVEAU** : Badge jours restants pour session active *@
                                {
                                    var daysRemaining = (session.EndDate - DateTime.Now).Days;
                                    @if (daysRemaining > 0 && daysRemaining < 14)
                                    {
                                        <span class="badge bg-warning text-dark mt-1">
                                            <i class="bi bi-clock me-1"></i>@daysRemaining j restant@(daysRemaining > 1 ? "s" : "")
                                        </span>
                                    }
                                }
                            }
                            else if (IsSessionUpcoming(session))
                            {
                                <span class="badge bg-warning">
                                    <i class="bi bi-hourglass me-1"></i>À venir
                                </span>
                                @* **NOUVEAU** : Badge jours avant début *@
                                {
                                    var daysUntilStart = (session.StartDate - DateTime.Now).Days;

                                    @if (daysUntilStart > 0)
                                    {
                                        <span class="badge bg-info text-white mt-1">
                                            <i class="bi bi-calendar-event me-1"></i>Dans @daysUntilStart j
                                        </span>
                                    }
                                }

                            }
                            else
                            {
                                <span class="badge bg-secondary">
                                    <i class="bi bi-stop-circle me-1"></i>Expirée
                                </span>
                            }
                        </div>
                        @* **NOUVEAU**: Affichage du score dans l'image *@
                        @if (sessionScore != null && sessionScore.TotalEarnedPoints > 0)
                        {
                            <div class="session-score-overlay">
                                <span class="badge bg-warning">
                                    <i class="bi bi-star-fill me-1"></i>
                                    @sessionScore.TotalEarnedPoints pts
                                </span>
                            </div>
                        }
                    </div>
                    <div class="session-content">
                        <h5 class="session-title">@session.Title</h5>
                        <p class="session-description">@session.Description</p>

                        <!-- **NOUVEAU** : Affichage du score détaillé -->
                        @if (sessionScore != null && (sessionScore.TotalEarnedPoints > 0 || sessionScore.TotalPossiblePoints > 0))
                        {
                            <div class="score-info mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <small class="text-muted">Score obtenu</small>
                                    <small class="fw-bold">@sessionScore.TotalEarnedPoints/@sessionScore.TotalPossiblePoints points</small>
                                </div>
                                <div class="progress mb-2" style="height: 6px;">
                                    <div class="progress-bar bg-warning"
                                         role="progressbar"
                                         style="width: @(sessionScore.ScorePercentage)%"
                                         aria-valuenow="@sessionScore.ScorePercentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">@sessionScore.ScorePercentage.ToString("F1")%</small>
                                </div>
                            </div>
                        }

                        <!-- **MODIFIÉ** : Affichage du progrès de completion -->
                        @if (completionInfo != null)
                        {
                            <div class="completion-info mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <small class="text-muted">Progression</small>
                                    <small class="text-muted">@completionInfo.CompletedCoursesCount/@completionInfo.TotalCoursesCount cours</small>
                                </div>
                                <div class="progress" style="height: 6px;">
                                    <div class="progress-bar @(completionInfo.IsCompleted ? "bg-success" : "bg-primary")"
                                         role="progressbar"
                                         style="width: @(completionInfo.CompletionPercentage)%"
                                         aria-valuenow="@completionInfo.CompletionPercentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                @if (completionInfo.IsCompleted && completionInfo.CompletionDate.HasValue)
                                {
                                    <small class="text-success">
                                        <i class="bi bi-check-circle me-1"></i>
                                        Terminée le @completionInfo.CompletionDate.Value.ToString("dd/MM/yyyy")
                                    </small>
                                }
                            </div>
                        }

                        <div class="session-meta">
                            <div>
                                <i class="bi bi-calendar3 me-1"></i>
                                <small>Du @session.StartDate.ToString("dd/MM/yyyy") au @session.EndDate.ToString("dd/MM/yyyy")</small>
                            </div>
                            <div>
                                <i class="bi bi-clock me-1"></i>
                                <small>@session.Work heures</small>
                            </div>
                            @* **NOUVEAU** : Affichage des jours restants dans les métadonnées *@
                            @if (IsSessionActive(session))
                            {
                                
                                {

                                    var daysRemaining = (session.EndDate - DateTime.Now).Days;
                                    @if (daysRemaining < 14)
                                    {
                                    <div class="text-danger">
                                        <i class="bi bi-exclamation-triangle me-1"></i>
                                        <small><strong>Se termine dans @daysRemaining jour@(daysRemaining > 1 ? "s" : "")</strong></small>
                                    </div>
                                    }
                                }

                            }
                            else if (IsSessionUpcoming(session))
                            {
                                {
                                    var daysUntilStart = (session.StartDate - DateTime.Now).Days;
                                    <div class="text-info">
                                        <i class="bi bi-hourglass-split me-1"></i>
                                        <small>Commence dans @daysUntilStart jour@(daysUntilStart > 1 ? "s" : "")</small>
                                    </div>
                                }
   
                            }
                        </div>
                    </div>
                    <div class="session-actions">
                        <div class="btn-group w-100" role="group">
                            @if (completionInfo?.IsCompleted == true)
                            {
                                <a href="/session/@session.Id" class="btn btn-success flex-fill">
                                    <i class="bi bi-eye me-2"></i> Revoir les cours
                                </a>
                            }
                            else if (IsSessionActive(session))
                            {
                                <a href="/session/@session.Id" class="btn btn-primary flex-fill">
                                    <i class="bi bi-play-circle me-2"></i> Continuer
                                </a>
                            }
                            else if (!IsSessionEnded(session))
                            {
                                <a href="/session/@session.Id" class="btn btn-outline-primary flex-fill">
                                    <i class="bi bi-eye me-2"></i> Voir la session
                                </a>
                            }

                            @if (AllowUnsubscribeFromEndedSessions || !IsSessionEnded(session))
                            {
                                <button class="btn btn-outline-danger flex-fill" @onclick="() => ShowUnsubscribeModal(session.Id)" disabled="@isProcessing">
                                    <i class="bi bi-x-circle me-2"></i> Se désinscrire
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @* **NOUVEAU**: Résumé global des scores *@
        @if (enrolledSessions.Any() && (totalEarnedPoints > 0 || totalPossiblePoints > 0))
        {
            <div class="row mt-4">
                <div class="col-md-8 mx-auto">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="bi bi-trophy me-2"></i>
                                Résumé de vos performances
                            </h6>
                            <div class="row">
                                <div class="col-md-4 text-center">
                                    <div class="fs-3 fw-bold text-primary">@totalEarnedPoints</div>
                                    <small class="text-muted">Points gagnés</small>
                                </div>
                                <div class="col-md-4 text-center">
                                    <div class="fs-3 fw-bold text-info">@totalPossiblePoints</div>
                                    <small class="text-muted">Points possibles</small>
                                </div>
                                <div class="col-md-4 text-center">
                                    <div class="fs-3 fw-bold text-success">@overallScorePercentage.ToString("F1")%</div>
                                    <small class="text-muted">Score global</small>
                                </div>
                            </div>
                            <div class="progress mt-3" style="height: 10px;">
                                <div class="progress-bar bg-gradient"
                                     role="progressbar"
                                     style="width: @(overallScorePercentage)%; background: linear-gradient(45deg, #28a745, #ffc107);"
                                     aria-valuenow="@overallScorePercentage"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="bi bi-inbox fs-1"></i>
            </div>
            <h3 class="empty-state-title">Aucune session</h3>
            <p class="empty-state-text">Vous n'êtes inscrit à aucune session pour le moment.</p>
            <a href="/" class="btn btn-primary btn-lg">Découvrir les sessions disponibles</a>
        </div>
    }
</div>

@if (showUnsubscribeModal)
{
    <div class="modal fade show modal-backdrop-custom" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-modern">
                <div class="modal-header modal-header-danger">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Confirmer la désinscription
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseUnsubscribeModal"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="delete-icon mb-3">
                        <i class="bi bi-trash3"></i>
                    </div>
                    <p class="lead">Êtes-vous sûr de vouloir vous désinscrire de cette session ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseUnsubscribeModal">
                        <i class="bi bi-x-circle me-1"></i>
                        Annuler
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="UnsubscribeFromSession" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-trash me-1"></i>
                        Confirmer
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<NotificationToast @ref="notificationToast" />

@code {
    private List<Session>? enrolledSessions;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string? currentUserId;
    private bool showUnsubscribeModal = false;
    private int sessionToUnsubscribe = 0;
    private Timer? refreshTimer;
    private NotificationToast notificationToast = null!;

    // **NOUVEAU** : Dictionnaire pour stocker les informations de completion
    private Dictionary<int, SessionCompletionInfo> sessionCompletionInfos = new();

    // **NOUVEAU** : Dictionnaires pour les scores
    private Dictionary<int, SessionScoreInfo> sessionScores = new();
    private int totalEarnedPoints = 0;
    private int totalPossiblePoints = 0;
    private double overallScorePercentage = 0;

    // Paramètre pour contrôler si on permet la désinscription des sessions terminées
    private bool AllowUnsubscribeFromEndedSessions = true;

    // Liste des notifications à afficher
    private List<SessionNotification> sessionNotifications = new();

    // Ajouter cette propriété pour suivre les notifications affichées
    private HashSet<string> dismissedNotifications = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCurrentUser();
            await LoadEnrolledSessions();
            await LoadSessionCompletionInfos();
            await LoadSessionScores(); // **NOUVEAU**
            await LoadDismissedNotifications(); // **NOUVEAU**
            await CheckForSessionNotifications();

            // Actualiser automatiquement toutes les 2 minutes
            refreshTimer = new Timer(async _ => await RefreshSessions(), null, TimeSpan.FromMinutes(2), TimeSpan.FromMinutes(2));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'initialisation : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private async Task RefreshSessions()
    {
        var previousCount = enrolledSessions?.Count ?? 0;
        await LoadEnrolledSessions();
        await LoadSessionCompletionInfos(); // **NOUVEAU**
        await LoadSessionScores(); // **NOUVEAU**
        await CheckForSessionNotifications();
        await InvokeAsync(StateHasChanged);
    }

    // **MÉTHODE CORRIGÉE**: Charger les scores des sessions avec le bon calcul
    private async Task LoadSessionScores()
    {
        if (string.IsNullOrEmpty(currentUserId) || enrolledSessions == null)
        {
            sessionScores.Clear();
            totalEarnedPoints = 0;
            totalPossiblePoints = 0;
            overallScorePercentage = 0;
            return;
        }

        try
        {
            sessionScores.Clear();
            totalEarnedPoints = 0;
            totalPossiblePoints = 0;

            using var context = await DbContextFactory.CreateDbContextAsync();

            foreach (var session in enrolledSessions)
            {
                var courses = await context.Courses
                    .Where(c => c.SessionId == session.Id)
                    .ToListAsync();

                var sessionInfo = new SessionScoreInfo
                {
                    SessionId = session.Id,
                    TotalEarnedPoints = 0,
                    TotalPossiblePoints = 0,
                    ScorePercentage = 0
                };

                foreach (var course in courses)
                {
                    try
                    {
                        // **CORRECTION**: Utiliser directement CalculateCourseScoreAsync
                        var courseScore = await CourseStateService.CalculateCourseScoreAsync(course.Id, currentUserId);
                        sessionInfo.TotalEarnedPoints += courseScore.TotalEarnedPoints;
                        sessionInfo.TotalPossiblePoints += courseScore.TotalPossiblePoints;
                        
                        Console.WriteLine($"✅ Session {session.Title} - Cours {course.Title}: {courseScore.TotalEarnedPoints}/{courseScore.TotalPossiblePoints} pts");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"❌ Erreur score cours {course.Id}: {ex.Message}");
                    }
                }

                // Calculer le pourcentage de la session
                sessionInfo.ScorePercentage = sessionInfo.TotalPossiblePoints > 0
                    ? (double)sessionInfo.TotalEarnedPoints / sessionInfo.TotalPossiblePoints * 100
                    : 0;

                sessionScores[session.Id] = sessionInfo;
                totalEarnedPoints += sessionInfo.TotalEarnedPoints;
                totalPossiblePoints += sessionInfo.TotalPossiblePoints;
            }

            // Calculer le pourcentage global
            overallScorePercentage = totalPossiblePoints > 0
                ? (double)totalEarnedPoints / totalPossiblePoints * 100
                : 0;
                
            Console.WriteLine($"🏆 Total global: {totalEarnedPoints}/{totalPossiblePoints} pts ({overallScorePercentage:F1}%)");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erreur lors du chargement des scores de session : {ex.Message}");
            sessionScores.Clear();
            totalEarnedPoints = 0;
            totalPossiblePoints = 0;
            overallScorePercentage = 0;
        }
    }

    // **NOUVELLES MÉTHODES** : Helper pour l'affichage des scores
    private string GetScoreBadgeClass(double scorePercentage)
    {
        if (scorePercentage >= 80) return "bg-success";
        if (scorePercentage >= 60) return "bg-warning";
        if (scorePercentage >= 40) return "bg-info";
        return "bg-danger";
    }

    // **NOUVELLE CLASSE** : Information de score pour une session
    public class SessionScoreInfo
    {
        public int SessionId { get; set; }
        public int TotalEarnedPoints { get; set; }
        public int TotalPossiblePoints { get; set; }
        public double ScorePercentage { get; set; }
    }

    // **NOUVELLE MÉTHODE** : Charger les informations de completion
    private async Task LoadSessionCompletionInfos()
    {
        if (string.IsNullOrEmpty(currentUserId) || enrolledSessions == null)
        {
            sessionCompletionInfos.Clear();
            return;
        }

        try
        {
            sessionCompletionInfos = await SessionCompletionService.GetUserSessionsCompletionInfoAsync(currentUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des informations de completion : {ex.Message}");
            sessionCompletionInfos.Clear();
        }
    }

    // **NOUVELLE MÉTHODE** : Charger les notifications dismissées depuis le localStorage
    private async Task LoadDismissedNotifications()
    {
        try
        {
            var dismissedJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dismissedNotifications");
            if (!string.IsNullOrEmpty(dismissedJson))
            {
                var dismissed = System.Text.Json.JsonSerializer.Deserialize<List<string>>(dismissedJson);
                dismissedNotifications = dismissed?.ToHashSet() ?? new HashSet<string>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des notifications dismissées : {ex.Message}");
        }
    }

    // **NOUVELLE MÉTHODE** : Sauvegarder les notifications dismissées dans le localStorage
    private async Task SaveDismissedNotifications()
    {
        try
        {
            var dismissedJson = System.Text.Json.JsonSerializer.Serialize(dismissedNotifications.ToList());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dismissedNotifications", dismissedJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la sauvegarde des notifications dismissées : {ex.Message}");
        }
    }

    // **NOUVELLE MÉTHODE** : Obtenir la classe CSS pour la bordure selon le statut
    private string GetSessionBorderClass(Session session, SessionCompletionInfo? completionInfo)
    {
        if (completionInfo?.IsCompleted == true)
            return "border-success";
        if (IsSessionEnded(session))
            return "border-secondary";
        if (IsSessionActive(session))
            return "border-primary";
        return "border-warning";
    }

    private async Task CheckForSessionNotifications()
    {
        if (enrolledSessions == null) return;

        sessionNotifications.Clear();
        var now = DateTime.Now;

        foreach (var session in enrolledSessions)
        {
            var completionInfo = sessionCompletionInfos.GetValueOrDefault(session.Id);

            // **MODIFIÉ** : Vérifier si la notification n'a pas déjà été dismissée
            if (completionInfo?.IsCompleted == true && completionInfo.CompletionDate.HasValue)
            {
                var daysSinceCompletion = (now - completionInfo.CompletionDate.Value).TotalDays;
                if (daysSinceCompletion <= 3) // Dans les 3 derniers jours
                {
                    var completionNotificationId = $"completed-{session.Id}";
                    if (!dismissedNotifications.Contains(completionNotificationId))
                    {
                        sessionNotifications.Add(new SessionNotification
                        {
                            Id = completionNotificationId,
                            Title = "🎉 Félicitations !",
                            Message = $"Vous avez terminé la session '{session.Title}' avec succès !",
                            Type = "success",
                            Icon = "trophy"
                        });
                    }

                    if (completionInfo.HasCertificate)
                    {
                        var certificateNotificationId = $"certificate-{session.Id}";
                        if (!dismissedNotifications.Contains(certificateNotificationId))
                        {
                            sessionNotifications.Add(new SessionNotification
                            {
                                Id = certificateNotificationId,
                                Title = "🏆 Certificat disponible",
                                Message = $"Votre certificat pour '{session.Title}' est prêt à être téléchargé.",
                                Type = "info",
                                Icon = "award"
                            });
                        }
                    }
                }
            }

            // Session se terminant dans les 24h
            if (IsSessionActive(session))
            {
                var timeRemaining = session.EndDate - now;

                if (timeRemaining.TotalHours <= 1 && timeRemaining.TotalMinutes > 0)
                {
                    var ending1hNotificationId = $"ending-1h-{session.Id}";
                    if (!dismissedNotifications.Contains(ending1hNotificationId))
                    {
                        sessionNotifications.Add(new SessionNotification
                        {
                            Id = ending1hNotificationId,
                            Title = "⚠️ Session se termine bientôt !",
                            Message = $"La session '{session.Title}' se termine dans moins d'une heure.",
                            Type = "danger",
                            Icon = "exclamation-triangle-fill"
                        });

                        // Notification toast
                        if (notificationToast != null)
                        {
                            await notificationToast.ShowNotification(
                                "Session se termine bientôt !",
                                $"'{session.Title}' se termine dans {GetTimeRemainingText(timeRemaining)}",
                                "danger",
                                10000);
                        }
                    }
                }
                else if (timeRemaining.TotalHours <= 24)
                {
                    var ending24hNotificationId = $"ending-24h-{session.Id}";
                    if (!dismissedNotifications.Contains(ending24hNotificationId))
                    {
                        sessionNotifications.Add(new SessionNotification
                        {
                            Id = ending24hNotificationId,
                            Title = "🔔 Session se termine demain",
                            Message = $"La session '{session.Title}' se termine le {session.EndDate:dd/MM/yyyy à HH:mm}.",
                            Type = "warning",
                            Icon = "clock"
                        });
                    }
                }
            }

            // **MODIFIÉ** : Session vient de se terminer
            if (IsSessionEnded(session) && (now - session.EndDate).TotalHours <= 24)
            {
                var endedNotificationId = $"ended-{session.Id}";
                if (!dismissedNotifications.Contains(endedNotificationId))
                {
                    sessionNotifications.Add(new SessionNotification
                    {
                        Id = endedNotificationId,
                        Title = "📋 Session terminée",
                        Message = $"La session '{session.Title}' s'est terminée. Vous pouvez toujours consulter les cours.",
                        Type = "info",
                        Icon = "info-circle"
                    });
                }
            }
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                currentUserId = user?.Id;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement de l'utilisateur : {ex.Message}");
        }
    }

    private async Task LoadEnrolledSessions()
    {
        if (string.IsNullOrEmpty(currentUserId))
        {
            enrolledSessions = new List<Session>();
            return;
        }

        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var user = await context.Users
                .Include(u => u.EnrolledSessions)
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.Id == currentUserId);

            enrolledSessions = user?.EnrolledSessions?.ToList() ?? new List<Session>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des sessions : {ex.Message}");
            enrolledSessions = new List<Session>();
        }
    }

    private bool IsSessionActive(Session session)
    {
        var now = DateTime.Now;
        return now >= session.StartDate && now <= session.EndDate && session.IsActive;
    }

    private bool IsSessionUpcoming(Session session)
    {
        return DateTime.Now < session.StartDate;
    }

    private bool IsSessionEnded(Session session)
    {
        return DateTime.Now > session.EndDate;
    }

    private void ShowUnsubscribeModal(int sessionId)
    {
        if (isProcessing) return;

        sessionToUnsubscribe = sessionId;
        showUnsubscribeModal = true;
    }

    private void CloseUnsubscribeModal()
    {
        showUnsubscribeModal = false;
        sessionToUnsubscribe = 0;
    }

    private async Task UnsubscribeFromSession()
    {
        if (string.IsNullOrEmpty(currentUserId) || sessionToUnsubscribe == 0 || isProcessing)
            return;

        isProcessing = true;

        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var user = await context.Users
                .Include(u => u.EnrolledSessions)
                .FirstOrDefaultAsync(u => u.Id == currentUserId);

            if (user?.EnrolledSessions != null)
            {
                var sessionToRemove = user.EnrolledSessions.FirstOrDefault(s => s.Id == sessionToUnsubscribe);
                if (sessionToRemove != null)
                {
                    user.EnrolledSessions.Remove(sessionToRemove);
                    await context.SaveChangesAsync();

                    // Recharger les sessions après la désinscription
                    await LoadEnrolledSessions();
                    await LoadSessionCompletionInfos(); // **NOUVEAU**
                    await LoadSessionScores(); // **NOUVEAU**
                    StateHasChanged();

                    // Notification de succès
                    if (notificationToast != null)
                    {
                        await notificationToast.ShowNotification(
                            "Désinscription réussie",
                            $"Vous avez été désinscrit de la session '{sessionToRemove.Title}'.",
                            "success",
                            5000);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la désinscription : {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            showUnsubscribeModal = false;
            sessionToUnsubscribe = 0;
        }
    }

    // **MODIFIÉE** : Méthode DismissNotification mise à jour
    private async Task DismissNotification(string notificationId)
    {
        var notification = sessionNotifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null)
        {
            sessionNotifications.Remove(notification);
            dismissedNotifications.Add(notificationId);
            await SaveDismissedNotifications();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Retourne une chaîne lisible pour le temps restant (jours, heures, minutes).
    /// </summary>
    private string GetTimeRemainingText(TimeSpan timeSpan)
    {
        if (timeSpan.TotalMinutes < 1)
            return "moins d'une minute";
        if (timeSpan.TotalHours < 1)
            return $"{(int)timeSpan.TotalMinutes} minute(s)";
        if (timeSpan.TotalDays < 1)
            return $"{(int)timeSpan.TotalHours} heure(s) et {timeSpan.Minutes} minute(s)";
        return $"{(int)timeSpan.TotalDays} jour(s), {timeSpan.Hours} heure(s)";
    }

    // Ajoutez cette classe à la fin du fichier ou dans un fichier partagé approprié
    public class SessionNotification
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string Type { get; set; } = "info";
        public string Icon { get; set; } = "info-circle";
    }
}