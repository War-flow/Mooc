@if (HasError)
{
    <div class="alert alert-danger" role="alert">
        <h5 class="alert-heading">
            <i class="bi bi-exclamation-triangle me-2"></i>
            Une erreur s'est produite
        </h5>
        <p>@ErrorMessage</p>
        <hr>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-danger btn-sm" @onclick="Retry">
                <i class="bi bi-arrow-clockwise me-1"></i>
                Réessayer
            </button>
            <button class="btn btn-outline-secondary btn-sm" @onclick="Reset">
                <i class="bi bi-x-circle me-1"></i>
                Effacer
            </button>
        </div>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnRetry { get; set; }

    public bool HasError { get; private set; }
    public string? ErrorMessage { get; private set; }

    public void SetError(string message)
    {
        HasError = true;
        ErrorMessage = message;
        StateHasChanged();
    }

    public void SetError(Exception exception)
    {
        SetError($"Erreur: {exception.Message}");
    }

    private async Task Retry()
    {
        Reset();
        if (OnRetry.HasDelegate)
            await OnRetry.InvokeAsync();
    }

    public void Reset()
    {
        HasError = false;
        ErrorMessage = null;
        StateHasChanged();
    }
}