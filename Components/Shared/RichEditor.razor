@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Mooc.Services
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject FileUploadService FileUploadService

<div class="rich-text-editor">
    @if (ShowToolbar)
    {
        <div class="editor-toolbar">
            <!-- Formatage de texte -->
            <div class="toolbar-group">
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("bold")' title="Gras">
                    <i class="bi bi-type-bold"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("italic")' title="Italique">
                    <i class="bi bi-type-italic"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("underline")' title="Souligné">
                    <i class="bi bi-type-underline"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("strikethrough")' title="Barré">
                    <i class="bi bi-type-strikethrough"></i>
                </button>
            </div>

            <div class="toolbar-separator"></div>

            <!-- Alignement -->
            <div class="toolbar-group">
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("justifyLeft")' title="Aligner à gauche">
                    <i class="bi bi-text-left"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("justifyCenter")' title="Centrer">
                    <i class="bi bi-text-center"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("justifyRight")' title="Aligner à droite">
                    <i class="bi bi-text-right"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("justifyFull")' title="Justifier">
                    <i class="bi bi-justify"></i>
                </button>
            </div>

            <div class="toolbar-separator"></div>

            <!-- Listes -->
            <div class="toolbar-group">
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("insertUnorderedList")' title="Liste à puces">
                    <i class="bi bi-list-ul"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("insertOrderedList")' title="Liste numérotée">
                    <i class="bi bi-list-ol"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("outdent")' title="Diminuer le retrait">
                    <i class="bi bi-text-indent-right"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("indent")' title="Augmenter le retrait">
                    <i class="bi bi-text-indent-left"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick="InsertTable" title="Ajouter un tableau">
                    <i class="bi bi-table"></i>
                </button>
            </div>

            <div class="toolbar-separator"></div>

            <!-- Titres avec sélection par défaut améliorée -->
            <div class="toolbar-group">
                <select class="toolbar-select" @onchange="OnHeadingChange" value="@currentHeading">
                    <option value="">Format normal</option>
                    <option value="h6">12</option>
                    <option value="h5">14</option>
                    <option value="h4">16</option>
                    <option value="h3">18</option>
                    <option value="h2">20</option>
                    <option value="h1">24</option>
                </select>
            </div>

            <div class="toolbar-separator"></div>

            <!-- Couleurs -->
            <div class="toolbar-group">
                <div class="color-picker-wrapper">
                    <button type="button" class="toolbar-btn color-btn" title="Couleur du texte">
                        <i class="bi bi-fonts"></i>
                        <input type="color" class="color-input" @onchange="OnTextColorChange" value="#000000" />
                    </button>
                    <button type="button" class="toolbar-btn color-btn" title="Couleur de fond">
                        <i class="bi bi-paint-bucket"></i>
                        <input type="color" class="color-input" @onchange="OnBackgroundColorChange" value="#ffff00" />
                    </button>
                </div>
            </div>

            <div class="toolbar-separator"></div>

            <!-- Liens et autres -->
            <div class="toolbar-group">
                <button type="button" class="toolbar-btn" @onclick="InsertLink" title="Insérer un lien">
                    <i class="bi bi-link-45deg"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("unlink")' title="Supprimer le lien">
                    <i class="bi bi-slash-circle"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick="InsertVideo" title="Insérer une vidéo">
                    <i class="bi bi-camera-video"></i>
                </button>
                <InputFile @ref="imageInputComponent" 
                           style="display:none" 
                           OnChange="@OnImageSelected" 
                           accept="image/*" 
                           data-id="@($"upload-{EditorId}")" />
                <button type="button" class="toolbar-btn" @onclick="TriggerImageUpload" title="Télécharger une image" disabled="@isUploading">
                    @if (isImageUploading)
                    {
                        <i class="bi bi-arrow-clockwise spin"></i>
                    }
                    else
                    {
                        <i class="bi bi-upload"></i>
                    }
                </button>

                <InputFile @ref="audioInputComponent" 
                           style="display:none" 
                           OnChange="@OnAudioSelected" 
                           accept="audio/*" 
                           data-id="@($"upload-audio-{EditorId}")" />
                <button type="button" class="toolbar-btn" @onclick="TriggerAudioUpload" title="Ajouter un audio" disabled="@isUploading">
                    @if (isAudioUploading)
                    {
                        <i class="bi bi-arrow-clockwise spin"></i>
                    }
                    else
                    {
                        <i class="bi bi-music-note-beamed"></i>
                    }
                </button>

                <InputFile @ref="fileInputComponent"
                           style="display:none"
                           OnChange="@OnFileSelected"
                           accept=".pdf,.doc,.docx,.txt,.zip,.xlsx,.pptx,.xls,.rar"
                           data-id="@($"upload-file-{EditorId}")" />
                <button type="button" class="toolbar-btn" @onclick="TriggerFileUpload" title="Ajouter un fichier" disabled="@isUploading">
                    @if (isFileUploading)
                    {
                        <i class="bi bi-arrow-clockwise spin"></i>
                    }
                    else
                    {
                        <i class="bi bi-file-earmark-arrow-down"></i>
                    }
                </button>
            </div>

            <div class="toolbar-separator"></div>

            <!-- Actions -->
            <div class="toolbar-group">
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("undo")' title="Annuler">
                    <i class="bi bi-arrow-counterclockwise"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("redo")' title="Refaire">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                <button type="button" class="toolbar-btn" @onclick='() => ExecuteCommand("removeFormat")' title="Supprimer le formatage">
                    <i class="bi bi-eraser"></i>
                </button>
            </div>
        </div>
    }

    <!-- Messages d'erreur et de succès -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-2" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="ClearMessages"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mt-2" role="alert">
            <i class="bi bi-check-circle-fill"></i> @successMessage
            <button type="button" class="btn-close" @onclick="ClearMessages"></button>
        </div>
    }

    <div @ref="editorElement" id="@EditorId" class="rich-editor-content" style="min-height: @(Height)px;"></div>
    
    @if (ShowCharacterCount)
    {
        <small class="text-muted mt-1 d-block">
            @characterCount/@MaxLength caractères
        </small>
    }
</div>

@code {
    private ElementReference editorElement;
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<RichEditor>? dotNetRef;
    private string characterCount = "0";
    private string currentHeading = "";
    
    // États d'upload
    private bool isUploading => isImageUploading || isAudioUploading || isFileUploading;
    private bool isImageUploading = false;
    private bool isAudioUploading = false;
    private bool isFileUploading = false;
    
    // Messages utilisateur
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string EditorId { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public int Height { get; set; } = 200;
    [Parameter] public int MaxLength { get; set; } = 10000;
    [Parameter] public bool ShowCharacterCount { get; set; } = true;
    [Parameter] public bool ShowToolbar { get; set; } = true;
    [Parameter] public string Placeholder { get; set; } = "Commencez à écrire...";
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public EventCallback<string> OnSuccess { get; set; }
    [Parameter] public bool EnableStickyToolbar { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/RichEditor.js");
                dotNetRef = DotNetObjectReference.Create(this);
                
                // Création d'un objet d'options structuré pour éviter les erreurs de sérialisation
                var editorOptions = new EditorOptions
                {
                    Height = Height,
                    Placeholder = Placeholder ?? string.Empty,
                    MaxLength = MaxLength,
                    InitialContent = Value ?? string.Empty,
                    EnableStickyToolbar = EnableStickyToolbar
                };
                
                await jsModule.InvokeVoidAsync("initializeEditor", EditorId, dotNetRef, editorOptions);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur d'initialisation de l'éditeur : {ex.Message}");
                Console.WriteLine($"Erreur JSException : {ex.Message}");
            }
            catch (Exception ex)
            {
                await ShowErrorMessage($"Erreur inattendue : {ex.Message}");
                Console.WriteLine($"Erreur générale : {ex.Message}");
            }
        }
    }

    // Classe pour structurer les options de l'éditeur
    public class EditorOptions
    {
        public int Height { get; set; }
        public string Placeholder { get; set; } = string.Empty;
        public int MaxLength { get; set; }
        public string InitialContent { get; set; } = string.Empty;
        public bool EnableStickyToolbar { get; set; }
    }

    [JSInvokable]
    public async Task OnContentChanged(string content, int length)
    {
        Value = content;
        characterCount = length.ToString();
        await ValueChanged.InvokeAsync(content);
        StateHasChanged();
    }

    private async Task ExecuteCommand(string command)
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("executeCommand", EditorId, command);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de l'exécution de la commande : {ex.Message}");
            }
        }
    }

    private async Task ExecuteCommandWithValue(string command, string value)
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("executeCommandWithValue", EditorId, command, value);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de l'exécution de la commande avec valeur : {ex.Message}");
            }
        }
    }

    private async Task OnHeadingChange(ChangeEventArgs e)
    {
        string value = e.Value?.ToString() ?? "";
        currentHeading = value;
        
        if (!string.IsNullOrEmpty(value))
        {
            await ExecuteCommandWithValue("formatBlock", value);
        }
        else
        {
            await ExecuteCommandWithValue("formatBlock", "div");
        }
    }

    private async Task OnTextColorChange(ChangeEventArgs e)
    {
        string color = e.Value?.ToString() ?? "#000000";
        await ExecuteCommandWithValue("foreColor", color);
    }

    private async Task OnBackgroundColorChange(ChangeEventArgs e)
    {
        string color = e.Value?.ToString() ?? "#ffff00";
        await ExecuteCommandWithValue("backColor", color);
    }

    private async Task InsertLink()
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("insertLink", EditorId);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de l'insertion du lien : {ex.Message}");
            }
        }
    }

    private async Task InsertVideo()
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("insertVideo", EditorId);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de l'insertion de la vidéo : {ex.Message}");
            }
        }
    }
    private async Task InsertTable()
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("insertTable", EditorId);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de l'insertion du tableau : {ex.Message}");
            }
        }
    }

    private InputFile? imageInputComponent;
    private InputFile? audioInputComponent;
    private InputFile? fileInputComponent;

    private async Task TriggerImageUpload()
    {
        if (jsModule != null && !isUploading)
        {
            try
            {
                await jsModule.InvokeVoidAsync("triggerFileInputClick", $"[data-id='upload-{EditorId}']");
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors du déclenchement de l'upload d'image : {ex.Message}");
            }
        }
    }

    private async Task TriggerAudioUpload()
    {
        if (jsModule != null && !isUploading)
        {
            try
            {
                await jsModule.InvokeVoidAsync("triggerFileInputClick", $"[data-id='upload-audio-{EditorId}']");
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors du déclenchement de l'upload d'audio : {ex.Message}");
            }
        }
    }

    private async Task TriggerFileUpload()
    {
        if (jsModule != null && !isUploading)
        {
            try
            {
                await jsModule.InvokeVoidAsync("triggerFileInputClick", $"[data-id='upload-file-{EditorId}']");
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors du déclenchement de l'upload de fichier : {ex.Message}");
            }
        }
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        if (e?.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            
            if (file != null)
            {
                isImageUploading = true;
                ClearMessages();
                StateHasChanged();

                try
                {
                    var uploadResult = await FileUploadService.UploadImageAsync(file);

                    if (!string.IsNullOrEmpty(uploadResult))
                    {
                        if (jsModule != null)
                        {
                            await jsModule.InvokeVoidAsync("insertImageFromUrl", EditorId, uploadResult);
                            await ShowSuccessMessage($"Image '{file.Name}' ajoutée avec succès");
                        }
                    }
                    else
                    {
                        await ShowErrorMessage("Erreur lors de l'upload de l'image");
                    }
                }
                catch (Exception ex)
                {
                    await ShowErrorMessage($"Erreur : {ex.Message}");
                }
                finally
                {
                    isImageUploading = false;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task OnAudioSelected(InputFileChangeEventArgs e)
    {
        if (e?.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            
            if (file != null)
            {
                isAudioUploading = true;
                ClearMessages();
                StateHasChanged();

                try
                {
                    var uploadResult = await FileUploadService.UploadAudioAsync(file);

                    if (!string.IsNullOrEmpty(uploadResult))
                    {
                        if (jsModule != null)
                        {
                            await jsModule.InvokeVoidAsync("insertAudioFromUrl", EditorId, uploadResult);
                            await ShowSuccessMessage($"Audio '{file.Name}' ajouté avec succès");
                        }
                    }
                    else
                    {
                        await ShowErrorMessage("Erreur lors de l'upload de l'audio");
                    }
                }
                catch (Exception ex)
                {
                    await ShowErrorMessage($"Erreur : {ex.Message}");
                }
                finally
                {
                    isAudioUploading = false;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e?.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();

            if (file != null)
            {
                isFileUploading = true;
                ClearMessages();
                StateHasChanged();

                try
                {
                    var uploadResult = await FileUploadService.UploadFileAsync(file);

                    if (!string.IsNullOrEmpty(uploadResult))
                    {
                        if (jsModule != null)
                        {
                            await jsModule.InvokeVoidAsync("insertFileFromUrl", EditorId, uploadResult, file.Name);
                            await ShowSuccessMessage($"Fichier '{file.Name}' ajouté avec succès");
                        }
                    }
                    else
                    {
                        await ShowErrorMessage("Erreur lors de l'upload du fichier");
                    }
                }
                catch (Exception ex)
                {
                    await ShowErrorMessage($"Erreur : {ex.Message}");
                }
                finally
                {
                    isFileUploading = false;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        
        if (OnError.HasDelegate)
        {
            await OnError.InvokeAsync(message);
        }
        
        StateHasChanged();
        
        // Auto-clear après 5 secondes
        _ = Task.Delay(5000).ContinueWith(_ => 
        {
            InvokeAsync(() =>
            {
                errorMessage = string.Empty;
                StateHasChanged();
            });
        });
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        
        if (OnSuccess.HasDelegate)
        {
            await OnSuccess.InvokeAsync(message);
        }
        
        StateHasChanged();
        
        // Auto-clear après 3 secondes
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            InvokeAsync(() =>
            {
                successMessage = string.Empty;
                StateHasChanged();
            });
        });
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
    }

    public async Task SetContent(string content)
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("setContent", EditorId, content);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de la définition du contenu : {ex.Message}");
            }
        }
    }

    public async Task<string> GetContent()
    {
        if (jsModule != null)
        {
            try
            {
                return await jsModule.InvokeAsync<string>("getContent", EditorId);
            }
            catch (JSException ex)
            {
                await ShowErrorMessage($"Erreur lors de la récupération du contenu : {ex.Message}");
                return string.Empty;
            }
        }
        return string.Empty;
    }

    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("destroyEditor", EditorId);
                await jsModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Circuit is already disconnected, safe to ignore
            }
            catch (JSException)
            {
                // Ignore JS exceptions during disposal
            }
        }
        dotNetRef?.Dispose();
    }
}