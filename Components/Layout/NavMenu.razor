@implements IDisposable

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity
@using Mooc.Data
@using Mooc.Services
@inject IUserNavigationService UserNavigationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-1 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">
            <img src="images/logo.png" alt="logo" class="navbar-logo">
            POINT COM
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Accueil
            </NavLink>
        </div>
        
        @if (isLoading)
        {
            <div class="nav-item px-3">
                <span class="nav-link">
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Chargement...
                </span>
            </div>
        }
        else
        {
            <AuthorizeView>
                <Authorized>
                    @if (currentUser != null)
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="@GetUserProfileUrl()">
                                <span class="bi bi-person-circle-nav-menu" aria-hidden="true"></span> @GetUserDisplayName()
                            </NavLink>
                        </div>
                    }
                    
                    <AuthorizeView Policy="GérerUtilisateurs" Context="userManagementContext">
                        <Authorized>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="/manager/user">
                                    <span aria-hidden="true" class="bi bi-person-gear-nav-menu"></span> Liste des utilisateurs
                                </NavLink>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                    
                    <AuthorizeView Policy="GestionFormation" Context="trainingManagementContext">
                        <Authorized>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="/manager/session">
                                    <span aria-hidden="true" class="bi bi-easel2-nav-menu"></span> Liste des sessions
                                </NavLink>
                            </div>
                        </Authorized>
                    </AuthorizeView>

                    <AuthorizeView Policy="VoirCours" Context="courseViewContext">
                        <Authorized>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="/mes-sessions">
                                    <span aria-hidden="true" class="bi bi-mortarboard-nav-menu"></span> Mes Formations
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="/certification">
                                    <span aria-hidden="true" class="bi bi-award-fill-nav-menu"></span> Mes Certifications
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="/trombinoscope">
                                    <span aria-hidden="true" class="bi bi-grid-1x2-nav-menu"></span> Trombinoscope
                                </NavLink>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/trombinoscope">
                            <span aria-hidden="true" class="bi bi-grid-1x2-nav-menu"></span> FAQ
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="nav-link btn-logout">
                                <span aria-hidden="true" class="bi bi-box-arrow-in-left-nav-menu"></span> Déconnexion
                            </button>
                        </form>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/FAQ">
                            <span aria-hidden="true" class="bi bi-grid-1x2-nav-menu"></span> FAQ
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/compte/connexion">
                            <span aria-hidden="true" class="bi bi-box-arrow-in-right-nav-menu"></span> Connexion
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        }
    </nav>
</div>

@code {
    private string? currentUrl;
    private ApplicationUser? currentUser; // Changement du type de UserNavigationService à ApplicationUser?
    private string? userRole;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            NavigationManager.LocationChanged += OnLocationChanged;
            currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

            await LoadUserDataAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && !string.IsNullOrEmpty(user.Identity.Name))
        {
            (currentUser, userRole) = await UserNavigationService.GetUserDataAsync(user.Identity.Name);
        }
    }

    private string GetUserProfileUrl()
    {
        return userRole == "Admin" ? "/Account/Manage" : "Account/Manage";
    }

    private string GetUserDisplayName()
    {
        if (currentUser == null) return "Utilisateur";
        
        return userRole == "Admin" || userRole == "Formateur"
            ? $"{currentUser.LastName} {currentUser.FirstName}" 
            : currentUser.Pseudo ?? currentUser.UserName ?? "Utilisateur";
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

