@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Mooc.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Connexion</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2 class="auth-title">Se connecter</h2>
                <ValidationSummary class="text-danger validation-summary" role="alert" />
                
                <div class="form-floating">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Votre email" />
                    <label for="Input.Email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                
                <div class="form-floating">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Votre mot de passe" />
                    <label for="Input.Password">Mot de passe</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                
                <div class="checkbox-container">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label>Rester connecté</label>
                </div>
                
                <button type="submit" class="w-100 btn btn-auth">Se connecter</button>
                
                <div class="auth-links">
                    <a class="auth-link" href="Account/ForgotPassword">Mot de passe oublié ?</a>
                    <br>
                    <a class="auth-link" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Créer un compte</a>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SignInManager.IsSignedIn(HttpContext.User))
        {
            RedirectManager.RedirectTo("/");
            return;
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }
    
    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Email ou mot de passe incorrect";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "L'email est requis")]
        [EmailAddress(ErrorMessage = "Format d'email invalide")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Le mot de passe est requis")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Rester connecté")]
        public bool RememberMe { get; set; }
    }
}
