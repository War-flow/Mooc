@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Mooc.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirmation d'inscription</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <h2 class="auth-title">Confirmation d'inscription</h2>
        
        <StatusMessage Message="@statusMessage" />

        <div class="text-center">
            <div class="mb-4">
                <i class="fas fa-envelope-circle-check fa-4x text-primary"></i>
            </div>
            
            <h4 class="mb-3">Vérifiez votre e-mail</h4>
            
            <p class="text-muted mb-4">
                Un email de confirmation a été envoyé à <strong>@Email</strong>.
                <br />
                Veuillez cliquer sur le lien dans l'email pour activer votre compte.
            </p>
            
            <div class="alert alert-info" role="alert">
                <strong>Important :</strong> Vous devez confirmer votre adresse e-mail avant de pouvoir vous connecter.
            </div>
            
            <div class="auth-links">
                <p class="mb-3">Vous n'avez pas reçu l'email ?</p>
                <a href="/Account/ResendEmailConfirmation" class="btn btn-outline-primary">
                    Renvoyer l'email de confirmation
                </a>
                <br />
                <a href="/Account/Login" class="auth-link mt-3 d-inline-block">
                    Retour à la connexion
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("Account/Login");
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Erreur : utilisateur introuvable.";
            return;
        }

        // Vérifier si l'email est déjà confirmé
        if (user.EmailConfirmed)
        {
            statusMessage = "Votre email est déjà confirmé. Vous pouvez vous connecter.";
        }
    }
}
