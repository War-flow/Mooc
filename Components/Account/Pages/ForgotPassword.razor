@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Mooc.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<ForgotPassword> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Mot de passe oublié ?</PageTitle>

<h1>Mot de passe oublié ?</h1>
<h2>Entrez votre email.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true"/>
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <text> Envoi en cours...</text>
                }
                else
                {
                    <text>Réinitialiser le mot de passe</text>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private bool isProcessing = false;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        isProcessing = true;
        try
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
            {
                // Don't reveal that the user does not exist or is not confirmed
                Logger.LogWarning("Tentative de réinitialisation de mot de passe pour un email inexistant ou non confirmé: {Email}", Input.Email);
                RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
                return;
            }

            try
            {
                // For more information on how to enable account confirmation and password reset please
                // visit https://go.microsoft.com/fwlink/?LinkID=532713
                var code = await UserManager.GeneratePasswordResetTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
                    new Dictionary<string, object?> { ["code"] = code });

                await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
                Logger.LogInformation("Email de réinitialisation envoyé à {Email}", Input.Email);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Erreur lors de l'envoi de l'email de réinitialisation à {Email}", Input.Email);
                // Continuer même si l'email échoue pour ne pas révéler l'existence du compte
            }

            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
